/*******************************************************************************************************************
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing@cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define trunc(x) ((Int)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class Flansch : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_06 : public PatcherInterfaceImpl {
    
    friend class Flansch;
    
    public:
    
    RNBOSubpatcher_06()
    {
    }
    
    ~RNBOSubpatcher_06()
    {
    }
    
    virtual Flansch* getPatcher() const {
        return static_cast<Flansch *>(_parentPatcher);
    }
    
    Flansch* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -894149362, false);
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, -30654451, false);
        getEngine()->flushClockEvents(this, 832840460, false);
        getEngine()->flushClockEvents(this, 1696335371, false);
        getEngine()->flushClockEvents(this, -1735137014, false);
        getEngine()->flushClockEvents(this, -6936981, false);
        getEngine()->flushClockEvents(this, -708766484, false);
        getEngine()->flushClockEvents(this, -1410595987, false);
        getEngine()->flushClockEvents(this, 694892522, false);
        getEngine()->flushClockEvents(this, 1396722025, false);
        getEngine()->flushClockEvents(this, 2098551528, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    inline number safesqrt(number num) {
        return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
    }
    
    Index vectorsize() const {
        return this->vs;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        this->noise_tilde_01_perform(this->signals[0], n);
    
        this->filtercoeff_01_perform(
            this->filtercoeff_01_frequency,
            this->filtercoeff_01_gain,
            this->filtercoeff_01_q,
            this->signals[1],
            this->signals[2],
            this->signals[3],
            this->signals[4],
            this->signals[5],
            n
        );
    
        this->numbertilde_01_perform(this->signals[1], this->dummyBuffer, n);
        this->numbertilde_03_perform(this->signals[2], this->dummyBuffer, n);
        this->numbertilde_04_perform(this->signals[3], this->dummyBuffer, n);
        this->numbertilde_05_perform(this->signals[4], this->dummyBuffer, n);
        this->numbertilde_06_perform(this->signals[5], this->dummyBuffer, n);
        this->dspexpr_03_perform(this->dspexpr_03_in1, this->signals[6], n);
        this->numbertilde_02_perform(this->signals[6], this->signals[7], n);
    
        this->cycle_tilde_02_perform(
            this->cycle_tilde_02_frequency,
            this->cycle_tilde_02_phase_offset,
            this->signals[6],
            this->dummyBuffer,
            n
        );
    
        this->dspexpr_10_perform(this->signals[6], this->dspexpr_10_in2, this->signals[8], n);
        this->dspexpr_04_perform(this->dspexpr_04_in1, this->signals[8], this->signals[6], n);
    
        this->cycle_tilde_01_perform(
            this->signals[6],
            this->cycle_tilde_01_phase_offset,
            this->signals[8],
            this->dummyBuffer,
            n
        );
    
        this->cycle_tilde_03_perform(
            this->cycle_tilde_03_frequency,
            this->cycle_tilde_03_phase_offset,
            this->signals[6],
            this->dummyBuffer,
            n
        );
    
        this->dspexpr_11_perform(this->signals[6], this->dspexpr_11_in2, this->signals[9], n);
        this->dspexpr_09_perform(this->signals[8], this->signals[9], this->signals[6], n);
        this->dspexpr_08_perform(this->signals[6], this->dspexpr_08_in2, this->signals[9], n);
        this->dspexpr_07_perform(this->signals[9], this->signals[6], n);
        this->dspexpr_06_perform(this->signals[6], this->dspexpr_06_in2, this->signals[9], n);
        this->dspexpr_05_perform(this->signals[9], this->dspexpr_05_in2, this->signals[6], n);
    
        this->slide_tilde_01_perform(
            this->signals[6],
            this->slide_tilde_01_up,
            this->slide_tilde_01_down,
            this->signals[9],
            n
        );
    
        this->dspexpr_01_perform(this->signals[0], this->signals[9], this->signals[8], n);
    
        this->biquad_tilde_01_perform(
            this->signals[8],
            this->signals[1],
            this->signals[2],
            this->signals[3],
            this->signals[4],
            this->signals[5],
            this->signals[9],
            n
        );
    
        this->dspexpr_02_perform(this->signals[9], this->signals[7], out1, n);
        this->numbertilde_07_perform(this->signals[6], this->dummyBuffer, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 10; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->filtercoeff_01_dspsetup(forceDSPSetup);
        this->numbertilde_01_dspsetup(forceDSPSetup);
        this->numbertilde_03_dspsetup(forceDSPSetup);
        this->numbertilde_04_dspsetup(forceDSPSetup);
        this->numbertilde_05_dspsetup(forceDSPSetup);
        this->numbertilde_06_dspsetup(forceDSPSetup);
        this->numbertilde_02_dspsetup(forceDSPSetup);
        this->cycle_tilde_02_dspsetup(forceDSPSetup);
        this->cycle_tilde_01_dspsetup(forceDSPSetup);
        this->cycle_tilde_03_dspsetup(forceDSPSetup);
        this->biquad_tilde_01_dspsetup(forceDSPSetup);
        this->numbertilde_07_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -894149362:
            {
            this->loadbang_01_startupbang_bang();
            break;
            }
        case -871642103:
            {
            this->loadbang_02_startupbang_bang();
            break;
            }
        case -30654451:
            {
            this->loadbang_03_startupbang_bang();
            break;
            }
        case 832840460:
            {
            this->loadbang_04_startupbang_bang();
            break;
            }
        case 1696335371:
            {
            this->loadbang_05_startupbang_bang();
            break;
            }
        case -1735137014:
            {
            this->loadbang_06_startupbang_bang();
            break;
            }
        case -6936981:
            {
            this->numbertilde_01_value_set(value);
            break;
            }
        case -708766484:
            {
            this->numbertilde_03_value_set(value);
            break;
            }
        case -1410595987:
            {
            this->numbertilde_04_value_set(value);
            break;
            }
        case 694892522:
            {
            this->numbertilde_05_value_set(value);
            break;
            }
        case 1396722025:
            {
            this->numbertilde_06_value_set(value);
            break;
            }
        case 2098551528:
            {
            this->numbertilde_02_value_set(value);
            break;
            }
        case -1494586265:
            {
            this->numbertilde_07_value_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("Random/number~_obj-245") == objectId)
                this->numbertilde_01_sig_number_set(payload);
    
            if (TAG("Random/number~_obj-233") == objectId)
                this->numbertilde_02_sig_number_set(payload);
    
            if (TAG("Random/number~_obj-246") == objectId)
                this->numbertilde_03_sig_number_set(payload);
    
            if (TAG("Random/number~_obj-252") == objectId)
                this->numbertilde_04_sig_number_set(payload);
    
            if (TAG("Random/number~_obj-243") == objectId)
                this->numbertilde_05_sig_number_set(payload);
    
            if (TAG("Random/number~_obj-242") == objectId)
                this->numbertilde_06_sig_number_set(payload);
    
            if (TAG("Random/number~_obj-143") == objectId)
                this->numbertilde_07_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("Random/number~_obj-245") == objectId)
                this->numbertilde_01_mode_set(payload);
    
            if (TAG("Random/number~_obj-233") == objectId)
                this->numbertilde_02_mode_set(payload);
    
            if (TAG("Random/number~_obj-246") == objectId)
                this->numbertilde_03_mode_set(payload);
    
            if (TAG("Random/number~_obj-252") == objectId)
                this->numbertilde_04_mode_set(payload);
    
            if (TAG("Random/number~_obj-243") == objectId)
                this->numbertilde_05_mode_set(payload);
    
            if (TAG("Random/number~_obj-242") == objectId)
                this->numbertilde_06_mode_set(payload);
    
            if (TAG("Random/number~_obj-143") == objectId)
                this->numbertilde_07_mode_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Random/message_obj-137") == objectId)
                this->message_01_listin_number_set(payload);
    
            if (TAG("Random/message_obj-12") == objectId)
                this->message_02_listin_number_set(payload);
    
            if (TAG("Random/message_obj-13") == objectId)
                this->message_03_listin_number_set(payload);
    
            if (TAG("Random/message_obj-14") == objectId)
                this->message_04_listin_number_set(payload);
    
            if (TAG("Random/message_obj-3") == objectId)
                this->message_05_listin_number_set(payload);
    
            if (TAG("Random/message_obj-6") == objectId)
                this->message_06_listin_number_set(payload);
    
            if (TAG("Random/message_obj-8") == objectId)
                this->message_07_listin_number_set(payload);
    
            if (TAG("Random/message_obj-10") == objectId)
                this->message_08_listin_number_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("Random/number~_obj-245") == objectId)
                this->numbertilde_01_sig_list_set(payload);
    
            if (TAG("Random/number~_obj-233") == objectId)
                this->numbertilde_02_sig_list_set(payload);
    
            if (TAG("Random/number~_obj-246") == objectId)
                this->numbertilde_03_sig_list_set(payload);
    
            if (TAG("Random/number~_obj-252") == objectId)
                this->numbertilde_04_sig_list_set(payload);
    
            if (TAG("Random/number~_obj-243") == objectId)
                this->numbertilde_05_sig_list_set(payload);
    
            if (TAG("Random/number~_obj-242") == objectId)
                this->numbertilde_06_sig_list_set(payload);
    
            if (TAG("Random/number~_obj-143") == objectId)
                this->numbertilde_07_sig_list_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Random/message_obj-137") == objectId)
                this->message_01_listin_list_set(payload);
    
            if (TAG("Random/message_obj-12") == objectId)
                this->message_02_listin_list_set(payload);
    
            if (TAG("Random/message_obj-13") == objectId)
                this->message_03_listin_list_set(payload);
    
            if (TAG("Random/message_obj-14") == objectId)
                this->message_04_listin_list_set(payload);
    
            if (TAG("Random/message_obj-3") == objectId)
                this->message_05_listin_list_set(payload);
    
            if (TAG("Random/message_obj-6") == objectId)
                this->message_06_listin_list_set(payload);
    
            if (TAG("Random/message_obj-8") == objectId)
                this->message_07_listin_list_set(payload);
    
            if (TAG("Random/message_obj-10") == objectId)
                this->message_08_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("Random/loadbang_obj-136") == objectId)
                this->loadbang_01_startupbang_bang();
    
            if (TAG("Random/loadbang_obj-15") == objectId)
                this->loadbang_02_startupbang_bang();
    
            if (TAG("Random/loadbang_obj-2") == objectId)
                this->loadbang_03_startupbang_bang();
    
            if (TAG("Random/loadbang_obj-5") == objectId)
                this->loadbang_04_startupbang_bang();
    
            if (TAG("Random/loadbang_obj-7") == objectId)
                this->loadbang_05_startupbang_bang();
    
            if (TAG("Random/loadbang_obj-9") == objectId)
                this->loadbang_06_startupbang_bang();
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Random/message_obj-137") == objectId)
                this->message_01_listin_bang_bang();
    
            if (TAG("Random/message_obj-12") == objectId)
                this->message_02_listin_bang_bang();
    
            if (TAG("Random/message_obj-13") == objectId)
                this->message_03_listin_bang_bang();
    
            if (TAG("Random/message_obj-14") == objectId)
                this->message_04_listin_bang_bang();
    
            if (TAG("Random/message_obj-3") == objectId)
                this->message_05_listin_bang_bang();
    
            if (TAG("Random/message_obj-6") == objectId)
                this->message_06_listin_bang_bang();
    
            if (TAG("Random/message_obj-8") == objectId)
                this->message_07_listin_bang_bang();
    
            if (TAG("Random/message_obj-10") == objectId)
                this->message_08_listin_bang_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("Random/number~_obj-245"):
            {
            return "Random/number~_obj-245";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("Random/message_obj-137"):
            {
            return "Random/message_obj-137";
            }
        case TAG("Random/message_obj-12"):
            {
            return "Random/message_obj-12";
            }
        case TAG("Random/number~_obj-233"):
            {
            return "Random/number~_obj-233";
            }
        case TAG("Random/number~_obj-246"):
            {
            return "Random/number~_obj-246";
            }
        case TAG("Random/message_obj-13"):
            {
            return "Random/message_obj-13";
            }
        case TAG("Random/number~_obj-252"):
            {
            return "Random/number~_obj-252";
            }
        case TAG("Random/message_obj-14"):
            {
            return "Random/message_obj-14";
            }
        case TAG("Random/number~_obj-243"):
            {
            return "Random/number~_obj-243";
            }
        case TAG("Random/message_obj-3"):
            {
            return "Random/message_obj-3";
            }
        case TAG("Random/number~_obj-242"):
            {
            return "Random/number~_obj-242";
            }
        case TAG("Random/number~_obj-143"):
            {
            return "Random/number~_obj-143";
            }
        case TAG("Random/message_obj-6"):
            {
            return "Random/message_obj-6";
            }
        case TAG("Random/message_obj-8"):
            {
            return "Random/message_obj-8";
            }
        case TAG("Random/message_obj-10"):
            {
            return "Random/message_obj-10";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("Random/loadbang_obj-136"):
            {
            return "Random/loadbang_obj-136";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("Random/loadbang_obj-15"):
            {
            return "Random/loadbang_obj-15";
            }
        case TAG("Random/loadbang_obj-2"):
            {
            return "Random/loadbang_obj-2";
            }
        case TAG("Random/loadbang_obj-5"):
            {
            return "Random/loadbang_obj-5";
            }
        case TAG("Random/loadbang_obj-7"):
            {
            return "Random/loadbang_obj-7";
            }
        case TAG("Random/loadbang_obj-9"):
            {
            return "Random/loadbang_obj-9";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 0) {
            this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_01_bufferUpdated();
            this->cycle_tilde_02_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_02_bufferUpdated();
            this->cycle_tilde_03_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_03_bufferUpdated();
        }
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_02_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_03_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
    }
    
    protected:
    
    void numbertilde_01_sig_number_set(number v) {
        this->numbertilde_01_outValue = v;
    }
    
    void numbertilde_01_sig_list_set(const list& v) {
        this->numbertilde_01_outValue = v[0];
    }
    
    void numbertilde_01_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_01_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_01_currentMode = 1;
        }
    }
    
    void loadbang_01_startupbang_bang() {
        this->loadbang_01_output_bang();
    }
    
    void message_01_listin_list_set(const list& v) {
        this->message_01_set_set(v);
    }
    
    void message_01_listin_number_set(number v) {
        this->message_01_set_set(v);
    }
    
    void message_01_listin_bang_bang() {
        this->message_01_trigger_bang();
    }
    
    void loadbang_02_startupbang_bang() {
        this->loadbang_02_output_bang();
    }
    
    void message_02_listin_list_set(const list& v) {
        this->message_02_set_set(v);
    }
    
    void message_02_listin_number_set(number v) {
        this->message_02_set_set(v);
    }
    
    void message_02_listin_bang_bang() {
        this->message_02_trigger_bang();
    }
    
    void numbertilde_02_sig_number_set(number v) {
        this->numbertilde_02_outValue = v;
    }
    
    void numbertilde_02_sig_list_set(const list& v) {
        this->numbertilde_02_outValue = v[0];
    }
    
    void numbertilde_02_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_02_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_02_currentMode = 1;
        }
    }
    
    void numbertilde_03_sig_number_set(number v) {
        this->numbertilde_03_outValue = v;
    }
    
    void numbertilde_03_sig_list_set(const list& v) {
        this->numbertilde_03_outValue = v[0];
    }
    
    void numbertilde_03_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_03_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_03_currentMode = 1;
        }
    }
    
    void message_03_listin_list_set(const list& v) {
        this->message_03_set_set(v);
    }
    
    void message_03_listin_number_set(number v) {
        this->message_03_set_set(v);
    }
    
    void message_03_listin_bang_bang() {
        this->message_03_trigger_bang();
    }
    
    void numbertilde_04_sig_number_set(number v) {
        this->numbertilde_04_outValue = v;
    }
    
    void numbertilde_04_sig_list_set(const list& v) {
        this->numbertilde_04_outValue = v[0];
    }
    
    void numbertilde_04_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_04_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_04_currentMode = 1;
        }
    }
    
    void message_04_listin_list_set(const list& v) {
        this->message_04_set_set(v);
    }
    
    void message_04_listin_number_set(number v) {
        this->message_04_set_set(v);
    }
    
    void message_04_listin_bang_bang() {
        this->message_04_trigger_bang();
    }
    
    void loadbang_03_startupbang_bang() {
        this->loadbang_03_output_bang();
    }
    
    void numbertilde_05_sig_number_set(number v) {
        this->numbertilde_05_outValue = v;
    }
    
    void numbertilde_05_sig_list_set(const list& v) {
        this->numbertilde_05_outValue = v[0];
    }
    
    void numbertilde_05_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_05_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_05_currentMode = 1;
        }
    }
    
    void message_05_listin_list_set(const list& v) {
        this->message_05_set_set(v);
    }
    
    void message_05_listin_number_set(number v) {
        this->message_05_set_set(v);
    }
    
    void message_05_listin_bang_bang() {
        this->message_05_trigger_bang();
    }
    
    void numbertilde_06_sig_number_set(number v) {
        this->numbertilde_06_outValue = v;
    }
    
    void numbertilde_06_sig_list_set(const list& v) {
        this->numbertilde_06_outValue = v[0];
    }
    
    void numbertilde_06_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_06_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_06_currentMode = 1;
        }
    }
    
    void numbertilde_07_sig_number_set(number v) {
        this->numbertilde_07_outValue = v;
    }
    
    void numbertilde_07_sig_list_set(const list& v) {
        this->numbertilde_07_outValue = v[0];
    }
    
    void numbertilde_07_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_07_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_07_currentMode = 1;
        }
    }
    
    void loadbang_04_startupbang_bang() {
        this->loadbang_04_output_bang();
    }
    
    void message_06_listin_list_set(const list& v) {
        this->message_06_set_set(v);
    }
    
    void message_06_listin_number_set(number v) {
        this->message_06_set_set(v);
    }
    
    void message_06_listin_bang_bang() {
        this->message_06_trigger_bang();
    }
    
    void loadbang_05_startupbang_bang() {
        this->loadbang_05_output_bang();
    }
    
    void message_07_listin_list_set(const list& v) {
        this->message_07_set_set(v);
    }
    
    void message_07_listin_number_set(number v) {
        this->message_07_set_set(v);
    }
    
    void message_07_listin_bang_bang() {
        this->message_07_trigger_bang();
    }
    
    void loadbang_06_startupbang_bang() {
        this->loadbang_06_output_bang();
    }
    
    void message_08_listin_list_set(const list& v) {
        this->message_08_set_set(v);
    }
    
    void message_08_listin_number_set(number v) {
        this->message_08_set_set(v);
    }
    
    void message_08_listin_bang_bang() {
        this->message_08_trigger_bang();
    }
    
    void numbertilde_01_value_set(number ) {}
    
    void numbertilde_03_value_set(number ) {}
    
    void numbertilde_04_value_set(number ) {}
    
    void numbertilde_05_value_set(number ) {}
    
    void numbertilde_06_value_set(number ) {}
    
    void numbertilde_02_value_set(number ) {}
    
    void numbertilde_07_value_set(number ) {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->noise_tilde_01_init();
        this->numbertilde_01_init();
        this->message_01_init();
        this->message_02_init();
        this->numbertilde_02_init();
        this->numbertilde_03_init();
        this->message_03_init();
        this->numbertilde_04_init();
        this->message_04_init();
        this->numbertilde_05_init();
        this->message_05_init();
        this->numbertilde_06_init();
        this->numbertilde_07_init();
        this->message_06_init();
        this->message_07_init();
        this->message_08_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->getEngine()->scheduleClockEvent(this, -894149362, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, -30654451, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, 832840460, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, 1696335371, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, -1735137014, 0 + this->_currentTime);;
    }
    
    void allocateDataRefs() {
        this->cycle_tilde_01_buffer->requestSize(16384, 1);
        this->cycle_tilde_01_buffer->setSampleRate(this->sr);
        this->cycle_tilde_02_buffer->requestSize(16384, 1);
        this->cycle_tilde_02_buffer->setSampleRate(this->sr);
        this->cycle_tilde_03_buffer->requestSize(16384, 1);
        this->cycle_tilde_03_buffer->setSampleRate(this->sr);
        this->cycle_tilde_01_buffer = this->cycle_tilde_01_buffer->allocateIfNeeded();
        this->cycle_tilde_02_buffer = this->cycle_tilde_02_buffer->allocateIfNeeded();
        this->cycle_tilde_03_buffer = this->cycle_tilde_03_buffer->allocateIfNeeded();
    }
    
    void filtercoeff_01_frequency_set(number v) {
        this->filtercoeff_01_frequency = v;
    }
    
    void filtercoeff_01_gain_set(number v) {
        this->filtercoeff_01_gain = v;
    }
    
    void filtercoeff_01_q_set(number v) {
        this->filtercoeff_01_q = v;
    }
    
    void message_01_out_set(const list& v) {
        {
            if (v->length > 2)
                this->filtercoeff_01_q_set(v[2]);
    
            if (v->length > 1)
                this->filtercoeff_01_gain_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->filtercoeff_01_frequency_set(converted);
        }
    }
    
    void message_01_trigger_bang() {
        this->message_01_out_set(this->message_01_set);
    }
    
    void loadbang_01_output_bang() {
        this->message_01_trigger_bang();
    }
    
    void message_01_set_set(const list& v) {
        this->message_01_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Random/message_obj-137"), v, this->_currentTime);
    }
    
    void dspexpr_03_in1_set(number v) {
        this->dspexpr_03_in1 = v;
    }
    
    void message_02_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_03_in1_set(converted);
        }
    }
    
    void message_02_trigger_bang() {
        this->message_02_out_set(this->message_02_set);
    }
    
    void loadbang_02_output_bang() {
        this->message_02_trigger_bang();
    }
    
    void message_02_set_set(const list& v) {
        this->message_02_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Random/message_obj-12"), v, this->_currentTime);
    }
    
    void message_03_set_set(const list& v) {
        this->message_03_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Random/message_obj-13"), v, this->_currentTime);
    }
    
    void message_03_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_03_in1_set(converted);
        }
    }
    
    void message_03_trigger_bang() {
        this->message_03_out_set(this->message_03_set);
    }
    
    void message_04_set_set(const list& v) {
        this->message_04_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Random/message_obj-14"), v, this->_currentTime);
    }
    
    void message_04_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_03_in1_set(converted);
        }
    }
    
    void message_04_trigger_bang() {
        this->message_04_out_set(this->message_04_set);
    }
    
    void message_05_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->filtercoeff_01_q_set(converted);
        }
    }
    
    void message_05_trigger_bang() {
        this->message_05_out_set(this->message_05_set);
    }
    
    void loadbang_03_output_bang() {
        this->message_05_trigger_bang();
    }
    
    void message_05_set_set(const list& v) {
        this->message_05_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Random/message_obj-3"), v, this->_currentTime);
    }
    
    void dspexpr_04_in1_set(number v) {
        this->dspexpr_04_in1 = v;
    }
    
    void dspexpr_04_in2_set(number v) {
        this->dspexpr_04_in2 = v;
    }
    
    void message_06_out_set(const list& v) {
        {
            if (v->length > 1)
                this->dspexpr_04_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_04_in1_set(converted);
        }
    }
    
    void message_06_trigger_bang() {
        this->message_06_out_set(this->message_06_set);
    }
    
    void loadbang_04_output_bang() {
        this->message_06_trigger_bang();
    }
    
    void message_06_set_set(const list& v) {
        this->message_06_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Random/message_obj-6"), v, this->_currentTime);
    }
    
    void cycle_tilde_02_frequency_set(number v) {
        this->cycle_tilde_02_frequency = v;
    }
    
    void cycle_tilde_02_phase_offset_set(number v) {
        this->cycle_tilde_02_phase_offset = v;
    }
    
    void message_07_out_set(const list& v) {
        {
            if (v->length > 1)
                this->cycle_tilde_02_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_02_frequency_set(converted);
        }
    }
    
    void message_07_trigger_bang() {
        this->message_07_out_set(this->message_07_set);
    }
    
    void loadbang_05_output_bang() {
        this->message_07_trigger_bang();
    }
    
    void message_07_set_set(const list& v) {
        this->message_07_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Random/message_obj-8"), v, this->_currentTime);
    }
    
    void cycle_tilde_03_frequency_set(number v) {
        this->cycle_tilde_03_frequency = v;
    }
    
    void cycle_tilde_03_phase_offset_set(number v) {
        this->cycle_tilde_03_phase_offset = v;
    }
    
    void message_08_out_set(const list& v) {
        {
            if (v->length > 1)
                this->cycle_tilde_03_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_03_frequency_set(converted);
        }
    }
    
    void message_08_trigger_bang() {
        this->message_08_out_set(this->message_08_set);
    }
    
    void loadbang_06_output_bang() {
        this->message_08_trigger_bang();
    }
    
    void message_08_set_set(const list& v) {
        this->message_08_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Random/message_obj-10"), v, this->_currentTime);
    }
    
    void noise_tilde_01_perform(SampleValue * out1, Index n) {
        auto __noise_tilde_01_state = this->noise_tilde_01_state;
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = xoshiro_next(__noise_tilde_01_state);
        }
    }
    
    void filtercoeff_01_perform(
        number frequency,
        number gain,
        number q,
        SampleValue * a0,
        SampleValue * a1,
        SampleValue * a2,
        SampleValue * b1,
        SampleValue * b2,
        Index n
    ) {
        RNBO_UNUSED(gain);
        auto __filtercoeff_01_activeResamp = this->filtercoeff_01_activeResamp;
        auto __filtercoeff_01_resamp_counter = this->filtercoeff_01_resamp_counter;
        auto __filtercoeff_01_K_EPSILON = this->filtercoeff_01_K_EPSILON;
    
        for (Index i = 0; i < n; i++) {
            number local_q = q;
            number local_gain = 1;
    
            if (local_gain < 0)
                local_gain = 0;
    
            number local_frequency = frequency;
    
            if (local_q < __filtercoeff_01_K_EPSILON)
                local_q = __filtercoeff_01_K_EPSILON;
    
            local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
            __filtercoeff_01_resamp_counter--;
    
            if (__filtercoeff_01_resamp_counter <= 0) {
                __filtercoeff_01_resamp_counter = __filtercoeff_01_activeResamp;
                this->filtercoeff_01_updateTerms(local_frequency, local_gain, local_q);
            }
    
            a0[(Index)i] = this->filtercoeff_01_la0;
            a1[(Index)i] = this->filtercoeff_01_la1;
            a2[(Index)i] = this->filtercoeff_01_la2;
            b1[(Index)i] = this->filtercoeff_01_lb1;
            b2[(Index)i] = this->filtercoeff_01_lb2;
        }
    
        this->filtercoeff_01_resamp_counter = __filtercoeff_01_resamp_counter;
    }
    
    void numbertilde_01_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_01_currentIntervalInSamples = this->numbertilde_01_currentIntervalInSamples;
        auto __numbertilde_01_lastValue = this->numbertilde_01_lastValue;
        auto __numbertilde_01_currentInterval = this->numbertilde_01_currentInterval;
        auto __numbertilde_01_rampInSamples = this->numbertilde_01_rampInSamples;
        auto __numbertilde_01_outValue = this->numbertilde_01_outValue;
        auto __numbertilde_01_currentMode = this->numbertilde_01_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_01_currentMode == 0) {
                output[(Index)i] = this->numbertilde_01_smooth_next(
                    __numbertilde_01_outValue,
                    __numbertilde_01_rampInSamples,
                    __numbertilde_01_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_01_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_01_lastValue && __numbertilde_01_currentInterval <= 0) {
            __numbertilde_01_currentInterval = __numbertilde_01_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -6936981,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_01_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Random/number~_obj-245"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_01_currentInterval = __numbertilde_01_currentInterval;
        this->numbertilde_01_lastValue = __numbertilde_01_lastValue;
    }
    
    void numbertilde_03_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_03_currentIntervalInSamples = this->numbertilde_03_currentIntervalInSamples;
        auto __numbertilde_03_lastValue = this->numbertilde_03_lastValue;
        auto __numbertilde_03_currentInterval = this->numbertilde_03_currentInterval;
        auto __numbertilde_03_rampInSamples = this->numbertilde_03_rampInSamples;
        auto __numbertilde_03_outValue = this->numbertilde_03_outValue;
        auto __numbertilde_03_currentMode = this->numbertilde_03_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_03_currentMode == 0) {
                output[(Index)i] = this->numbertilde_03_smooth_next(
                    __numbertilde_03_outValue,
                    __numbertilde_03_rampInSamples,
                    __numbertilde_03_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_03_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_03_lastValue && __numbertilde_03_currentInterval <= 0) {
            __numbertilde_03_currentInterval = __numbertilde_03_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -708766484,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_03_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Random/number~_obj-246"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_03_currentInterval = __numbertilde_03_currentInterval;
        this->numbertilde_03_lastValue = __numbertilde_03_lastValue;
    }
    
    void numbertilde_04_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_04_currentIntervalInSamples = this->numbertilde_04_currentIntervalInSamples;
        auto __numbertilde_04_lastValue = this->numbertilde_04_lastValue;
        auto __numbertilde_04_currentInterval = this->numbertilde_04_currentInterval;
        auto __numbertilde_04_rampInSamples = this->numbertilde_04_rampInSamples;
        auto __numbertilde_04_outValue = this->numbertilde_04_outValue;
        auto __numbertilde_04_currentMode = this->numbertilde_04_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_04_currentMode == 0) {
                output[(Index)i] = this->numbertilde_04_smooth_next(
                    __numbertilde_04_outValue,
                    __numbertilde_04_rampInSamples,
                    __numbertilde_04_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_04_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_04_lastValue && __numbertilde_04_currentInterval <= 0) {
            __numbertilde_04_currentInterval = __numbertilde_04_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1410595987,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_04_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Random/number~_obj-252"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_04_currentInterval = __numbertilde_04_currentInterval;
        this->numbertilde_04_lastValue = __numbertilde_04_lastValue;
    }
    
    void numbertilde_05_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_05_currentIntervalInSamples = this->numbertilde_05_currentIntervalInSamples;
        auto __numbertilde_05_lastValue = this->numbertilde_05_lastValue;
        auto __numbertilde_05_currentInterval = this->numbertilde_05_currentInterval;
        auto __numbertilde_05_rampInSamples = this->numbertilde_05_rampInSamples;
        auto __numbertilde_05_outValue = this->numbertilde_05_outValue;
        auto __numbertilde_05_currentMode = this->numbertilde_05_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_05_currentMode == 0) {
                output[(Index)i] = this->numbertilde_05_smooth_next(
                    __numbertilde_05_outValue,
                    __numbertilde_05_rampInSamples,
                    __numbertilde_05_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_05_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_05_lastValue && __numbertilde_05_currentInterval <= 0) {
            __numbertilde_05_currentInterval = __numbertilde_05_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                694892522,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_05_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Random/number~_obj-243"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_05_currentInterval = __numbertilde_05_currentInterval;
        this->numbertilde_05_lastValue = __numbertilde_05_lastValue;
    }
    
    void numbertilde_06_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_06_currentIntervalInSamples = this->numbertilde_06_currentIntervalInSamples;
        auto __numbertilde_06_lastValue = this->numbertilde_06_lastValue;
        auto __numbertilde_06_currentInterval = this->numbertilde_06_currentInterval;
        auto __numbertilde_06_rampInSamples = this->numbertilde_06_rampInSamples;
        auto __numbertilde_06_outValue = this->numbertilde_06_outValue;
        auto __numbertilde_06_currentMode = this->numbertilde_06_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_06_currentMode == 0) {
                output[(Index)i] = this->numbertilde_06_smooth_next(
                    __numbertilde_06_outValue,
                    __numbertilde_06_rampInSamples,
                    __numbertilde_06_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_06_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_06_lastValue && __numbertilde_06_currentInterval <= 0) {
            __numbertilde_06_currentInterval = __numbertilde_06_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                1396722025,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_06_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Random/number~_obj-242"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_06_currentInterval = __numbertilde_06_currentInterval;
        this->numbertilde_06_lastValue = __numbertilde_06_lastValue;
    }
    
    void dspexpr_03_perform(number in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_pow(10, in1 * 0.05);//#map:_###_obj_###_:1
        }
    }
    
    void numbertilde_02_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_02_currentIntervalInSamples = this->numbertilde_02_currentIntervalInSamples;
        auto __numbertilde_02_lastValue = this->numbertilde_02_lastValue;
        auto __numbertilde_02_currentInterval = this->numbertilde_02_currentInterval;
        auto __numbertilde_02_rampInSamples = this->numbertilde_02_rampInSamples;
        auto __numbertilde_02_outValue = this->numbertilde_02_outValue;
        auto __numbertilde_02_currentMode = this->numbertilde_02_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_02_currentMode == 0) {
                output[(Index)i] = this->numbertilde_02_smooth_next(
                    __numbertilde_02_outValue,
                    __numbertilde_02_rampInSamples,
                    __numbertilde_02_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_02_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_02_lastValue && __numbertilde_02_currentInterval <= 0) {
            __numbertilde_02_currentInterval = __numbertilde_02_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                2098551528,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_02_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Random/number~_obj-233"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_02_currentInterval = __numbertilde_02_currentInterval;
        this->numbertilde_02_lastValue = __numbertilde_02_lastValue;
    }
    
    void cycle_tilde_02_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_02_f2i = this->cycle_tilde_02_f2i;
        auto __cycle_tilde_02_buffer = this->cycle_tilde_02_buffer;
        auto __cycle_tilde_02_phasei = this->cycle_tilde_02_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_02_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_02_buffer[(Index)idx];
                number y1 = __cycle_tilde_02_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_02_f2i));
                    __cycle_tilde_02_phasei = uint32_add(__cycle_tilde_02_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_02_phasei = __cycle_tilde_02_phasei;
    }
    
    void dspexpr_10_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * 1;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_04_perform(number in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1 + in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void cycle_tilde_01_perform(
        const Sample * frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_01_f2i = this->cycle_tilde_01_f2i;
        auto __cycle_tilde_01_buffer = this->cycle_tilde_01_buffer;
        auto __cycle_tilde_01_phasei = this->cycle_tilde_01_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_01_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_01_buffer[(Index)idx];
                number y1 = __cycle_tilde_01_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_01_f2i));
                    __cycle_tilde_01_phasei = uint32_add(__cycle_tilde_01_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_01_phasei = __cycle_tilde_01_phasei;
    }
    
    void cycle_tilde_03_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_03_f2i = this->cycle_tilde_03_f2i;
        auto __cycle_tilde_03_buffer = this->cycle_tilde_03_buffer;
        auto __cycle_tilde_03_phasei = this->cycle_tilde_03_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_03_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_03_buffer[(Index)idx];
                number y1 = __cycle_tilde_03_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_03_f2i));
                    __cycle_tilde_03_phasei = uint32_add(__cycle_tilde_03_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_03_phasei = __cycle_tilde_03_phasei;
    }
    
    void dspexpr_11_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * 0.2;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_09_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] - in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_08_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * 0.025;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_07_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_abs(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_06_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_05_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + 1;//#map:_###_obj_###_:1
        }
    }
    
    void slide_tilde_01_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
        RNBO_UNUSED(down);
        RNBO_UNUSED(up);
        auto __slide_tilde_01_prev = this->slide_tilde_01_prev;
        auto iup = this->safediv(1., this->maximum(1., rnbo_abs(100)));
        auto idown = this->safediv(1., this->maximum(1., rnbo_abs(100)));
        Index i;
    
        for (i = 0; i < n; i++) {
            number temp = x[(Index)i] - __slide_tilde_01_prev;
            __slide_tilde_01_prev = __slide_tilde_01_prev + ((x[(Index)i] > __slide_tilde_01_prev ? iup : idown)) * temp;
            out1[(Index)i] = __slide_tilde_01_prev;
        }
    
        this->slide_tilde_01_prev = __slide_tilde_01_prev;
    }
    
    void dspexpr_01_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void biquad_tilde_01_perform(
        const Sample * x,
        const Sample * a0,
        const Sample * a1,
        const Sample * a2,
        const Sample * b1,
        const Sample * b2,
        SampleValue * out1,
        Index n
    ) {
        auto __biquad_tilde_01_y2 = this->biquad_tilde_01_y2;
        auto __biquad_tilde_01_y1 = this->biquad_tilde_01_y1;
        auto __biquad_tilde_01_x2 = this->biquad_tilde_01_x2;
        auto __biquad_tilde_01_x1 = this->biquad_tilde_01_x1;
        Index i;
    
        for (i = 0; i < n; i++) {
            number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_01_x1 * a1[(Index)i] + __biquad_tilde_01_x2 * a2[(Index)i] - (__biquad_tilde_01_y1 * b1[(Index)i] + __biquad_tilde_01_y2 * b2[(Index)i]);
            __biquad_tilde_01_x2 = __biquad_tilde_01_x1;
            __biquad_tilde_01_x1 = x[(Index)i];
            __biquad_tilde_01_y2 = __biquad_tilde_01_y1;
            __biquad_tilde_01_y1 = tmp;
            out1[(Index)i] = tmp;
        }
    
        this->biquad_tilde_01_x1 = __biquad_tilde_01_x1;
        this->biquad_tilde_01_x2 = __biquad_tilde_01_x2;
        this->biquad_tilde_01_y1 = __biquad_tilde_01_y1;
        this->biquad_tilde_01_y2 = __biquad_tilde_01_y2;
    }
    
    void dspexpr_02_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void numbertilde_07_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_07_currentIntervalInSamples = this->numbertilde_07_currentIntervalInSamples;
        auto __numbertilde_07_lastValue = this->numbertilde_07_lastValue;
        auto __numbertilde_07_currentInterval = this->numbertilde_07_currentInterval;
        auto __numbertilde_07_rampInSamples = this->numbertilde_07_rampInSamples;
        auto __numbertilde_07_outValue = this->numbertilde_07_outValue;
        auto __numbertilde_07_currentMode = this->numbertilde_07_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_07_currentMode == 0) {
                output[(Index)i] = this->numbertilde_07_smooth_next(
                    __numbertilde_07_outValue,
                    __numbertilde_07_rampInSamples,
                    __numbertilde_07_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_07_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_07_lastValue && __numbertilde_07_currentInterval <= 0) {
            __numbertilde_07_currentInterval = __numbertilde_07_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_07_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Random/number~_obj-143"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_07_currentInterval = __numbertilde_07_currentInterval;
        this->numbertilde_07_lastValue = __numbertilde_07_lastValue;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void biquad_tilde_01_reset() {
        this->biquad_tilde_01_x1 = 0;
        this->biquad_tilde_01_x2 = 0;
        this->biquad_tilde_01_y1 = 0;
        this->biquad_tilde_01_y2 = 0;
    }
    
    void biquad_tilde_01_dspsetup(bool force) {
        if ((bool)(this->biquad_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->biquad_tilde_01_reset();
        this->biquad_tilde_01_setupDone = true;
    }
    
    void noise_tilde_01_init() {
        this->noise_tilde_01_reset();
    }
    
    void noise_tilde_01_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->noise_tilde_01_state
        );
    }
    
    array<number, 5> filtercoeff_01_localop_next(number frequency, number q, number gain, number type) {
        number omega = frequency * this->filtercoeff_01_localop_twopi_over_sr;
        this->filtercoeff_01_localop_cs = rnbo_cos(omega);
        this->filtercoeff_01_localop_sn = rnbo_sin(omega);
        this->filtercoeff_01_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
        this->filtercoeff_01_localop_one_over_q = (number)1 / q;
        this->filtercoeff_01_localop_alpha = this->filtercoeff_01_localop_sn * 0.5 * this->filtercoeff_01_localop_one_over_q;
    
        switch ((int)type) {
        case 5:
            {
            this->filtercoeff_01_localop_A = this->safesqrt(gain);
    
            this->filtercoeff_01_localop_beta = this->safesqrt(
                (this->filtercoeff_01_localop_A * this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_one_over_q - (this->filtercoeff_01_localop_A - 1.) * (this->filtercoeff_01_localop_A - 1.)
            );
    
            this->filtercoeff_01_localop_b0 = (number)1 / (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn);
            break;
            }
        case 6:
            {
            this->filtercoeff_01_localop_A = this->safesqrt(gain);
    
            this->filtercoeff_01_localop_beta = this->safesqrt(
                (this->filtercoeff_01_localop_A * this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_one_over_q - (this->filtercoeff_01_localop_A - 1.) * (this->filtercoeff_01_localop_A - 1.)
            );
    
            this->filtercoeff_01_localop_b0 = (number)1 / (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn);
            break;
            }
        case 4:
            {
            this->filtercoeff_01_localop_A = this->safesqrt(gain);
            this->filtercoeff_01_localop_one_over_a = (this->filtercoeff_01_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_01_localop_A);
            this->filtercoeff_01_localop_b0 = (number)1 / (1. + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_a);
            break;
            }
        case 9:
        case 10:
        case 11:
        case 13:
        case 14:
            {
            this->filtercoeff_01_localop_b0 = (number)1 / (1. + this->filtercoeff_01_localop_alpha);
            this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
            break;
            }
        default:
            {
            this->filtercoeff_01_localop_b0 = (number)1 / (1. + this->filtercoeff_01_localop_alpha);
            break;
            }
        }
    
        switch ((int)type) {
        case 0:
            {
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. - this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la1 = (1. - this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 1:
            {
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. + this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la1 = -(1. + this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 2:
            {
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la1 = 0.;
            this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 7:
            {
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * q * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la1 = 0.;
            this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * q * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 3:
            {
            this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_b0;
            break;
            }
        case 8:
            {
            this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = this->filtercoeff_01_localop_la0 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la2 = 1.0;
            break;
            }
        case 4:
            {
            this->filtercoeff_01_localop_la0 = (1. + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_A) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la2 = (1. - this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_A) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_a) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 5:
            {
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la1 = 2. * this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A - 1 - (this->filtercoeff_01_localop_A + 1) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb1 = -2. * (this->filtercoeff_01_localop_A - 1. + (this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 6:
            {
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la1 = -2. * this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A - 1. + (this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb1 = 2. * (this->filtercoeff_01_localop_A - 1. - (this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 9:
            {
            this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. - this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0g;
            this->filtercoeff_01_localop_la1 = (1. - this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0g;
            this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 10:
            {
            this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. + this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0g;
            this->filtercoeff_01_localop_la1 = -(1. + this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0g;
            this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 11:
            {
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * gain * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la1 = 0.;
            this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * gain * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 13:
            {
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * gain * q * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la1 = 0.;
            this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * gain * q * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 12:
            {
            this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
            this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la1 *= this->filtercoeff_01_localop_b0g;
            this->filtercoeff_01_localop_lb1 *= this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_b0g;
            this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_b0g;
            break;
            }
        case 14:
            {
            this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
            this->filtercoeff_01_localop_la0 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0g;
            this->filtercoeff_01_localop_la1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0g;
            this->filtercoeff_01_localop_la2 = gain;
            this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
            this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
            break;
            }
        case 15:
            {
            this->filtercoeff_01_localop_la0 = 1;
            this->filtercoeff_01_localop_la1 = 0;
            this->filtercoeff_01_localop_la2 = 0;
            this->filtercoeff_01_localop_lb1 = 0;
            this->filtercoeff_01_localop_lb2 = 0;
            }
        default:
            {
            break;
            }
        }
    
        return {
            this->filtercoeff_01_localop_la0,
            this->filtercoeff_01_localop_la1,
            this->filtercoeff_01_localop_la2,
            this->filtercoeff_01_localop_lb1,
            this->filtercoeff_01_localop_lb2
        };
    }
    
    void filtercoeff_01_localop_dspsetup() {
        this->filtercoeff_01_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
    }
    
    void filtercoeff_01_localop_reset() {
        this->filtercoeff_01_localop_twopi_over_sr = 0;
        this->filtercoeff_01_localop_cs = 0;
        this->filtercoeff_01_localop_sn = 0;
        this->filtercoeff_01_localop_one_over_gain = 0;
        this->filtercoeff_01_localop_one_over_q = 0;
        this->filtercoeff_01_localop_alpha = 0;
        this->filtercoeff_01_localop_beta = 0;
        this->filtercoeff_01_localop_b0 = 0;
        this->filtercoeff_01_localop_b0g = 0;
        this->filtercoeff_01_localop_A = 0;
        this->filtercoeff_01_localop_one_over_a = 0;
        this->filtercoeff_01_localop_la0 = 0;
        this->filtercoeff_01_localop_la1 = 0;
        this->filtercoeff_01_localop_la2 = 0;
        this->filtercoeff_01_localop_lb1 = 0;
        this->filtercoeff_01_localop_lb2 = 0;
    }
    
    void filtercoeff_01_updateTerms(number local_frequency, number local_gain, number local_q) {
        if ((bool)(this->filtercoeff_01_force_update) || local_frequency != this->filtercoeff_01_last_frequency || local_q != this->filtercoeff_01_last_q || local_gain != this->filtercoeff_01_last_gain || this->filtercoeff_01_type != this->filtercoeff_01_last_type) {
            array<number, 5> tmp = this->filtercoeff_01_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_01_type);
            this->filtercoeff_01_la0 = tmp[0];
            this->filtercoeff_01_la1 = tmp[1];
            this->filtercoeff_01_la2 = tmp[2];
            this->filtercoeff_01_lb1 = tmp[3];
            this->filtercoeff_01_lb2 = tmp[4];
            this->filtercoeff_01_last_frequency = local_frequency;
            this->filtercoeff_01_last_q = local_q;
            this->filtercoeff_01_last_gain = local_gain;
            this->filtercoeff_01_last_type = this->filtercoeff_01_type;
            this->filtercoeff_01_force_update = false;
        }
    }
    
    void filtercoeff_01_dspsetup(bool force) {
        if ((bool)(this->filtercoeff_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        {
            this->filtercoeff_01_activeResamp = this->vectorsize();
        }
    
        this->filtercoeff_01_resamp_counter = 0;
        this->filtercoeff_01_la0 = 0.;
        this->filtercoeff_01_la1 = 0.;
        this->filtercoeff_01_la2 = 0.;
        this->filtercoeff_01_lb1 = 0.;
        this->filtercoeff_01_lb2 = 0.;
        this->filtercoeff_01_last_frequency = -1.;
        this->filtercoeff_01_last_q = -1.;
        this->filtercoeff_01_last_gain = -1.;
        this->filtercoeff_01_last_type = this->filtercoeff_01_type;
        this->filtercoeff_01_force_update = true;
        this->filtercoeff_01_setupDone = true;
        this->filtercoeff_01_localop_dspsetup();
    }
    
    number numbertilde_01_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_01_smooth_d_prev);
        this->numbertilde_01_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_01_smooth_d_dspsetup() {
        this->numbertilde_01_smooth_d_reset();
    }
    
    void numbertilde_01_smooth_d_reset() {
        this->numbertilde_01_smooth_d_prev = 0;
    }
    
    number numbertilde_01_smooth_next(number x, number up, number down) {
        if (this->numbertilde_01_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_01_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_01_smooth_index = _up;
                this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _up;
            } else if (x < this->numbertilde_01_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_01_smooth_index = _down;
                this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_01_smooth_index > 0) {
            this->numbertilde_01_smooth_prev += this->numbertilde_01_smooth_increment;
            this->numbertilde_01_smooth_index -= 1;
        } else {
            this->numbertilde_01_smooth_prev = x;
        }
    
        return this->numbertilde_01_smooth_prev;
    }
    
    void numbertilde_01_smooth_reset() {
        this->numbertilde_01_smooth_prev = 0;
        this->numbertilde_01_smooth_index = 0;
        this->numbertilde_01_smooth_increment = 0;
        this->numbertilde_01_smooth_d_reset();
    }
    
    void numbertilde_01_init() {
        this->numbertilde_01_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Random/number~_obj-245"), 1, this->_currentTime);
    }
    
    void numbertilde_01_dspsetup(bool force) {
        if ((bool)(this->numbertilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_01_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_01_currentInterval = this->numbertilde_01_currentIntervalInSamples;
        this->numbertilde_01_rampInSamples = this->mstosamps(this->numbertilde_01_ramp);
        this->numbertilde_01_setupDone = true;
        this->numbertilde_01_smooth_d_dspsetup();
    }
    
    void message_01_init() {
        this->message_01_set_set({1000});
    }
    
    void message_02_init() {
        this->message_02_set_set({-80});
    }
    
    number numbertilde_02_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_02_smooth_d_prev);
        this->numbertilde_02_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_02_smooth_d_dspsetup() {
        this->numbertilde_02_smooth_d_reset();
    }
    
    void numbertilde_02_smooth_d_reset() {
        this->numbertilde_02_smooth_d_prev = 0;
    }
    
    number numbertilde_02_smooth_next(number x, number up, number down) {
        if (this->numbertilde_02_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_02_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_02_smooth_index = _up;
                this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _up;
            } else if (x < this->numbertilde_02_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_02_smooth_index = _down;
                this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_02_smooth_index > 0) {
            this->numbertilde_02_smooth_prev += this->numbertilde_02_smooth_increment;
            this->numbertilde_02_smooth_index -= 1;
        } else {
            this->numbertilde_02_smooth_prev = x;
        }
    
        return this->numbertilde_02_smooth_prev;
    }
    
    void numbertilde_02_smooth_reset() {
        this->numbertilde_02_smooth_prev = 0;
        this->numbertilde_02_smooth_index = 0;
        this->numbertilde_02_smooth_increment = 0;
        this->numbertilde_02_smooth_d_reset();
    }
    
    void numbertilde_02_init() {
        this->numbertilde_02_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Random/number~_obj-233"), 1, this->_currentTime);
    }
    
    void numbertilde_02_dspsetup(bool force) {
        if ((bool)(this->numbertilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_02_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_02_currentInterval = this->numbertilde_02_currentIntervalInSamples;
        this->numbertilde_02_rampInSamples = this->mstosamps(this->numbertilde_02_ramp);
        this->numbertilde_02_setupDone = true;
        this->numbertilde_02_smooth_d_dspsetup();
    }
    
    number numbertilde_03_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_03_smooth_d_prev);
        this->numbertilde_03_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_03_smooth_d_dspsetup() {
        this->numbertilde_03_smooth_d_reset();
    }
    
    void numbertilde_03_smooth_d_reset() {
        this->numbertilde_03_smooth_d_prev = 0;
    }
    
    number numbertilde_03_smooth_next(number x, number up, number down) {
        if (this->numbertilde_03_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_03_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_03_smooth_index = _up;
                this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _up;
            } else if (x < this->numbertilde_03_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_03_smooth_index = _down;
                this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_03_smooth_index > 0) {
            this->numbertilde_03_smooth_prev += this->numbertilde_03_smooth_increment;
            this->numbertilde_03_smooth_index -= 1;
        } else {
            this->numbertilde_03_smooth_prev = x;
        }
    
        return this->numbertilde_03_smooth_prev;
    }
    
    void numbertilde_03_smooth_reset() {
        this->numbertilde_03_smooth_prev = 0;
        this->numbertilde_03_smooth_index = 0;
        this->numbertilde_03_smooth_increment = 0;
        this->numbertilde_03_smooth_d_reset();
    }
    
    void numbertilde_03_init() {
        this->numbertilde_03_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Random/number~_obj-246"), 1, this->_currentTime);
    }
    
    void numbertilde_03_dspsetup(bool force) {
        if ((bool)(this->numbertilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_03_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_03_currentInterval = this->numbertilde_03_currentIntervalInSamples;
        this->numbertilde_03_rampInSamples = this->mstosamps(this->numbertilde_03_ramp);
        this->numbertilde_03_setupDone = true;
        this->numbertilde_03_smooth_d_dspsetup();
    }
    
    void message_03_init() {
        this->message_03_set_set({-70});
    }
    
    number numbertilde_04_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_04_smooth_d_prev);
        this->numbertilde_04_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_04_smooth_d_dspsetup() {
        this->numbertilde_04_smooth_d_reset();
    }
    
    void numbertilde_04_smooth_d_reset() {
        this->numbertilde_04_smooth_d_prev = 0;
    }
    
    number numbertilde_04_smooth_next(number x, number up, number down) {
        if (this->numbertilde_04_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_04_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_04_smooth_index = _up;
                this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _up;
            } else if (x < this->numbertilde_04_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_04_smooth_index = _down;
                this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_04_smooth_index > 0) {
            this->numbertilde_04_smooth_prev += this->numbertilde_04_smooth_increment;
            this->numbertilde_04_smooth_index -= 1;
        } else {
            this->numbertilde_04_smooth_prev = x;
        }
    
        return this->numbertilde_04_smooth_prev;
    }
    
    void numbertilde_04_smooth_reset() {
        this->numbertilde_04_smooth_prev = 0;
        this->numbertilde_04_smooth_index = 0;
        this->numbertilde_04_smooth_increment = 0;
        this->numbertilde_04_smooth_d_reset();
    }
    
    void numbertilde_04_init() {
        this->numbertilde_04_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Random/number~_obj-252"), 1, this->_currentTime);
    }
    
    void numbertilde_04_dspsetup(bool force) {
        if ((bool)(this->numbertilde_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_04_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_04_currentInterval = this->numbertilde_04_currentIntervalInSamples;
        this->numbertilde_04_rampInSamples = this->mstosamps(this->numbertilde_04_ramp);
        this->numbertilde_04_setupDone = true;
        this->numbertilde_04_smooth_d_dspsetup();
    }
    
    void message_04_init() {
        this->message_04_set_set({-60});
    }
    
    number numbertilde_05_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_05_smooth_d_prev);
        this->numbertilde_05_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_05_smooth_d_dspsetup() {
        this->numbertilde_05_smooth_d_reset();
    }
    
    void numbertilde_05_smooth_d_reset() {
        this->numbertilde_05_smooth_d_prev = 0;
    }
    
    number numbertilde_05_smooth_next(number x, number up, number down) {
        if (this->numbertilde_05_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_05_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_05_smooth_index = _up;
                this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _up;
            } else if (x < this->numbertilde_05_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_05_smooth_index = _down;
                this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_05_smooth_index > 0) {
            this->numbertilde_05_smooth_prev += this->numbertilde_05_smooth_increment;
            this->numbertilde_05_smooth_index -= 1;
        } else {
            this->numbertilde_05_smooth_prev = x;
        }
    
        return this->numbertilde_05_smooth_prev;
    }
    
    void numbertilde_05_smooth_reset() {
        this->numbertilde_05_smooth_prev = 0;
        this->numbertilde_05_smooth_index = 0;
        this->numbertilde_05_smooth_increment = 0;
        this->numbertilde_05_smooth_d_reset();
    }
    
    void numbertilde_05_init() {
        this->numbertilde_05_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Random/number~_obj-243"), 1, this->_currentTime);
    }
    
    void numbertilde_05_dspsetup(bool force) {
        if ((bool)(this->numbertilde_05_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_05_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_05_currentInterval = this->numbertilde_05_currentIntervalInSamples;
        this->numbertilde_05_rampInSamples = this->mstosamps(this->numbertilde_05_ramp);
        this->numbertilde_05_setupDone = true;
        this->numbertilde_05_smooth_d_dspsetup();
    }
    
    void message_05_init() {
        this->message_05_set_set({0.7});
    }
    
    number numbertilde_06_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_06_smooth_d_prev);
        this->numbertilde_06_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_06_smooth_d_dspsetup() {
        this->numbertilde_06_smooth_d_reset();
    }
    
    void numbertilde_06_smooth_d_reset() {
        this->numbertilde_06_smooth_d_prev = 0;
    }
    
    number numbertilde_06_smooth_next(number x, number up, number down) {
        if (this->numbertilde_06_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_06_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_06_smooth_index = _up;
                this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _up;
            } else if (x < this->numbertilde_06_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_06_smooth_index = _down;
                this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_06_smooth_index > 0) {
            this->numbertilde_06_smooth_prev += this->numbertilde_06_smooth_increment;
            this->numbertilde_06_smooth_index -= 1;
        } else {
            this->numbertilde_06_smooth_prev = x;
        }
    
        return this->numbertilde_06_smooth_prev;
    }
    
    void numbertilde_06_smooth_reset() {
        this->numbertilde_06_smooth_prev = 0;
        this->numbertilde_06_smooth_index = 0;
        this->numbertilde_06_smooth_increment = 0;
        this->numbertilde_06_smooth_d_reset();
    }
    
    void numbertilde_06_init() {
        this->numbertilde_06_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Random/number~_obj-242"), 1, this->_currentTime);
    }
    
    void numbertilde_06_dspsetup(bool force) {
        if ((bool)(this->numbertilde_06_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_06_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_06_currentInterval = this->numbertilde_06_currentIntervalInSamples;
        this->numbertilde_06_rampInSamples = this->mstosamps(this->numbertilde_06_ramp);
        this->numbertilde_06_setupDone = true;
        this->numbertilde_06_smooth_d_dspsetup();
    }
    
    number numbertilde_07_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_07_smooth_d_prev);
        this->numbertilde_07_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_07_smooth_d_dspsetup() {
        this->numbertilde_07_smooth_d_reset();
    }
    
    void numbertilde_07_smooth_d_reset() {
        this->numbertilde_07_smooth_d_prev = 0;
    }
    
    number numbertilde_07_smooth_next(number x, number up, number down) {
        if (this->numbertilde_07_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_07_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_07_smooth_index = _up;
                this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _up;
            } else if (x < this->numbertilde_07_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_07_smooth_index = _down;
                this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_07_smooth_index > 0) {
            this->numbertilde_07_smooth_prev += this->numbertilde_07_smooth_increment;
            this->numbertilde_07_smooth_index -= 1;
        } else {
            this->numbertilde_07_smooth_prev = x;
        }
    
        return this->numbertilde_07_smooth_prev;
    }
    
    void numbertilde_07_smooth_reset() {
        this->numbertilde_07_smooth_prev = 0;
        this->numbertilde_07_smooth_index = 0;
        this->numbertilde_07_smooth_increment = 0;
        this->numbertilde_07_smooth_d_reset();
    }
    
    void numbertilde_07_init() {
        this->numbertilde_07_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Random/number~_obj-143"), 1, this->_currentTime);
    }
    
    void numbertilde_07_dspsetup(bool force) {
        if ((bool)(this->numbertilde_07_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_07_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_07_currentInterval = this->numbertilde_07_currentIntervalInSamples;
        this->numbertilde_07_rampInSamples = this->mstosamps(this->numbertilde_07_ramp);
        this->numbertilde_07_setupDone = true;
        this->numbertilde_07_smooth_d_dspsetup();
    }
    
    void message_06_init() {
        this->message_06_set_set({0.6});
    }
    
    number cycle_tilde_01_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_01_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_01_ph_conv;
    
        if (this->cycle_tilde_01_ph_currentPhase < 0.)
            this->cycle_tilde_01_ph_currentPhase = 1. + this->cycle_tilde_01_ph_currentPhase;
    
        if (this->cycle_tilde_01_ph_currentPhase > 1.)
            this->cycle_tilde_01_ph_currentPhase = this->cycle_tilde_01_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_01_ph_currentPhase;
        this->cycle_tilde_01_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_01_ph_reset() {
        this->cycle_tilde_01_ph_currentPhase = 0;
    }
    
    void cycle_tilde_01_ph_dspsetup() {
        this->cycle_tilde_01_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_01_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_01_phasei = 0;
        this->cycle_tilde_01_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
        this->cycle_tilde_01_setupDone = true;
        this->cycle_tilde_01_ph_dspsetup();
    }
    
    void cycle_tilde_01_bufferUpdated() {
        this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
    }
    
    void message_07_init() {
        this->message_07_set_set({2.6});
    }
    
    number cycle_tilde_02_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_02_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_02_ph_conv;
    
        if (this->cycle_tilde_02_ph_currentPhase < 0.)
            this->cycle_tilde_02_ph_currentPhase = 1. + this->cycle_tilde_02_ph_currentPhase;
    
        if (this->cycle_tilde_02_ph_currentPhase > 1.)
            this->cycle_tilde_02_ph_currentPhase = this->cycle_tilde_02_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_02_ph_currentPhase;
        this->cycle_tilde_02_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_02_ph_reset() {
        this->cycle_tilde_02_ph_currentPhase = 0;
    }
    
    void cycle_tilde_02_ph_dspsetup() {
        this->cycle_tilde_02_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_02_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_02_phasei = 0;
        this->cycle_tilde_02_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_02_wrap = (long)(this->cycle_tilde_02_buffer->getSize()) - 1;
        this->cycle_tilde_02_setupDone = true;
        this->cycle_tilde_02_ph_dspsetup();
    }
    
    void cycle_tilde_02_bufferUpdated() {
        this->cycle_tilde_02_wrap = (long)(this->cycle_tilde_02_buffer->getSize()) - 1;
    }
    
    void message_08_init() {
        this->message_08_set_set({3.9});
    }
    
    number cycle_tilde_03_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_03_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_03_ph_conv;
    
        if (this->cycle_tilde_03_ph_currentPhase < 0.)
            this->cycle_tilde_03_ph_currentPhase = 1. + this->cycle_tilde_03_ph_currentPhase;
    
        if (this->cycle_tilde_03_ph_currentPhase > 1.)
            this->cycle_tilde_03_ph_currentPhase = this->cycle_tilde_03_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_03_ph_currentPhase;
        this->cycle_tilde_03_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_03_ph_reset() {
        this->cycle_tilde_03_ph_currentPhase = 0;
    }
    
    void cycle_tilde_03_ph_dspsetup() {
        this->cycle_tilde_03_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_03_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_03_phasei = 0;
        this->cycle_tilde_03_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_03_wrap = (long)(this->cycle_tilde_03_buffer->getSize()) - 1;
        this->cycle_tilde_03_setupDone = true;
        this->cycle_tilde_03_ph_dspsetup();
    }
    
    void cycle_tilde_03_bufferUpdated() {
        this->cycle_tilde_03_wrap = (long)(this->cycle_tilde_03_buffer->getSize()) - 1;
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_01_in1 = 0;
        dspexpr_01_in2 = 0;
        biquad_tilde_01_x = 0;
        biquad_tilde_01_a0 = 0;
        biquad_tilde_01_a1 = 0;
        biquad_tilde_01_a2 = 0;
        biquad_tilde_01_b1 = 0;
        biquad_tilde_01_b2 = 0;
        dspexpr_02_in1 = 0;
        dspexpr_02_in2 = 0;
        filtercoeff_01_frequency = 1000;
        filtercoeff_01_gain = 1;
        filtercoeff_01_q = 1;
        filtercoeff_01_type = 2;
        numbertilde_01_input_number = 0;
        numbertilde_01_ramp = 0;
        numbertilde_02_input_number = 0;
        numbertilde_02_ramp = 0;
        dspexpr_03_in1 = 0;
        numbertilde_03_input_number = 0;
        numbertilde_03_ramp = 0;
        numbertilde_04_input_number = 0;
        numbertilde_04_ramp = 0;
        numbertilde_05_input_number = 0;
        numbertilde_05_ramp = 0;
        numbertilde_06_input_number = 0;
        numbertilde_06_ramp = 0;
        numbertilde_07_input_number = 0;
        numbertilde_07_ramp = 0;
        slide_tilde_01_x = 0;
        slide_tilde_01_up = 100;
        slide_tilde_01_down = 100;
        dspexpr_04_in1 = 0;
        dspexpr_04_in2 = 0;
        dspexpr_05_in1 = 0;
        dspexpr_05_in2 = 1;
        dspexpr_06_in1 = 0;
        dspexpr_06_in2 = -1;
        dspexpr_07_in1 = 0;
        dspexpr_08_in1 = 0;
        dspexpr_08_in2 = 0.025;
        dspexpr_09_in1 = 0;
        dspexpr_09_in2 = 0;
        cycle_tilde_01_frequency = 0;
        cycle_tilde_01_phase_offset = 0;
        dspexpr_10_in1 = 0;
        dspexpr_10_in2 = 1;
        cycle_tilde_02_frequency = 0;
        cycle_tilde_02_phase_offset = 0;
        dspexpr_11_in1 = 0;
        dspexpr_11_in2 = 0.2;
        cycle_tilde_03_frequency = 0;
        cycle_tilde_03_phase_offset = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        signals[6] = nullptr;
        signals[7] = nullptr;
        signals[8] = nullptr;
        signals[9] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        biquad_tilde_01_x1 = 0;
        biquad_tilde_01_x2 = 0;
        biquad_tilde_01_y1 = 0;
        biquad_tilde_01_y2 = 0;
        biquad_tilde_01_setupDone = false;
        filtercoeff_01_K_EPSILON = 1e-9;
        filtercoeff_01_setupDone = false;
        numbertilde_01_currentInterval = 0;
        numbertilde_01_currentIntervalInSamples = 0;
        numbertilde_01_lastValue = 0;
        numbertilde_01_outValue = 0;
        numbertilde_01_rampInSamples = 0;
        numbertilde_01_currentMode = 0;
        numbertilde_01_smooth_d_prev = 0;
        numbertilde_01_smooth_prev = 0;
        numbertilde_01_smooth_index = 0;
        numbertilde_01_smooth_increment = 0;
        numbertilde_01_setupDone = false;
        numbertilde_02_currentInterval = 0;
        numbertilde_02_currentIntervalInSamples = 0;
        numbertilde_02_lastValue = 0;
        numbertilde_02_outValue = 0;
        numbertilde_02_rampInSamples = 0;
        numbertilde_02_currentMode = 0;
        numbertilde_02_smooth_d_prev = 0;
        numbertilde_02_smooth_prev = 0;
        numbertilde_02_smooth_index = 0;
        numbertilde_02_smooth_increment = 0;
        numbertilde_02_setupDone = false;
        numbertilde_03_currentInterval = 0;
        numbertilde_03_currentIntervalInSamples = 0;
        numbertilde_03_lastValue = 0;
        numbertilde_03_outValue = 0;
        numbertilde_03_rampInSamples = 0;
        numbertilde_03_currentMode = 0;
        numbertilde_03_smooth_d_prev = 0;
        numbertilde_03_smooth_prev = 0;
        numbertilde_03_smooth_index = 0;
        numbertilde_03_smooth_increment = 0;
        numbertilde_03_setupDone = false;
        numbertilde_04_currentInterval = 0;
        numbertilde_04_currentIntervalInSamples = 0;
        numbertilde_04_lastValue = 0;
        numbertilde_04_outValue = 0;
        numbertilde_04_rampInSamples = 0;
        numbertilde_04_currentMode = 0;
        numbertilde_04_smooth_d_prev = 0;
        numbertilde_04_smooth_prev = 0;
        numbertilde_04_smooth_index = 0;
        numbertilde_04_smooth_increment = 0;
        numbertilde_04_setupDone = false;
        numbertilde_05_currentInterval = 0;
        numbertilde_05_currentIntervalInSamples = 0;
        numbertilde_05_lastValue = 0;
        numbertilde_05_outValue = 0;
        numbertilde_05_rampInSamples = 0;
        numbertilde_05_currentMode = 0;
        numbertilde_05_smooth_d_prev = 0;
        numbertilde_05_smooth_prev = 0;
        numbertilde_05_smooth_index = 0;
        numbertilde_05_smooth_increment = 0;
        numbertilde_05_setupDone = false;
        numbertilde_06_currentInterval = 0;
        numbertilde_06_currentIntervalInSamples = 0;
        numbertilde_06_lastValue = 0;
        numbertilde_06_outValue = 0;
        numbertilde_06_rampInSamples = 0;
        numbertilde_06_currentMode = 0;
        numbertilde_06_smooth_d_prev = 0;
        numbertilde_06_smooth_prev = 0;
        numbertilde_06_smooth_index = 0;
        numbertilde_06_smooth_increment = 0;
        numbertilde_06_setupDone = false;
        numbertilde_07_currentInterval = 0;
        numbertilde_07_currentIntervalInSamples = 0;
        numbertilde_07_lastValue = 0;
        numbertilde_07_outValue = 0;
        numbertilde_07_rampInSamples = 0;
        numbertilde_07_currentMode = 0;
        numbertilde_07_smooth_d_prev = 0;
        numbertilde_07_smooth_prev = 0;
        numbertilde_07_smooth_index = 0;
        numbertilde_07_smooth_increment = 0;
        numbertilde_07_setupDone = false;
        slide_tilde_01_prev = 0;
        cycle_tilde_01_wrap = 0;
        cycle_tilde_01_ph_currentPhase = 0;
        cycle_tilde_01_ph_conv = 0;
        cycle_tilde_01_setupDone = false;
        cycle_tilde_02_wrap = 0;
        cycle_tilde_02_ph_currentPhase = 0;
        cycle_tilde_02_ph_conv = 0;
        cycle_tilde_02_setupDone = false;
        cycle_tilde_03_wrap = 0;
        cycle_tilde_03_ph_currentPhase = 0;
        cycle_tilde_03_ph_conv = 0;
        cycle_tilde_03_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_01_in1;
        number dspexpr_01_in2;
        number biquad_tilde_01_x;
        number biquad_tilde_01_a0;
        number biquad_tilde_01_a1;
        number biquad_tilde_01_a2;
        number biquad_tilde_01_b1;
        number biquad_tilde_01_b2;
        number dspexpr_02_in1;
        number dspexpr_02_in2;
        number filtercoeff_01_frequency;
        number filtercoeff_01_gain;
        number filtercoeff_01_q;
        Int filtercoeff_01_type;
        number numbertilde_01_input_number;
        number numbertilde_01_ramp;
        list message_01_set;
        list message_02_set;
        number numbertilde_02_input_number;
        number numbertilde_02_ramp;
        number dspexpr_03_in1;
        number numbertilde_03_input_number;
        number numbertilde_03_ramp;
        list message_03_set;
        number numbertilde_04_input_number;
        number numbertilde_04_ramp;
        list message_04_set;
        number numbertilde_05_input_number;
        number numbertilde_05_ramp;
        list message_05_set;
        number numbertilde_06_input_number;
        number numbertilde_06_ramp;
        number numbertilde_07_input_number;
        number numbertilde_07_ramp;
        number slide_tilde_01_x;
        number slide_tilde_01_up;
        number slide_tilde_01_down;
        number dspexpr_04_in1;
        number dspexpr_04_in2;
        list message_06_set;
        number dspexpr_05_in1;
        number dspexpr_05_in2;
        number dspexpr_06_in1;
        number dspexpr_06_in2;
        number dspexpr_07_in1;
        number dspexpr_08_in1;
        number dspexpr_08_in2;
        number dspexpr_09_in1;
        number dspexpr_09_in2;
        number cycle_tilde_01_frequency;
        number cycle_tilde_01_phase_offset;
        list message_07_set;
        number dspexpr_10_in1;
        number dspexpr_10_in2;
        number cycle_tilde_02_frequency;
        number cycle_tilde_02_phase_offset;
        list message_08_set;
        number dspexpr_11_in1;
        number dspexpr_11_in2;
        number cycle_tilde_03_frequency;
        number cycle_tilde_03_phase_offset;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[10];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number biquad_tilde_01_x1;
        number biquad_tilde_01_x2;
        number biquad_tilde_01_y1;
        number biquad_tilde_01_y2;
        bool biquad_tilde_01_setupDone;
        UInt noise_tilde_01_state[4] = { };
        number filtercoeff_01_resamp_counter;
        number filtercoeff_01_activeResamp;
        number filtercoeff_01_K_EPSILON;
        number filtercoeff_01_la0;
        number filtercoeff_01_la1;
        number filtercoeff_01_la2;
        number filtercoeff_01_lb1;
        number filtercoeff_01_lb2;
        number filtercoeff_01_last_frequency;
        number filtercoeff_01_last_q;
        number filtercoeff_01_last_gain;
        Int filtercoeff_01_last_type;
        bool filtercoeff_01_force_update;
        number filtercoeff_01_localop_twopi_over_sr;
        number filtercoeff_01_localop_cs;
        number filtercoeff_01_localop_sn;
        number filtercoeff_01_localop_one_over_gain;
        number filtercoeff_01_localop_one_over_q;
        number filtercoeff_01_localop_alpha;
        number filtercoeff_01_localop_beta;
        number filtercoeff_01_localop_b0;
        number filtercoeff_01_localop_b0g;
        number filtercoeff_01_localop_A;
        number filtercoeff_01_localop_one_over_a;
        number filtercoeff_01_localop_la0;
        number filtercoeff_01_localop_la1;
        number filtercoeff_01_localop_la2;
        number filtercoeff_01_localop_lb1;
        number filtercoeff_01_localop_lb2;
        bool filtercoeff_01_setupDone;
        SampleIndex numbertilde_01_currentInterval;
        SampleIndex numbertilde_01_currentIntervalInSamples;
        number numbertilde_01_lastValue;
        number numbertilde_01_outValue;
        number numbertilde_01_rampInSamples;
        Int numbertilde_01_currentMode;
        number numbertilde_01_smooth_d_prev;
        number numbertilde_01_smooth_prev;
        number numbertilde_01_smooth_index;
        number numbertilde_01_smooth_increment;
        bool numbertilde_01_setupDone;
        SampleIndex numbertilde_02_currentInterval;
        SampleIndex numbertilde_02_currentIntervalInSamples;
        number numbertilde_02_lastValue;
        number numbertilde_02_outValue;
        number numbertilde_02_rampInSamples;
        Int numbertilde_02_currentMode;
        number numbertilde_02_smooth_d_prev;
        number numbertilde_02_smooth_prev;
        number numbertilde_02_smooth_index;
        number numbertilde_02_smooth_increment;
        bool numbertilde_02_setupDone;
        SampleIndex numbertilde_03_currentInterval;
        SampleIndex numbertilde_03_currentIntervalInSamples;
        number numbertilde_03_lastValue;
        number numbertilde_03_outValue;
        number numbertilde_03_rampInSamples;
        Int numbertilde_03_currentMode;
        number numbertilde_03_smooth_d_prev;
        number numbertilde_03_smooth_prev;
        number numbertilde_03_smooth_index;
        number numbertilde_03_smooth_increment;
        bool numbertilde_03_setupDone;
        SampleIndex numbertilde_04_currentInterval;
        SampleIndex numbertilde_04_currentIntervalInSamples;
        number numbertilde_04_lastValue;
        number numbertilde_04_outValue;
        number numbertilde_04_rampInSamples;
        Int numbertilde_04_currentMode;
        number numbertilde_04_smooth_d_prev;
        number numbertilde_04_smooth_prev;
        number numbertilde_04_smooth_index;
        number numbertilde_04_smooth_increment;
        bool numbertilde_04_setupDone;
        SampleIndex numbertilde_05_currentInterval;
        SampleIndex numbertilde_05_currentIntervalInSamples;
        number numbertilde_05_lastValue;
        number numbertilde_05_outValue;
        number numbertilde_05_rampInSamples;
        Int numbertilde_05_currentMode;
        number numbertilde_05_smooth_d_prev;
        number numbertilde_05_smooth_prev;
        number numbertilde_05_smooth_index;
        number numbertilde_05_smooth_increment;
        bool numbertilde_05_setupDone;
        SampleIndex numbertilde_06_currentInterval;
        SampleIndex numbertilde_06_currentIntervalInSamples;
        number numbertilde_06_lastValue;
        number numbertilde_06_outValue;
        number numbertilde_06_rampInSamples;
        Int numbertilde_06_currentMode;
        number numbertilde_06_smooth_d_prev;
        number numbertilde_06_smooth_prev;
        number numbertilde_06_smooth_index;
        number numbertilde_06_smooth_increment;
        bool numbertilde_06_setupDone;
        SampleIndex numbertilde_07_currentInterval;
        SampleIndex numbertilde_07_currentIntervalInSamples;
        number numbertilde_07_lastValue;
        number numbertilde_07_outValue;
        number numbertilde_07_rampInSamples;
        Int numbertilde_07_currentMode;
        number numbertilde_07_smooth_d_prev;
        number numbertilde_07_smooth_prev;
        number numbertilde_07_smooth_index;
        number numbertilde_07_smooth_increment;
        bool numbertilde_07_setupDone;
        number slide_tilde_01_prev;
        Float64BufferRef cycle_tilde_01_buffer;
        long cycle_tilde_01_wrap;
        uint32_t cycle_tilde_01_phasei;
        SampleValue cycle_tilde_01_f2i;
        number cycle_tilde_01_ph_currentPhase;
        number cycle_tilde_01_ph_conv;
        bool cycle_tilde_01_setupDone;
        Float64BufferRef cycle_tilde_02_buffer;
        long cycle_tilde_02_wrap;
        uint32_t cycle_tilde_02_phasei;
        SampleValue cycle_tilde_02_f2i;
        number cycle_tilde_02_ph_currentPhase;
        number cycle_tilde_02_ph_conv;
        bool cycle_tilde_02_setupDone;
        Float64BufferRef cycle_tilde_03_buffer;
        long cycle_tilde_03_wrap;
        uint32_t cycle_tilde_03_phasei;
        SampleValue cycle_tilde_03_f2i;
        number cycle_tilde_03_ph_currentPhase;
        number cycle_tilde_03_ph_conv;
        bool cycle_tilde_03_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_07 : public PatcherInterfaceImpl {
    
    friend class Flansch;
    
    public:
    
    RNBOSubpatcher_07()
    {
    }
    
    ~RNBOSubpatcher_07()
    {
    }
    
    virtual Flansch* getPatcher() const {
        return static_cast<Flansch *>(_parentPatcher);
    }
    
    Flansch* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -62043057, false);
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->linetilde_01_perform(this->signals[0], n);
        this->dspexpr_15_perform(in2, this->signals[0], this->signals[1], n);
        this->scopetilde_03_perform(this->signals[1], this->zeroBuffer, n);
        this->dspexpr_14_perform(this->signals[1], this->signals[2], n);
        this->scopetilde_02_perform(this->signals[2], this->zeroBuffer, n);
        this->limi_02_perform(this->signals[2], out2, n);
        this->scopetilde_01_perform(out2, this->zeroBuffer, n);
        this->dspexpr_12_perform(in1, this->signals[0], this->signals[2], n);
        this->dspexpr_13_perform(this->signals[2], this->signals[0], n);
        this->limi_01_perform(this->signals[0], out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 3; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->scopetilde_03_dspsetup(forceDSPSetup);
        this->scopetilde_02_dspsetup(forceDSPSetup);
        this->limi_02_dspsetup(forceDSPSetup);
        this->scopetilde_01_dspsetup(forceDSPSetup);
        this->limi_01_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -62043057:
            {
            this->linetilde_01_target_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("Volume&Clip~/number_obj-135") == objectId)
                this->numberobj_01_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Volume&Clip~/number_obj-135") == objectId)
                this->numberobj_01_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Volume&Clip~/number_obj-135"):
            {
            return "Volume&Clip~/number_obj-135";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("Volume&Clip~/scope~_obj-3"):
            {
            return "Volume&Clip~/scope~_obj-3";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("Volume&Clip~/scope~_obj-211"):
            {
            return "Volume&Clip~/scope~_obj-211";
            }
        case TAG("Volume&Clip~/scope~_obj-13"):
            {
            return "Volume&Clip~/scope~_obj-13";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void numberobj_01_valin_set(number v) {
        this->numberobj_01_value_set(v);
    }
    
    void numberobj_01_format_set(number v) {
        this->numberobj_01_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_01_out1_bang_bang() {
        this->expr_01_in1_bang();
    }
    
    void eventinlet_01_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_01_in1_set(converted);
        }
    }
    
    void linetilde_01_target_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_01_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void linetilde_01_time_set(number v) {
        this->linetilde_01_time = v;
    }
    
    void linetilde_01_segments_set(const list& v) {
        this->linetilde_01_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_01_time == 0) {
                this->linetilde_01_activeRamps->length = 0;
                this->linetilde_01_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_01_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_01_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_01_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_01_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_01_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_01_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_01_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_01_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_01_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_01_activeRamps->push(lastRampValue);
                    this->linetilde_01_activeRamps->push(0);
                    this->linetilde_01_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_01_keepramp)) {
                            this->linetilde_01_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_01_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_01_activeRamps->push(destinationValue);
                    this->linetilde_01_activeRamps->push(inc);
                    this->linetilde_01_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_01_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_01_segments_set(converted);
        }
    }
    
    void numberobj_01_value_set(number v) {
        this->numberobj_01_value_setter(v);
        v = this->numberobj_01_value;
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Volume&Clip~/number_obj-135"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_01_output_set(localvalue);
    }
    
    void expr_01_out1_set(number v) {
        this->expr_01_out1 = v;
        this->numberobj_01_value_set(this->expr_01_out1);
    }
    
    void expr_01_in1_set(number in1) {
        this->expr_01_in1 = in1;
        this->expr_01_out1_set(rnbo_pow(10, this->expr_01_in1 * 0.05));//#map:Volume&Clip~/dbtoa_obj-133:1
    }
    
    void eventinlet_01_out1_number_set(number v) {
        this->expr_01_in1_set(v);
    }
    
    void expr_01_in1_bang() {
        this->expr_01_out1_set(rnbo_pow(10, this->expr_01_in1 * 0.05));//#map:Volume&Clip~/dbtoa_obj-133:1
    }
    
    void linetilde_01_perform(SampleValue * out, Index n) {
        auto __linetilde_01_time = this->linetilde_01_time;
        auto __linetilde_01_keepramp = this->linetilde_01_keepramp;
        auto __linetilde_01_currentValue = this->linetilde_01_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_01_activeRamps->length)) {
            while ((bool)(this->linetilde_01_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_01_activeRamps[0];
                number inc = this->linetilde_01_activeRamps[1];
                number rampTimeInSamples = this->linetilde_01_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_01_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_01_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_01_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -62043057,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_01_keepramp))) {
                            __linetilde_01_time = 0;
                        }
                    }
                }
    
                __linetilde_01_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_01_currentValue;
            i++;
        }
    
        this->linetilde_01_currentValue = __linetilde_01_currentValue;
        this->linetilde_01_time = __linetilde_01_time;
    }
    
    void dspexpr_15_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void scopetilde_03_perform(const SampleValue * x, const SampleValue * y, Index n) {
        auto __scopetilde_03_ysign = this->scopetilde_03_ysign;
        auto __scopetilde_03_ymonitorvalue = this->scopetilde_03_ymonitorvalue;
        auto __scopetilde_03_xsign = this->scopetilde_03_xsign;
        auto __scopetilde_03_xmonitorvalue = this->scopetilde_03_xmonitorvalue;
        auto __scopetilde_03_mode = this->scopetilde_03_mode;
    
        for (Index i = 0; i < n; i++) {
            number xval = x[(Index)i];
            number yval = y[(Index)i];
    
            if (__scopetilde_03_mode == 1) {
                number xabsval = rnbo_abs(xval);
    
                if (xabsval > __scopetilde_03_xmonitorvalue) {
                    __scopetilde_03_xmonitorvalue = xabsval;
                    __scopetilde_03_xsign = (xval < 0 ? -1 : 1);
                }
    
                number yabsval = rnbo_abs(yval);
    
                if (yabsval > __scopetilde_03_ymonitorvalue) {
                    __scopetilde_03_ymonitorvalue = yabsval;
                    __scopetilde_03_ysign = (yval < 0 ? -1 : 1);
                }
            } else {
                __scopetilde_03_xmonitorvalue = xval;
                __scopetilde_03_xsign = 1;
                __scopetilde_03_ymonitorvalue = yval;
                __scopetilde_03_ysign = 1;
            }
    
            this->scopetilde_03_effectiveCount--;
    
            if (this->scopetilde_03_effectiveCount <= 0) {
                this->scopetilde_03_updateEffectiveCount();
                this->scopetilde_03_monitorbuffer->push(__scopetilde_03_xmonitorvalue * __scopetilde_03_xsign);
    
                if (__scopetilde_03_mode == 1)
                    __scopetilde_03_xmonitorvalue = 0;
    
                if (this->scopetilde_03_monitorbuffer->length >= 128 * (1 + 0)) {
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Volume&Clip~/scope~_obj-13"),
                        this->scopetilde_03_monitorbuffer,
                        this->_currentTime
                    );;
    
                    this->scopetilde_03_monitorbuffer->length = 0;
                }
            }
        }
    
        this->scopetilde_03_xmonitorvalue = __scopetilde_03_xmonitorvalue;
        this->scopetilde_03_xsign = __scopetilde_03_xsign;
        this->scopetilde_03_ymonitorvalue = __scopetilde_03_ymonitorvalue;
        this->scopetilde_03_ysign = __scopetilde_03_ysign;
    }
    
    void dspexpr_14_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_atan(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void scopetilde_02_perform(const SampleValue * x, const SampleValue * y, Index n) {
        auto __scopetilde_02_ysign = this->scopetilde_02_ysign;
        auto __scopetilde_02_ymonitorvalue = this->scopetilde_02_ymonitorvalue;
        auto __scopetilde_02_xsign = this->scopetilde_02_xsign;
        auto __scopetilde_02_xmonitorvalue = this->scopetilde_02_xmonitorvalue;
        auto __scopetilde_02_mode = this->scopetilde_02_mode;
    
        for (Index i = 0; i < n; i++) {
            number xval = x[(Index)i];
            number yval = y[(Index)i];
    
            if (__scopetilde_02_mode == 1) {
                number xabsval = rnbo_abs(xval);
    
                if (xabsval > __scopetilde_02_xmonitorvalue) {
                    __scopetilde_02_xmonitorvalue = xabsval;
                    __scopetilde_02_xsign = (xval < 0 ? -1 : 1);
                }
    
                number yabsval = rnbo_abs(yval);
    
                if (yabsval > __scopetilde_02_ymonitorvalue) {
                    __scopetilde_02_ymonitorvalue = yabsval;
                    __scopetilde_02_ysign = (yval < 0 ? -1 : 1);
                }
            } else {
                __scopetilde_02_xmonitorvalue = xval;
                __scopetilde_02_xsign = 1;
                __scopetilde_02_ymonitorvalue = yval;
                __scopetilde_02_ysign = 1;
            }
    
            this->scopetilde_02_effectiveCount--;
    
            if (this->scopetilde_02_effectiveCount <= 0) {
                this->scopetilde_02_updateEffectiveCount();
                this->scopetilde_02_monitorbuffer->push(__scopetilde_02_xmonitorvalue * __scopetilde_02_xsign);
    
                if (__scopetilde_02_mode == 1)
                    __scopetilde_02_xmonitorvalue = 0;
    
                if (this->scopetilde_02_monitorbuffer->length >= 128 * (1 + 0)) {
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Volume&Clip~/scope~_obj-211"),
                        this->scopetilde_02_monitorbuffer,
                        this->_currentTime
                    );;
    
                    this->scopetilde_02_monitorbuffer->length = 0;
                }
            }
        }
    
        this->scopetilde_02_xmonitorvalue = __scopetilde_02_xmonitorvalue;
        this->scopetilde_02_xsign = __scopetilde_02_xsign;
        this->scopetilde_02_ymonitorvalue = __scopetilde_02_ymonitorvalue;
        this->scopetilde_02_ysign = __scopetilde_02_ysign;
    }
    
    void limi_02_perform(const SampleValue * input1, SampleValue * output1, Index n) {
        RNBO_UNUSED(output1);
        RNBO_UNUSED(input1);
        auto __limi_02_lookaheadInv = this->limi_02_lookaheadInv;
        auto __limi_02_threshold = this->limi_02_threshold;
        auto __limi_02_lookahead = this->limi_02_lookahead;
        auto __limi_02_recover = this->limi_02_recover;
        auto __limi_02_last = this->limi_02_last;
        auto __limi_02_postamp = this->limi_02_postamp;
        auto __limi_02_lookaheadIndex = this->limi_02_lookaheadIndex;
        auto __limi_02_preamp = this->limi_02_preamp;
        auto __limi_02_dcblock = this->limi_02_dcblock;
        auto __limi_02_bypass = this->limi_02_bypass;
        ConstSampleArray<1> input = {input1};
        SampleArray<1> output = {output1};
    
        if ((bool)(__limi_02_bypass)) {
            for (Index i = 0; i < n; i++) {
                for (Index j = 0; j < 1; j++) {
                    output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
                }
            }
        } else {
            number v;
    
            for (Index i = 0; i < n; i++) {
                number hotSample = 0;
    
                for (Index j = 0; j < 1; j++) {
                    auto smps = input[(Index)j];
                    v = ((bool)(__limi_02_dcblock) ? this->limi_02_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                    v *= __limi_02_preamp;
                    this->limi_02_lookaheadBuffers[(Index)j][__limi_02_lookaheadIndex] = v * __limi_02_postamp;
                    v = rnbo_fabs(v);
    
                    if (v > hotSample)
                        hotSample = v;
                }
    
                {
                    if (__limi_02_last > 0.01)
                        v = __limi_02_last + __limi_02_recover * __limi_02_last;
                    else
                        v = __limi_02_last + __limi_02_recover;
                }
    
                if (v > 1)
                    v = 1;
    
                this->limi_02_gainBuffer[__limi_02_lookaheadIndex] = v;
                int lookaheadPlayback = (int)(__limi_02_lookaheadIndex - (int)(__limi_02_lookahead));
    
                if (lookaheadPlayback < 0)
                    lookaheadPlayback += (int)(__limi_02_lookahead);
    
                if (hotSample * v > __limi_02_threshold) {
                    number newgain;
                    number curgain = __limi_02_threshold / hotSample;
                    number inc = __limi_02_threshold - curgain;
                    number acc = 0.0;
                    number flag = 0;
    
                    for (Index j = 0; flag == 0 && j < (Index)(__limi_02_lookahead); j++) {
                        int k = (int)(__limi_02_lookaheadIndex - (int)(j));
    
                        if (k < 0)
                            k += (int)(__limi_02_lookahead);
    
                        {
                            newgain = curgain + inc * (acc * acc);
                        }
    
                        if (newgain < this->limi_02_gainBuffer[(Index)k])
                            this->limi_02_gainBuffer[(Index)k] = newgain;
                        else
                            flag = 1;
    
                        acc = acc + __limi_02_lookaheadInv;
                    }
                }
    
                for (Index j = 0; j < 1; j++) {
                    output[(Index)j][(Index)i] = this->limi_02_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * this->limi_02_gainBuffer[(Index)lookaheadPlayback];
                }
    
                __limi_02_last = this->limi_02_gainBuffer[__limi_02_lookaheadIndex];
                __limi_02_lookaheadIndex++;
    
                if (__limi_02_lookaheadIndex >= __limi_02_lookahead)
                    __limi_02_lookaheadIndex = 0;
            }
        }
    
        this->limi_02_lookaheadIndex = __limi_02_lookaheadIndex;
        this->limi_02_last = __limi_02_last;
    }
    
    void scopetilde_01_perform(const SampleValue * x, const SampleValue * y, Index n) {
        auto __scopetilde_01_ysign = this->scopetilde_01_ysign;
        auto __scopetilde_01_ymonitorvalue = this->scopetilde_01_ymonitorvalue;
        auto __scopetilde_01_xsign = this->scopetilde_01_xsign;
        auto __scopetilde_01_xmonitorvalue = this->scopetilde_01_xmonitorvalue;
        auto __scopetilde_01_mode = this->scopetilde_01_mode;
    
        for (Index i = 0; i < n; i++) {
            number xval = x[(Index)i];
            number yval = y[(Index)i];
    
            if (__scopetilde_01_mode == 1) {
                number xabsval = rnbo_abs(xval);
    
                if (xabsval > __scopetilde_01_xmonitorvalue) {
                    __scopetilde_01_xmonitorvalue = xabsval;
                    __scopetilde_01_xsign = (xval < 0 ? -1 : 1);
                }
    
                number yabsval = rnbo_abs(yval);
    
                if (yabsval > __scopetilde_01_ymonitorvalue) {
                    __scopetilde_01_ymonitorvalue = yabsval;
                    __scopetilde_01_ysign = (yval < 0 ? -1 : 1);
                }
            } else {
                __scopetilde_01_xmonitorvalue = xval;
                __scopetilde_01_xsign = 1;
                __scopetilde_01_ymonitorvalue = yval;
                __scopetilde_01_ysign = 1;
            }
    
            this->scopetilde_01_effectiveCount--;
    
            if (this->scopetilde_01_effectiveCount <= 0) {
                this->scopetilde_01_updateEffectiveCount();
                this->scopetilde_01_monitorbuffer->push(__scopetilde_01_xmonitorvalue * __scopetilde_01_xsign);
    
                if (__scopetilde_01_mode == 1)
                    __scopetilde_01_xmonitorvalue = 0;
    
                if (this->scopetilde_01_monitorbuffer->length >= 128 * (1 + 0)) {
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Volume&Clip~/scope~_obj-3"),
                        this->scopetilde_01_monitorbuffer,
                        this->_currentTime
                    );;
    
                    this->scopetilde_01_monitorbuffer->length = 0;
                }
            }
        }
    
        this->scopetilde_01_xmonitorvalue = __scopetilde_01_xmonitorvalue;
        this->scopetilde_01_xsign = __scopetilde_01_xsign;
        this->scopetilde_01_ymonitorvalue = __scopetilde_01_ymonitorvalue;
        this->scopetilde_01_ysign = __scopetilde_01_ysign;
    }
    
    void dspexpr_12_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_13_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_atan(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void limi_01_perform(const SampleValue * input1, SampleValue * output1, Index n) {
        RNBO_UNUSED(output1);
        RNBO_UNUSED(input1);
        auto __limi_01_lookaheadInv = this->limi_01_lookaheadInv;
        auto __limi_01_threshold = this->limi_01_threshold;
        auto __limi_01_lookahead = this->limi_01_lookahead;
        auto __limi_01_recover = this->limi_01_recover;
        auto __limi_01_last = this->limi_01_last;
        auto __limi_01_postamp = this->limi_01_postamp;
        auto __limi_01_lookaheadIndex = this->limi_01_lookaheadIndex;
        auto __limi_01_preamp = this->limi_01_preamp;
        auto __limi_01_dcblock = this->limi_01_dcblock;
        auto __limi_01_bypass = this->limi_01_bypass;
        ConstSampleArray<1> input = {input1};
        SampleArray<1> output = {output1};
    
        if ((bool)(__limi_01_bypass)) {
            for (Index i = 0; i < n; i++) {
                for (Index j = 0; j < 1; j++) {
                    output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
                }
            }
        } else {
            number v;
    
            for (Index i = 0; i < n; i++) {
                number hotSample = 0;
    
                for (Index j = 0; j < 1; j++) {
                    auto smps = input[(Index)j];
                    v = ((bool)(__limi_01_dcblock) ? this->limi_01_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                    v *= __limi_01_preamp;
                    this->limi_01_lookaheadBuffers[(Index)j][__limi_01_lookaheadIndex] = v * __limi_01_postamp;
                    v = rnbo_fabs(v);
    
                    if (v > hotSample)
                        hotSample = v;
                }
    
                {
                    if (__limi_01_last > 0.01)
                        v = __limi_01_last + __limi_01_recover * __limi_01_last;
                    else
                        v = __limi_01_last + __limi_01_recover;
                }
    
                if (v > 1)
                    v = 1;
    
                this->limi_01_gainBuffer[__limi_01_lookaheadIndex] = v;
                int lookaheadPlayback = (int)(__limi_01_lookaheadIndex - (int)(__limi_01_lookahead));
    
                if (lookaheadPlayback < 0)
                    lookaheadPlayback += (int)(__limi_01_lookahead);
    
                if (hotSample * v > __limi_01_threshold) {
                    number newgain;
                    number curgain = __limi_01_threshold / hotSample;
                    number inc = __limi_01_threshold - curgain;
                    number acc = 0.0;
                    number flag = 0;
    
                    for (Index j = 0; flag == 0 && j < (Index)(__limi_01_lookahead); j++) {
                        int k = (int)(__limi_01_lookaheadIndex - (int)(j));
    
                        if (k < 0)
                            k += (int)(__limi_01_lookahead);
    
                        {
                            newgain = curgain + inc * (acc * acc);
                        }
    
                        if (newgain < this->limi_01_gainBuffer[(Index)k])
                            this->limi_01_gainBuffer[(Index)k] = newgain;
                        else
                            flag = 1;
    
                        acc = acc + __limi_01_lookaheadInv;
                    }
                }
    
                for (Index j = 0; j < 1; j++) {
                    output[(Index)j][(Index)i] = this->limi_01_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * this->limi_01_gainBuffer[(Index)lookaheadPlayback];
                }
    
                __limi_01_last = this->limi_01_gainBuffer[__limi_01_lookaheadIndex];
                __limi_01_lookaheadIndex++;
    
                if (__limi_01_lookaheadIndex >= __limi_01_lookahead)
                    __limi_01_lookaheadIndex = 0;
            }
        }
    
        this->limi_01_lookaheadIndex = __limi_01_lookaheadIndex;
        this->limi_01_last = __limi_01_last;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void limi_01_lookahead_setter(number v) {
        this->limi_01_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
        this->limi_01_lookaheadInv = (number)1 / this->limi_01_lookahead;
    }
    
    void limi_01_preamp_setter(number v) {
        this->limi_01_preamp = rnbo_pow(10., v * 0.05);
    }
    
    void limi_01_postamp_setter(number v) {
        this->limi_01_postamp = rnbo_pow(10., v * 0.05);
    }
    
    void limi_01_threshold_setter(number v) {
        this->limi_01_threshold = rnbo_pow(10., v * 0.05);
    }
    
    void limi_02_lookahead_setter(number v) {
        this->limi_02_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
        this->limi_02_lookaheadInv = (number)1 / this->limi_02_lookahead;
    }
    
    void limi_02_preamp_setter(number v) {
        this->limi_02_preamp = rnbo_pow(10., v * 0.05);
    }
    
    void limi_02_postamp_setter(number v) {
        this->limi_02_postamp = rnbo_pow(10., v * 0.05);
    }
    
    void limi_02_threshold_setter(number v) {
        this->limi_02_threshold = rnbo_pow(10., v * 0.05);
    }
    
    void numberobj_01_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_01_value = localvalue;
    }
    
    number limi_01_dc1_next(number x, number gain) {
        number y = x - this->limi_01_dc1_xm1 + this->limi_01_dc1_ym1 * gain;
        this->limi_01_dc1_xm1 = x;
        this->limi_01_dc1_ym1 = y;
        return y;
    }
    
    void limi_01_dc1_reset() {
        this->limi_01_dc1_xm1 = 0;
        this->limi_01_dc1_ym1 = 0;
    }
    
    void limi_01_dc1_dspsetup() {
        this->limi_01_dc1_reset();
    }
    
    number limi_01_dc_next(Index i, number x, number gain) {
        switch ((int)i) {
        default:
            {
            return this->limi_01_dc1_next(x, gain);
            }
        }
    
        return 0;
    }
    
    void limi_01_dc_reset(Index i) {
        switch ((int)i) {
        default:
            {
            return this->limi_01_dc1_reset();
            }
        }
    }
    
    void limi_01_dc_dspsetup(Index i) {
        switch ((int)i) {
        default:
            {
            return this->limi_01_dc1_dspsetup();
            }
        }
    }
    
    void limi_01_reset() {
        this->limi_01_recover = (number)1000 / (this->limi_01_release * this->samplerate());
    
        {
            this->limi_01_recover *= 0.707;
        }
    }
    
    void limi_01_dspsetup(bool force) {
        if ((bool)(this->limi_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->limi_01_reset();
        this->limi_01_setupDone = true;
        this->limi_01_dc1_dspsetup();
    }
    
    number limi_02_dc1_next(number x, number gain) {
        number y = x - this->limi_02_dc1_xm1 + this->limi_02_dc1_ym1 * gain;
        this->limi_02_dc1_xm1 = x;
        this->limi_02_dc1_ym1 = y;
        return y;
    }
    
    void limi_02_dc1_reset() {
        this->limi_02_dc1_xm1 = 0;
        this->limi_02_dc1_ym1 = 0;
    }
    
    void limi_02_dc1_dspsetup() {
        this->limi_02_dc1_reset();
    }
    
    number limi_02_dc_next(Index i, number x, number gain) {
        switch ((int)i) {
        default:
            {
            return this->limi_02_dc1_next(x, gain);
            }
        }
    
        return 0;
    }
    
    void limi_02_dc_reset(Index i) {
        switch ((int)i) {
        default:
            {
            return this->limi_02_dc1_reset();
            }
        }
    }
    
    void limi_02_dc_dspsetup(Index i) {
        switch ((int)i) {
        default:
            {
            return this->limi_02_dc1_dspsetup();
            }
        }
    }
    
    void limi_02_reset() {
        this->limi_02_recover = (number)1000 / (this->limi_02_release * this->samplerate());
    
        {
            this->limi_02_recover *= 0.707;
        }
    }
    
    void limi_02_dspsetup(bool force) {
        if ((bool)(this->limi_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->limi_02_reset();
        this->limi_02_setupDone = true;
        this->limi_02_dc1_dspsetup();
    }
    
    void numberobj_01_init() {
        this->numberobj_01_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Volume&Clip~/number_obj-135"), 1, this->_currentTime);
    }
    
    void numberobj_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_01_value;
    }
    
    void numberobj_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_01_value_set(preset["value"]);
    }
    
    void scopetilde_01_updateEffectiveCount() {
        number effectiveCount = 256 * 1 + 256 * 0;
        this->scopetilde_01_effectiveCount = this->maximum(effectiveCount, 256);
    }
    
    void scopetilde_01_dspsetup(bool force) {
        if ((bool)(this->scopetilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        {
            this->scopetilde_01_mode = 1;
        }
    
        this->getEngine()->sendListMessage(
            TAG("setup"),
            TAG("Volume&Clip~/scope~_obj-3"),
            {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_01_mode},
            this->_currentTime
        );;
    
        this->scopetilde_01_updateEffectiveCount();
        this->scopetilde_01_setupDone = true;
    }
    
    void scopetilde_02_updateEffectiveCount() {
        number effectiveCount = 256 * 1 + 256 * 0;
        this->scopetilde_02_effectiveCount = this->maximum(effectiveCount, 256);
    }
    
    void scopetilde_02_dspsetup(bool force) {
        if ((bool)(this->scopetilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        {
            this->scopetilde_02_mode = 1;
        }
    
        this->getEngine()->sendListMessage(
            TAG("setup"),
            TAG("Volume&Clip~/scope~_obj-211"),
            {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_02_mode},
            this->_currentTime
        );;
    
        this->scopetilde_02_updateEffectiveCount();
        this->scopetilde_02_setupDone = true;
    }
    
    void scopetilde_03_updateEffectiveCount() {
        number effectiveCount = 256 * 1 + 256 * 0;
        this->scopetilde_03_effectiveCount = this->maximum(effectiveCount, 256);
    }
    
    void scopetilde_03_dspsetup(bool force) {
        if ((bool)(this->scopetilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        {
            this->scopetilde_03_mode = 1;
        }
    
        this->getEngine()->sendListMessage(
            TAG("setup"),
            TAG("Volume&Clip~/scope~_obj-13"),
            {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_03_mode},
            this->_currentTime
        );;
    
        this->scopetilde_03_updateEffectiveCount();
        this->scopetilde_03_setupDone = true;
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        limi_01_bypass = 0;
        limi_01_dcblock = 0;
        limi_01_lookahead = 100;
        limi_01_lookahead_setter(limi_01_lookahead);
        limi_01_preamp = 0;
        limi_01_preamp_setter(limi_01_preamp);
        limi_01_postamp = 0;
        limi_01_postamp_setter(limi_01_postamp);
        limi_01_threshold = 0;
        limi_01_threshold_setter(limi_01_threshold);
        limi_01_release = 1000;
        dspexpr_12_in1 = 0;
        dspexpr_12_in2 = 0;
        dspexpr_13_in1 = 0;
        dspexpr_14_in1 = 0;
        limi_02_bypass = 0;
        limi_02_dcblock = 0;
        limi_02_lookahead = 100;
        limi_02_lookahead_setter(limi_02_lookahead);
        limi_02_preamp = 0;
        limi_02_preamp_setter(limi_02_preamp);
        limi_02_postamp = 0;
        limi_02_postamp_setter(limi_02_postamp);
        limi_02_threshold = 0;
        limi_02_threshold_setter(limi_02_threshold);
        limi_02_release = 1000;
        dspexpr_15_in1 = 0;
        dspexpr_15_in2 = 0;
        linetilde_01_time = 10;
        linetilde_01_keepramp = 1;
        numberobj_01_value = 0;
        numberobj_01_value_setter(numberobj_01_value);
        expr_01_in1 = 0;
        expr_01_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        limi_01_last = 0;
        limi_01_lookaheadIndex = 0;
        limi_01_recover = 0;
        limi_01_lookaheadInv = 0;
        limi_01_dc1_xm1 = 0;
        limi_01_dc1_ym1 = 0;
        limi_01_setupDone = false;
        limi_02_last = 0;
        limi_02_lookaheadIndex = 0;
        limi_02_recover = 0;
        limi_02_lookaheadInv = 0;
        limi_02_dc1_xm1 = 0;
        limi_02_dc1_ym1 = 0;
        limi_02_setupDone = false;
        linetilde_01_currentValue = 0;
        numberobj_01_currentFormat = 6;
        numberobj_01_lastValue = 0;
        scopetilde_01_lastValue = 0;
        scopetilde_01_effectiveCount = 256;
        scopetilde_01_xsign = 1;
        scopetilde_01_ysign = 1;
        scopetilde_01_mode = 0;
        scopetilde_01_setupDone = false;
        scopetilde_02_lastValue = 0;
        scopetilde_02_effectiveCount = 256;
        scopetilde_02_xsign = 1;
        scopetilde_02_ysign = 1;
        scopetilde_02_mode = 0;
        scopetilde_02_setupDone = false;
        scopetilde_03_lastValue = 0;
        scopetilde_03_effectiveCount = 256;
        scopetilde_03_xsign = 1;
        scopetilde_03_ysign = 1;
        scopetilde_03_mode = 0;
        scopetilde_03_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number limi_01_bypass;
        number limi_01_dcblock;
        number limi_01_lookahead;
        number limi_01_preamp;
        number limi_01_postamp;
        number limi_01_threshold;
        number limi_01_release;
        number dspexpr_12_in1;
        number dspexpr_12_in2;
        number dspexpr_13_in1;
        number dspexpr_14_in1;
        number limi_02_bypass;
        number limi_02_dcblock;
        number limi_02_lookahead;
        number limi_02_preamp;
        number limi_02_postamp;
        number limi_02_threshold;
        number limi_02_release;
        number dspexpr_15_in1;
        number dspexpr_15_in2;
        list linetilde_01_segments;
        number linetilde_01_time;
        number linetilde_01_keepramp;
        number numberobj_01_value;
        number expr_01_in1;
        number expr_01_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[3];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        SampleValue limi_01_lookaheadBuffers[1][512] = { };
        SampleValue limi_01_gainBuffer[512] = { };
        number limi_01_last;
        int limi_01_lookaheadIndex;
        number limi_01_recover;
        number limi_01_lookaheadInv;
        number limi_01_dc1_xm1;
        number limi_01_dc1_ym1;
        bool limi_01_setupDone;
        SampleValue limi_02_lookaheadBuffers[1][512] = { };
        SampleValue limi_02_gainBuffer[512] = { };
        number limi_02_last;
        int limi_02_lookaheadIndex;
        number limi_02_recover;
        number limi_02_lookaheadInv;
        number limi_02_dc1_xm1;
        number limi_02_dc1_ym1;
        bool limi_02_setupDone;
        list linetilde_01_activeRamps;
        number linetilde_01_currentValue;
        Int numberobj_01_currentFormat;
        number numberobj_01_lastValue;
        number scopetilde_01_lastValue;
        number scopetilde_01_effectiveCount;
        number scopetilde_01_xmonitorvalue;
        number scopetilde_01_ymonitorvalue;
        list scopetilde_01_monitorbuffer;
        number scopetilde_01_xsign;
        number scopetilde_01_ysign;
        Int scopetilde_01_mode;
        bool scopetilde_01_setupDone;
        number scopetilde_02_lastValue;
        number scopetilde_02_effectiveCount;
        number scopetilde_02_xmonitorvalue;
        number scopetilde_02_ymonitorvalue;
        list scopetilde_02_monitorbuffer;
        number scopetilde_02_xsign;
        number scopetilde_02_ysign;
        Int scopetilde_02_mode;
        bool scopetilde_02_setupDone;
        number scopetilde_03_lastValue;
        number scopetilde_03_effectiveCount;
        number scopetilde_03_xmonitorvalue;
        number scopetilde_03_ymonitorvalue;
        list scopetilde_03_monitorbuffer;
        number scopetilde_03_xsign;
        number scopetilde_03_ysign;
        Int scopetilde_03_mode;
        bool scopetilde_03_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_08 : public PatcherInterfaceImpl {
    
    friend class Flansch;
    
    public:
    
    RNBOSubpatcher_08()
    {
    }
    
    ~RNBOSubpatcher_08()
    {
    }
    
    virtual Flansch* getPatcher() const {
        return static_cast<Flansch *>(_parentPatcher);
    }
    
    Flansch* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("DataSwitch/number_obj-276") == objectId)
                this->numberobj_02_valin_set(payload);
    
            if (TAG("DataSwitch/number_obj-277") == objectId)
                this->numberobj_03_valin_set(payload);
    
            if (TAG("DataSwitch/number_obj-275") == objectId)
                this->numberobj_04_valin_set(payload);
    
            if (TAG("DataSwitch/number_obj-273") == objectId)
                this->numberobj_05_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("DataSwitch/number_obj-276") == objectId)
                this->numberobj_02_format_set(payload);
    
            if (TAG("DataSwitch/number_obj-277") == objectId)
                this->numberobj_03_format_set(payload);
    
            if (TAG("DataSwitch/number_obj-275") == objectId)
                this->numberobj_04_format_set(payload);
    
            if (TAG("DataSwitch/number_obj-273") == objectId)
                this->numberobj_05_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("DataSwitch/number_obj-276"):
            {
            return "DataSwitch/number_obj-276";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("DataSwitch/number_obj-277"):
            {
            return "DataSwitch/number_obj-277";
            }
        case TAG("DataSwitch/number_obj-275"):
            {
            return "DataSwitch/number_obj-275";
            }
        case TAG("DataSwitch/number_obj-273"):
            {
            return "DataSwitch/number_obj-273";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_02_out1_bang_bang() {
        this->numberobj_02_value_bang();
    }
    
    void eventinlet_02_out1_number_set(number v) {
        this->numberobj_02_value_set(v);
    }
    
    void numberobj_02_valin_set(number v) {
        this->numberobj_02_value_set(v);
    }
    
    void numberobj_02_format_set(number v) {
        this->numberobj_02_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_03_valin_set(number v) {
        this->numberobj_03_value_set(v);
    }
    
    void numberobj_03_format_set(number v) {
        this->numberobj_03_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_03_out1_bang_bang() {
        this->numberobj_04_value_bang();
    }
    
    void eventinlet_03_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_04_value_set(converted);
        }
    }
    
    void numberobj_04_valin_set(number v) {
        this->numberobj_04_value_set(v);
    }
    
    void numberobj_04_format_set(number v) {
        this->numberobj_04_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_04_out1_bang_bang() {
        this->numberobj_05_value_bang();
    }
    
    void eventinlet_04_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_05_value_set(converted);
        }
    }
    
    void numberobj_05_valin_set(number v) {
        this->numberobj_05_value_set(v);
    }
    
    void numberobj_05_format_set(number v) {
        this->numberobj_05_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_02_init();
        this->numberobj_03_init();
        this->numberobj_04_init();
        this->numberobj_05_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void expr_02_in3_set(number v) {
        this->expr_02_in3 = v;
    }
    
    void numberobj_05_output_set(number v) {
        this->expr_02_in3_set(v);
    }
    
    void numberobj_05_value_set(number v) {
        this->numberobj_05_value_setter(v);
        v = this->numberobj_05_value;
        number localvalue = v;
    
        if (this->numberobj_05_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DataSwitch/number_obj-273"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_05_output_set(localvalue);
    }
    
    void eventinlet_04_out1_number_set(number v) {
        this->numberobj_05_value_set(v);
    }
    
    void eventoutlet_01_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_03_out1_number_set(v);
    }
    
    void numberobj_03_output_set(number v) {
        this->eventoutlet_01_in1_number_set(v);
    }
    
    void numberobj_03_value_set(number v) {
        this->numberobj_03_value_setter(v);
        v = this->numberobj_03_value;
        number localvalue = v;
    
        if (this->numberobj_03_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DataSwitch/number_obj-277"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_03_output_set(localvalue);
    }
    
    void expr_02_out1_set(number v) {
        this->expr_02_out1 = v;
        this->numberobj_03_value_set(this->expr_02_out1);
    }
    
    void expr_02_in1_set(number in1) {
        this->expr_02_in1 = in1;
    
        this->expr_02_out1_set(
            this->expr_02_in1 + this->expr_02_in3 * (this->expr_02_in2 - this->expr_02_in1)
        );//#map:DataSwitch/mix_obj-278:1
    }
    
    void numberobj_02_output_set(number v) {
        this->expr_02_in1_set(v);
    }
    
    void numberobj_02_value_set(number v) {
        this->numberobj_02_value_setter(v);
        v = this->numberobj_02_value;
        number localvalue = v;
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DataSwitch/number_obj-276"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_02_output_set(localvalue);
    }
    
    void eventinlet_02_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_02_value_set(converted);
        }
    }
    
    void expr_02_in2_set(number v) {
        this->expr_02_in2 = v;
    }
    
    void trigger_01_out2_set(number v) {
        this->expr_02_in2_set(v);
    }
    
    void numberobj_02_value_bang() {
        number v = this->numberobj_02_value;
        number localvalue = v;
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DataSwitch/number_obj-276"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_02_output_set(localvalue);
    }
    
    void trigger_01_out1_bang() {
        this->numberobj_02_value_bang();
    }
    
    void trigger_01_input_number_set(number v) {
        this->trigger_01_out2_set(v);
        this->trigger_01_out1_bang();
    }
    
    void numberobj_04_output_set(number v) {
        this->trigger_01_input_number_set(v);
    }
    
    void numberobj_04_value_set(number v) {
        this->numberobj_04_value_setter(v);
        v = this->numberobj_04_value;
        number localvalue = v;
    
        if (this->numberobj_04_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DataSwitch/number_obj-275"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_04_output_set(localvalue);
    }
    
    void eventinlet_03_out1_number_set(number v) {
        this->numberobj_04_value_set(v);
    }
    
    void numberobj_04_value_bang() {
        number v = this->numberobj_04_value;
        number localvalue = v;
    
        if (this->numberobj_04_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DataSwitch/number_obj-275"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_04_output_set(localvalue);
    }
    
    void numberobj_05_value_bang() {
        number v = this->numberobj_05_value;
        number localvalue = v;
    
        if (this->numberobj_05_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DataSwitch/number_obj-273"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_05_output_set(localvalue);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_02_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_02_value = localvalue;
    }
    
    void numberobj_03_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_03_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_03_value = localvalue;
    }
    
    void numberobj_04_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_04_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_04_value = localvalue;
    }
    
    void numberobj_05_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_05_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_05_value = localvalue;
    }
    
    void numberobj_02_init() {
        this->numberobj_02_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DataSwitch/number_obj-276"), 1, this->_currentTime);
    }
    
    void numberobj_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_02_value;
    }
    
    void numberobj_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_02_value_set(preset["value"]);
    }
    
    void numberobj_03_init() {
        this->numberobj_03_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DataSwitch/number_obj-277"), 1, this->_currentTime);
    }
    
    void numberobj_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_03_value;
    }
    
    void numberobj_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_03_value_set(preset["value"]);
    }
    
    void numberobj_04_init() {
        this->numberobj_04_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DataSwitch/number_obj-275"), 1, this->_currentTime);
    }
    
    void numberobj_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_04_value;
    }
    
    void numberobj_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_04_value_set(preset["value"]);
    }
    
    void numberobj_05_init() {
        this->numberobj_05_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DataSwitch/number_obj-273"), 1, this->_currentTime);
    }
    
    void numberobj_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_05_value;
    }
    
    void numberobj_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_05_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        numberobj_02_value = 0;
        numberobj_02_value_setter(numberobj_02_value);
        numberobj_03_value = 0;
        numberobj_03_value_setter(numberobj_03_value);
        expr_02_in1 = 0;
        expr_02_in2 = 0;
        expr_02_in3 = 0.5;
        expr_02_out1 = 0;
        numberobj_04_value = 0;
        numberobj_04_value_setter(numberobj_04_value);
        numberobj_05_value = 0;
        numberobj_05_value_setter(numberobj_05_value);
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_02_currentFormat = 6;
        numberobj_02_lastValue = 0;
        numberobj_03_currentFormat = 6;
        numberobj_03_lastValue = 0;
        numberobj_04_currentFormat = 6;
        numberobj_04_lastValue = 0;
        numberobj_05_currentFormat = 6;
        numberobj_05_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number numberobj_02_value;
        number numberobj_03_value;
        number expr_02_in1;
        number expr_02_in2;
        number expr_02_in3;
        number expr_02_out1;
        number numberobj_04_value;
        number numberobj_05_value;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_02_currentFormat;
        number numberobj_02_lastValue;
        Int numberobj_03_currentFormat;
        number numberobj_03_lastValue;
        Int numberobj_04_currentFormat;
        number numberobj_04_lastValue;
        Int numberobj_05_currentFormat;
        number numberobj_05_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_09 : public PatcherInterfaceImpl {
    
    friend class Flansch;
    
    public:
    
    RNBOSubpatcher_09()
    {
    }
    
    ~RNBOSubpatcher_09()
    {
    }
    
    virtual Flansch* getPatcher() const {
        return static_cast<Flansch *>(_parentPatcher);
    }
    
    Flansch* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1621164530, false);
        getEngine()->flushClockEvents(this, -708766484, false);
        getEngine()->flushClockEvents(this, 1396722025, false);
        getEngine()->flushClockEvents(this, 2098551528, false);
        getEngine()->flushClockEvents(this, -62043057, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
        getEngine()->flushClockEvents(this, 694892522, false);
        getEngine()->flushClockEvents(this, -6936981, false);
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        this->dspexpr_18_perform(in1, this->signals[0], n);
        this->linetilde_02_perform(this->signals[1], n);
        this->dspexpr_21_perform(this->signals[1], this->signals[2], n);
        this->dspexpr_17_perform(this->signals[0], this->signals[2], this->signals[3], n);
        this->maximum_tilde_01_perform(this->signals[3], this->maximum_tilde_01_y, this->signals[0], n);
    
        this->slide_tilde_02_perform(
            this->signals[0],
            this->slide_tilde_02_up,
            this->slide_tilde_02_down,
            this->signals[3],
            n
        );
    
        this->scopetilde_04_perform(this->signals[3], this->zeroBuffer, n);
        this->dspexpr_20_perform(this->signals[3], this->signals[2], this->signals[0], n);
        this->dspexpr_19_perform(this->signals[0], this->signals[2], n);
        this->dspexpr_22_perform(this->signals[2], this->signals[1], this->signals[0], n);
        this->numbertilde_10_perform(this->signals[0], this->dummyBuffer, n);
        this->numbertilde_09_perform(this->signals[2], this->dummyBuffer, n);
        this->dspexpr_16_perform(this->signals[3], this->signals[2], n);
        this->numbertilde_08_perform(this->signals[2], this->dummyBuffer, n);
        this->linetilde_03_perform(this->signals[2], n);
        this->dspexpr_25_perform(this->signals[0], this->signals[2], this->signals[3], n);
        this->dspexpr_24_perform(this->signals[3], this->dspexpr_24_in2, out2, n);
        this->dspexpr_23_perform(out2, this->signals[2], n);
        this->numbertilde_11_perform(this->signals[2], this->dummyBuffer, n);
        this->signalforwarder_01_perform(this->signals[2], out1, n);
        this->numbertilde_12_perform(out2, this->dummyBuffer, n);
        this->numbertilde_13_perform(this->signals[3], this->dummyBuffer, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->scopetilde_04_dspsetup(forceDSPSetup);
        this->numbertilde_10_dspsetup(forceDSPSetup);
        this->numbertilde_09_dspsetup(forceDSPSetup);
        this->numbertilde_08_dspsetup(forceDSPSetup);
        this->numbertilde_11_dspsetup(forceDSPSetup);
        this->numbertilde_12_dspsetup(forceDSPSetup);
        this->numbertilde_13_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1621164530:
            {
            this->linetilde_02_target_bang();
            break;
            }
        case -708766484:
            {
            this->numbertilde_10_value_set(value);
            break;
            }
        case 1396722025:
            {
            this->numbertilde_09_value_set(value);
            break;
            }
        case 2098551528:
            {
            this->numbertilde_08_value_set(value);
            break;
            }
        case -62043057:
            {
            this->linetilde_03_target_bang();
            break;
            }
        case -1494586265:
            {
            this->numbertilde_11_value_set(value);
            break;
            }
        case 694892522:
            {
            this->numbertilde_12_value_set(value);
            break;
            }
        case -6936981:
            {
            this->numbertilde_13_value_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("Compression~/number~_obj-134") == objectId)
                this->numbertilde_08_sig_number_set(payload);
    
            if (TAG("Compression~/number~_obj-118") == objectId)
                this->numbertilde_09_sig_number_set(payload);
    
            if (TAG("Compression~/number~_obj-41") == objectId)
                this->numbertilde_10_sig_number_set(payload);
    
            if (TAG("Compression~/number~_obj-87") == objectId)
                this->numbertilde_11_sig_number_set(payload);
    
            if (TAG("Compression~/number~_obj-51") == objectId)
                this->numbertilde_12_sig_number_set(payload);
    
            if (TAG("Compression~/number~_obj-50") == objectId)
                this->numbertilde_13_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("Compression~/number~_obj-134") == objectId)
                this->numbertilde_08_mode_set(payload);
    
            if (TAG("Compression~/number~_obj-118") == objectId)
                this->numbertilde_09_mode_set(payload);
    
            if (TAG("Compression~/number~_obj-41") == objectId)
                this->numbertilde_10_mode_set(payload);
    
            if (TAG("Compression~/number~_obj-87") == objectId)
                this->numbertilde_11_mode_set(payload);
    
            if (TAG("Compression~/number~_obj-51") == objectId)
                this->numbertilde_12_mode_set(payload);
    
            if (TAG("Compression~/number~_obj-50") == objectId)
                this->numbertilde_13_mode_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("Compression~/number_obj-12") == objectId)
                this->numberobj_06_valin_set(payload);
    
            if (TAG("Compression~/number_obj-171") == objectId)
                this->numberobj_07_valin_set(payload);
    
            if (TAG("Compression~/number_obj-176") == objectId)
                this->numberobj_08_valin_set(payload);
    
            if (TAG("Compression~/number_obj-54") == objectId)
                this->numberobj_09_valin_set(payload);
    
            if (TAG("Compression~/number_obj-57") == objectId)
                this->numberobj_10_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Compression~/number_obj-12") == objectId)
                this->numberobj_06_format_set(payload);
    
            if (TAG("Compression~/number_obj-171") == objectId)
                this->numberobj_07_format_set(payload);
    
            if (TAG("Compression~/number_obj-176") == objectId)
                this->numberobj_08_format_set(payload);
    
            if (TAG("Compression~/number_obj-54") == objectId)
                this->numberobj_09_format_set(payload);
    
            if (TAG("Compression~/number_obj-57") == objectId)
                this->numberobj_10_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("Compression~/number~_obj-134") == objectId)
                this->numbertilde_08_sig_list_set(payload);
    
            if (TAG("Compression~/number~_obj-118") == objectId)
                this->numbertilde_09_sig_list_set(payload);
    
            if (TAG("Compression~/number~_obj-41") == objectId)
                this->numbertilde_10_sig_list_set(payload);
    
            if (TAG("Compression~/number~_obj-87") == objectId)
                this->numbertilde_11_sig_list_set(payload);
    
            if (TAG("Compression~/number~_obj-51") == objectId)
                this->numbertilde_12_sig_list_set(payload);
    
            if (TAG("Compression~/number~_obj-50") == objectId)
                this->numbertilde_13_sig_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("Compression~/number~_obj-134"):
            {
            return "Compression~/number~_obj-134";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("Compression~/scope~_obj-99"):
            {
            return "Compression~/scope~_obj-99";
            }
        case TAG("Compression~/number~_obj-118"):
            {
            return "Compression~/number~_obj-118";
            }
        case TAG("Compression~/number~_obj-41"):
            {
            return "Compression~/number~_obj-41";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Compression~/number_obj-12"):
            {
            return "Compression~/number_obj-12";
            }
        case TAG("Compression~/number~_obj-87"):
            {
            return "Compression~/number~_obj-87";
            }
        case TAG("Compression~/number_obj-171"):
            {
            return "Compression~/number_obj-171";
            }
        case TAG("Compression~/number_obj-176"):
            {
            return "Compression~/number_obj-176";
            }
        case TAG("Compression~/number_obj-54"):
            {
            return "Compression~/number_obj-54";
            }
        case TAG("Compression~/number_obj-57"):
            {
            return "Compression~/number_obj-57";
            }
        case TAG("Compression~/number~_obj-51"):
            {
            return "Compression~/number~_obj-51";
            }
        case TAG("Compression~/number~_obj-50"):
            {
            return "Compression~/number~_obj-50";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void numbertilde_08_sig_number_set(number v) {
        this->numbertilde_08_outValue = v;
    }
    
    void numbertilde_08_sig_list_set(const list& v) {
        this->numbertilde_08_outValue = v[0];
    }
    
    void numbertilde_08_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_08_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_08_currentMode = 1;
        }
    }
    
    void numbertilde_09_sig_number_set(number v) {
        this->numbertilde_09_outValue = v;
    }
    
    void numbertilde_09_sig_list_set(const list& v) {
        this->numbertilde_09_outValue = v[0];
    }
    
    void numbertilde_09_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_09_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_09_currentMode = 1;
        }
    }
    
    void numbertilde_10_sig_number_set(number v) {
        this->numbertilde_10_outValue = v;
    }
    
    void numbertilde_10_sig_list_set(const list& v) {
        this->numbertilde_10_outValue = v[0];
    }
    
    void numbertilde_10_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_10_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_10_currentMode = 1;
        }
    }
    
    void numberobj_06_valin_set(number v) {
        this->numberobj_06_value_set(v);
    }
    
    void numberobj_06_format_set(number v) {
        this->numberobj_06_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_11_sig_number_set(number v) {
        this->numbertilde_11_outValue = v;
    }
    
    void numbertilde_11_sig_list_set(const list& v) {
        this->numbertilde_11_outValue = v[0];
    }
    
    void numbertilde_11_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_11_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_11_currentMode = 1;
        }
    }
    
    void eventinlet_05_out1_bang_bang() {
        this->numberobj_07_value_bang();
    }
    
    void eventinlet_05_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_07_value_set(converted);
        }
    }
    
    void numberobj_07_valin_set(number v) {
        this->numberobj_07_value_set(v);
    }
    
    void numberobj_07_format_set(number v) {
        this->numberobj_07_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_08_valin_set(number v) {
        this->numberobj_08_value_set(v);
    }
    
    void numberobj_08_format_set(number v) {
        this->numberobj_08_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_09_valin_set(number v) {
        this->numberobj_09_value_set(v);
    }
    
    void numberobj_09_format_set(number v) {
        this->numberobj_09_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_10_valin_set(number v) {
        this->numberobj_10_value_set(v);
    }
    
    void numberobj_10_format_set(number v) {
        this->numberobj_10_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_12_sig_number_set(number v) {
        this->numbertilde_12_outValue = v;
    }
    
    void numbertilde_12_sig_list_set(const list& v) {
        this->numbertilde_12_outValue = v[0];
    }
    
    void numbertilde_12_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_12_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_12_currentMode = 1;
        }
    }
    
    void numbertilde_13_sig_number_set(number v) {
        this->numbertilde_13_outValue = v;
    }
    
    void numbertilde_13_sig_list_set(const list& v) {
        this->numbertilde_13_outValue = v[0];
    }
    
    void numbertilde_13_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_13_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_13_currentMode = 1;
        }
    }
    
    void linetilde_02_target_bang() {}
    
    void numbertilde_10_value_set(number ) {}
    
    void numbertilde_09_value_set(number ) {}
    
    void numbertilde_08_value_set(number ) {}
    
    void linetilde_03_target_bang() {}
    
    void numbertilde_11_value_set(number ) {}
    
    void numbertilde_12_value_set(number ) {}
    
    void numbertilde_13_value_set(number ) {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 1;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numbertilde_08_init();
        this->numbertilde_09_init();
        this->numbertilde_10_init();
        this->numberobj_06_init();
        this->numbertilde_11_init();
        this->numberobj_07_init();
        this->numberobj_08_init();
        this->numberobj_09_init();
        this->numberobj_10_init();
        this->numbertilde_12_init();
        this->numbertilde_13_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void linetilde_03_time_set(number v) {
        this->linetilde_03_time = v;
    }
    
    void linetilde_03_segments_set(const list& v) {
        this->linetilde_03_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_03_time == 0) {
                this->linetilde_03_activeRamps->length = 0;
                this->linetilde_03_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_03_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_03_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_03_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_03_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_03_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_03_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_03_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_03_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_03_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_03_activeRamps->push(lastRampValue);
                    this->linetilde_03_activeRamps->push(0);
                    this->linetilde_03_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_03_keepramp)) {
                            this->linetilde_03_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_03_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_03_activeRamps->push(destinationValue);
                    this->linetilde_03_activeRamps->push(inc);
                    this->linetilde_03_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_09_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_03_segments_set(converted);
        }
    }
    
    void numberobj_09_value_set(number v) {
        this->numberobj_09_value_setter(v);
        v = this->numberobj_09_value;
        number localvalue = v;
    
        if (this->numberobj_09_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Compression~/number_obj-54"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_09_output_set(localvalue);
    }
    
    void expr_05_out1_set(number v) {
        this->expr_05_out1 = v;
        this->numberobj_09_value_set(this->expr_05_out1);
    }
    
    void expr_05_in1_set(number in1) {
        this->expr_05_in1 = in1;
        this->expr_05_out1_set(this->expr_05_in2 - this->expr_05_in1);//#map:Compression~/!-_obj-59:1
    }
    
    void numberobj_08_output_set(number v) {
        this->expr_05_in1_set(v);
    }
    
    void numberobj_08_value_set(number v) {
        this->numberobj_08_value_setter(v);
        v = this->numberobj_08_value;
        number localvalue = v;
    
        if (this->numberobj_08_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Compression~/number_obj-176"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_08_output_set(localvalue);
    }
    
    void expr_06_out1_set(number v) {
        this->expr_06_out1 = v;
        this->numberobj_08_value_set(this->expr_06_out1);
    }
    
    void expr_06_in1_set(number in1) {
        this->expr_06_in1 = in1;
        this->expr_06_out1_set((this->expr_06_in1 == 0. ? 0. : this->expr_06_in2 / this->expr_06_in1));//#map:Compression~/!/_obj-58:1
    }
    
    void numberobj_10_output_set(number v) {
        this->expr_06_in1_set(v);
    }
    
    void numberobj_10_value_set(number v) {
        this->numberobj_10_value_setter(v);
        v = this->numberobj_10_value;
        number localvalue = v;
    
        if (this->numberobj_10_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Compression~/number_obj-57"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_10_output_set(localvalue);
    }
    
    void expr_04_out1_set(number v) {
        this->expr_04_out1 = v;
        this->numberobj_10_value_set(this->expr_04_out1);
    }
    
    void expr_04_in1_set(number in1) {
        this->expr_04_in1 = in1;
        this->expr_04_out1_set(rnbo_pow(10, this->expr_04_in1 * 0.05));//#map:Compression~/dbtoa_obj-139:1
    }
    
    void linetilde_02_time_set(number v) {
        this->linetilde_02_time = v;
    }
    
    void linetilde_02_segments_set(const list& v) {
        this->linetilde_02_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_02_time == 0) {
                this->linetilde_02_activeRamps->length = 0;
                this->linetilde_02_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_02_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_02_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_02_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_02_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_02_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_02_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_02_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_02_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_02_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_02_activeRamps->push(lastRampValue);
                    this->linetilde_02_activeRamps->push(0);
                    this->linetilde_02_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_02_keepramp)) {
                            this->linetilde_02_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_02_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_02_activeRamps->push(destinationValue);
                    this->linetilde_02_activeRamps->push(inc);
                    this->linetilde_02_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_06_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_02_segments_set(converted);
        }
    }
    
    void numberobj_06_value_set(number v) {
        this->numberobj_06_value_setter(v);
        v = this->numberobj_06_value;
        number localvalue = v;
    
        if (this->numberobj_06_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Compression~/number_obj-12"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_06_output_set(localvalue);
    }
    
    void expr_03_out1_set(number v) {
        this->expr_03_out1 = v;
        this->numberobj_06_value_set(this->expr_03_out1);
    }
    
    void expr_03_in1_set(number in1) {
        this->expr_03_in1 = in1;
        this->expr_03_out1_set(this->expr_03_in1 * this->expr_03_in2);//#map:Compression~/*_obj-138:1
    }
    
    void numberobj_07_output_set(number v) {
        this->expr_04_in1_set(v);
        this->expr_03_in1_set(v);
    }
    
    void numberobj_07_value_set(number v) {
        this->numberobj_07_value_setter(v);
        v = this->numberobj_07_value;
        number localvalue = v;
    
        if (this->numberobj_07_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Compression~/number_obj-171"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_07_output_set(localvalue);
    }
    
    void eventinlet_05_out1_number_set(number v) {
        this->numberobj_07_value_set(v);
    }
    
    void numberobj_07_value_bang() {
        number v = this->numberobj_07_value;
        number localvalue = v;
    
        if (this->numberobj_07_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Compression~/number_obj-171"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_07_output_set(localvalue);
    }
    
    void dspexpr_18_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_abs(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void linetilde_02_perform(SampleValue * out, Index n) {
        auto __linetilde_02_time = this->linetilde_02_time;
        auto __linetilde_02_keepramp = this->linetilde_02_keepramp;
        auto __linetilde_02_currentValue = this->linetilde_02_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_02_activeRamps->length)) {
            while ((bool)(this->linetilde_02_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_02_activeRamps[0];
                number inc = this->linetilde_02_activeRamps[1];
                number rampTimeInSamples = this->linetilde_02_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_02_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_02_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_02_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -1621164530,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_02_keepramp))) {
                            __linetilde_02_time = 0;
                        }
                    }
                }
    
                __linetilde_02_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_02_currentValue;
            i++;
        }
    
        this->linetilde_02_currentValue = __linetilde_02_currentValue;
        this->linetilde_02_time = __linetilde_02_time;
    }
    
    void dspexpr_21_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_pow(10, in1[(Index)i] * 0.05);//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_17_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] - in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void maximum_tilde_01_perform(const Sample * x, number y, SampleValue * out1, Index n) {
        RNBO_UNUSED(y);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = (x[(Index)i] < 0 ? 0 : x[(Index)i]);
        }
    }
    
    void slide_tilde_02_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
        RNBO_UNUSED(down);
        RNBO_UNUSED(up);
        auto __slide_tilde_02_prev = this->slide_tilde_02_prev;
        auto iup = this->safediv(1., this->maximum(1., rnbo_abs(88)));
        auto idown = this->safediv(1., this->maximum(1., rnbo_abs(4121)));
        Index i;
    
        for (i = 0; i < n; i++) {
            number temp = x[(Index)i] - __slide_tilde_02_prev;
            __slide_tilde_02_prev = __slide_tilde_02_prev + ((x[(Index)i] > __slide_tilde_02_prev ? iup : idown)) * temp;
            out1[(Index)i] = __slide_tilde_02_prev;
        }
    
        this->slide_tilde_02_prev = __slide_tilde_02_prev;
    }
    
    void scopetilde_04_perform(const SampleValue * x, const SampleValue * y, Index n) {
        auto __scopetilde_04_ysign = this->scopetilde_04_ysign;
        auto __scopetilde_04_ymonitorvalue = this->scopetilde_04_ymonitorvalue;
        auto __scopetilde_04_xsign = this->scopetilde_04_xsign;
        auto __scopetilde_04_xmonitorvalue = this->scopetilde_04_xmonitorvalue;
        auto __scopetilde_04_mode = this->scopetilde_04_mode;
    
        for (Index i = 0; i < n; i++) {
            number xval = x[(Index)i];
            number yval = y[(Index)i];
    
            if (__scopetilde_04_mode == 1) {
                number xabsval = rnbo_abs(xval);
    
                if (xabsval > __scopetilde_04_xmonitorvalue) {
                    __scopetilde_04_xmonitorvalue = xabsval;
                    __scopetilde_04_xsign = (xval < 0 ? -1 : 1);
                }
    
                number yabsval = rnbo_abs(yval);
    
                if (yabsval > __scopetilde_04_ymonitorvalue) {
                    __scopetilde_04_ymonitorvalue = yabsval;
                    __scopetilde_04_ysign = (yval < 0 ? -1 : 1);
                }
            } else {
                __scopetilde_04_xmonitorvalue = xval;
                __scopetilde_04_xsign = 1;
                __scopetilde_04_ymonitorvalue = yval;
                __scopetilde_04_ysign = 1;
            }
    
            this->scopetilde_04_effectiveCount--;
    
            if (this->scopetilde_04_effectiveCount <= 0) {
                this->scopetilde_04_updateEffectiveCount();
                this->scopetilde_04_monitorbuffer->push(__scopetilde_04_xmonitorvalue * __scopetilde_04_xsign);
    
                if (__scopetilde_04_mode == 1)
                    __scopetilde_04_xmonitorvalue = 0;
    
                if (this->scopetilde_04_monitorbuffer->length >= 128 * (1 + 0)) {
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Compression~/scope~_obj-99"),
                        this->scopetilde_04_monitorbuffer,
                        this->_currentTime
                    );;
    
                    this->scopetilde_04_monitorbuffer->length = 0;
                }
            }
        }
    
        this->scopetilde_04_xmonitorvalue = __scopetilde_04_xmonitorvalue;
        this->scopetilde_04_xsign = __scopetilde_04_xsign;
        this->scopetilde_04_ymonitorvalue = __scopetilde_04_ymonitorvalue;
        this->scopetilde_04_ysign = __scopetilde_04_ysign;
    }
    
    void dspexpr_20_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_19_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = (in1[(Index)i] <= 0 ? -999 : 20 * rnbo_log10((in1[(Index)i] <= 0.0000000001 ? 0.0000000001 : in1[(Index)i])));//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_22_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] - in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void numbertilde_10_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_10_currentIntervalInSamples = this->numbertilde_10_currentIntervalInSamples;
        auto __numbertilde_10_lastValue = this->numbertilde_10_lastValue;
        auto __numbertilde_10_currentInterval = this->numbertilde_10_currentInterval;
        auto __numbertilde_10_rampInSamples = this->numbertilde_10_rampInSamples;
        auto __numbertilde_10_outValue = this->numbertilde_10_outValue;
        auto __numbertilde_10_currentMode = this->numbertilde_10_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_10_currentMode == 0) {
                output[(Index)i] = this->numbertilde_10_smooth_next(
                    __numbertilde_10_outValue,
                    __numbertilde_10_rampInSamples,
                    __numbertilde_10_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_10_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_10_lastValue && __numbertilde_10_currentInterval <= 0) {
            __numbertilde_10_currentInterval = __numbertilde_10_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -708766484,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_10_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Compression~/number~_obj-41"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_10_currentInterval = __numbertilde_10_currentInterval;
        this->numbertilde_10_lastValue = __numbertilde_10_lastValue;
    }
    
    void numbertilde_09_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_09_currentIntervalInSamples = this->numbertilde_09_currentIntervalInSamples;
        auto __numbertilde_09_lastValue = this->numbertilde_09_lastValue;
        auto __numbertilde_09_currentInterval = this->numbertilde_09_currentInterval;
        auto __numbertilde_09_rampInSamples = this->numbertilde_09_rampInSamples;
        auto __numbertilde_09_outValue = this->numbertilde_09_outValue;
        auto __numbertilde_09_currentMode = this->numbertilde_09_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_09_currentMode == 0) {
                output[(Index)i] = this->numbertilde_09_smooth_next(
                    __numbertilde_09_outValue,
                    __numbertilde_09_rampInSamples,
                    __numbertilde_09_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_09_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_09_lastValue && __numbertilde_09_currentInterval <= 0) {
            __numbertilde_09_currentInterval = __numbertilde_09_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                1396722025,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_09_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Compression~/number~_obj-118"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_09_currentInterval = __numbertilde_09_currentInterval;
        this->numbertilde_09_lastValue = __numbertilde_09_lastValue;
    }
    
    void dspexpr_16_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = (in1[(Index)i] <= 0 ? -999 : 20 * rnbo_log10((in1[(Index)i] <= 0.0000000001 ? 0.0000000001 : in1[(Index)i])));//#map:_###_obj_###_:1
        }
    }
    
    void numbertilde_08_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_08_currentIntervalInSamples = this->numbertilde_08_currentIntervalInSamples;
        auto __numbertilde_08_lastValue = this->numbertilde_08_lastValue;
        auto __numbertilde_08_currentInterval = this->numbertilde_08_currentInterval;
        auto __numbertilde_08_rampInSamples = this->numbertilde_08_rampInSamples;
        auto __numbertilde_08_outValue = this->numbertilde_08_outValue;
        auto __numbertilde_08_currentMode = this->numbertilde_08_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_08_currentMode == 0) {
                output[(Index)i] = this->numbertilde_08_smooth_next(
                    __numbertilde_08_outValue,
                    __numbertilde_08_rampInSamples,
                    __numbertilde_08_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_08_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_08_lastValue && __numbertilde_08_currentInterval <= 0) {
            __numbertilde_08_currentInterval = __numbertilde_08_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                2098551528,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_08_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Compression~/number~_obj-134"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_08_currentInterval = __numbertilde_08_currentInterval;
        this->numbertilde_08_lastValue = __numbertilde_08_lastValue;
    }
    
    void linetilde_03_perform(SampleValue * out, Index n) {
        auto __linetilde_03_time = this->linetilde_03_time;
        auto __linetilde_03_keepramp = this->linetilde_03_keepramp;
        auto __linetilde_03_currentValue = this->linetilde_03_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_03_activeRamps->length)) {
            while ((bool)(this->linetilde_03_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_03_activeRamps[0];
                number inc = this->linetilde_03_activeRamps[1];
                number rampTimeInSamples = this->linetilde_03_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_03_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_03_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_03_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -62043057,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_03_keepramp))) {
                            __linetilde_03_time = 0;
                        }
                    }
                }
    
                __linetilde_03_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_03_currentValue;
            i++;
        }
    
        this->linetilde_03_currentValue = __linetilde_03_currentValue;
        this->linetilde_03_time = __linetilde_03_time;
    }
    
    void dspexpr_25_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_24_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_23_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_pow(10, in1[(Index)i] * 0.05);//#map:_###_obj_###_:1
        }
    }
    
    void numbertilde_11_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_11_currentIntervalInSamples = this->numbertilde_11_currentIntervalInSamples;
        auto __numbertilde_11_lastValue = this->numbertilde_11_lastValue;
        auto __numbertilde_11_currentInterval = this->numbertilde_11_currentInterval;
        auto __numbertilde_11_rampInSamples = this->numbertilde_11_rampInSamples;
        auto __numbertilde_11_outValue = this->numbertilde_11_outValue;
        auto __numbertilde_11_currentMode = this->numbertilde_11_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_11_currentMode == 0) {
                output[(Index)i] = this->numbertilde_11_smooth_next(
                    __numbertilde_11_outValue,
                    __numbertilde_11_rampInSamples,
                    __numbertilde_11_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_11_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_11_lastValue && __numbertilde_11_currentInterval <= 0) {
            __numbertilde_11_currentInterval = __numbertilde_11_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_11_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Compression~/number~_obj-87"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_11_currentInterval = __numbertilde_11_currentInterval;
        this->numbertilde_11_lastValue = __numbertilde_11_lastValue;
    }
    
    void signalforwarder_01_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void numbertilde_12_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_12_currentIntervalInSamples = this->numbertilde_12_currentIntervalInSamples;
        auto __numbertilde_12_lastValue = this->numbertilde_12_lastValue;
        auto __numbertilde_12_currentInterval = this->numbertilde_12_currentInterval;
        auto __numbertilde_12_rampInSamples = this->numbertilde_12_rampInSamples;
        auto __numbertilde_12_outValue = this->numbertilde_12_outValue;
        auto __numbertilde_12_currentMode = this->numbertilde_12_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_12_currentMode == 0) {
                output[(Index)i] = this->numbertilde_12_smooth_next(
                    __numbertilde_12_outValue,
                    __numbertilde_12_rampInSamples,
                    __numbertilde_12_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_12_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_12_lastValue && __numbertilde_12_currentInterval <= 0) {
            __numbertilde_12_currentInterval = __numbertilde_12_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                694892522,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_12_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Compression~/number~_obj-51"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_12_currentInterval = __numbertilde_12_currentInterval;
        this->numbertilde_12_lastValue = __numbertilde_12_lastValue;
    }
    
    void numbertilde_13_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_13_currentIntervalInSamples = this->numbertilde_13_currentIntervalInSamples;
        auto __numbertilde_13_lastValue = this->numbertilde_13_lastValue;
        auto __numbertilde_13_currentInterval = this->numbertilde_13_currentInterval;
        auto __numbertilde_13_rampInSamples = this->numbertilde_13_rampInSamples;
        auto __numbertilde_13_outValue = this->numbertilde_13_outValue;
        auto __numbertilde_13_currentMode = this->numbertilde_13_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_13_currentMode == 0) {
                output[(Index)i] = this->numbertilde_13_smooth_next(
                    __numbertilde_13_outValue,
                    __numbertilde_13_rampInSamples,
                    __numbertilde_13_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_13_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_13_lastValue && __numbertilde_13_currentInterval <= 0) {
            __numbertilde_13_currentInterval = __numbertilde_13_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -6936981,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_13_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Compression~/number~_obj-50"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_13_currentInterval = __numbertilde_13_currentInterval;
        this->numbertilde_13_lastValue = __numbertilde_13_lastValue;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_06_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_06_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_06_value = localvalue;
    }
    
    void numberobj_07_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_07_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_07_value = localvalue;
    }
    
    void numberobj_08_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_08_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_08_value = localvalue;
    }
    
    void numberobj_09_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_09_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_09_value = localvalue;
    }
    
    void numberobj_10_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_10_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_10_value = localvalue;
    }
    
    number numbertilde_08_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_08_smooth_d_prev);
        this->numbertilde_08_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_08_smooth_d_dspsetup() {
        this->numbertilde_08_smooth_d_reset();
    }
    
    void numbertilde_08_smooth_d_reset() {
        this->numbertilde_08_smooth_d_prev = 0;
    }
    
    number numbertilde_08_smooth_next(number x, number up, number down) {
        if (this->numbertilde_08_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_08_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_08_smooth_index = _up;
                this->numbertilde_08_smooth_increment = (x - this->numbertilde_08_smooth_prev) / _up;
            } else if (x < this->numbertilde_08_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_08_smooth_index = _down;
                this->numbertilde_08_smooth_increment = (x - this->numbertilde_08_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_08_smooth_index > 0) {
            this->numbertilde_08_smooth_prev += this->numbertilde_08_smooth_increment;
            this->numbertilde_08_smooth_index -= 1;
        } else {
            this->numbertilde_08_smooth_prev = x;
        }
    
        return this->numbertilde_08_smooth_prev;
    }
    
    void numbertilde_08_smooth_reset() {
        this->numbertilde_08_smooth_prev = 0;
        this->numbertilde_08_smooth_index = 0;
        this->numbertilde_08_smooth_increment = 0;
        this->numbertilde_08_smooth_d_reset();
    }
    
    void numbertilde_08_init() {
        this->numbertilde_08_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number~_obj-134"), 1, this->_currentTime);
    }
    
    void numbertilde_08_dspsetup(bool force) {
        if ((bool)(this->numbertilde_08_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_08_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_08_currentInterval = this->numbertilde_08_currentIntervalInSamples;
        this->numbertilde_08_rampInSamples = this->mstosamps(this->numbertilde_08_ramp);
        this->numbertilde_08_setupDone = true;
        this->numbertilde_08_smooth_d_dspsetup();
    }
    
    void scopetilde_04_updateEffectiveCount() {
        number effectiveCount = 256 * 1 + 256 * 0;
        this->scopetilde_04_effectiveCount = this->maximum(effectiveCount, 256);
    }
    
    void scopetilde_04_dspsetup(bool force) {
        if ((bool)(this->scopetilde_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        {
            this->scopetilde_04_mode = 1;
        }
    
        this->getEngine()->sendListMessage(
            TAG("setup"),
            TAG("Compression~/scope~_obj-99"),
            {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_04_mode},
            this->_currentTime
        );;
    
        this->scopetilde_04_updateEffectiveCount();
        this->scopetilde_04_setupDone = true;
    }
    
    number numbertilde_09_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_09_smooth_d_prev);
        this->numbertilde_09_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_09_smooth_d_dspsetup() {
        this->numbertilde_09_smooth_d_reset();
    }
    
    void numbertilde_09_smooth_d_reset() {
        this->numbertilde_09_smooth_d_prev = 0;
    }
    
    number numbertilde_09_smooth_next(number x, number up, number down) {
        if (this->numbertilde_09_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_09_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_09_smooth_index = _up;
                this->numbertilde_09_smooth_increment = (x - this->numbertilde_09_smooth_prev) / _up;
            } else if (x < this->numbertilde_09_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_09_smooth_index = _down;
                this->numbertilde_09_smooth_increment = (x - this->numbertilde_09_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_09_smooth_index > 0) {
            this->numbertilde_09_smooth_prev += this->numbertilde_09_smooth_increment;
            this->numbertilde_09_smooth_index -= 1;
        } else {
            this->numbertilde_09_smooth_prev = x;
        }
    
        return this->numbertilde_09_smooth_prev;
    }
    
    void numbertilde_09_smooth_reset() {
        this->numbertilde_09_smooth_prev = 0;
        this->numbertilde_09_smooth_index = 0;
        this->numbertilde_09_smooth_increment = 0;
        this->numbertilde_09_smooth_d_reset();
    }
    
    void numbertilde_09_init() {
        this->numbertilde_09_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number~_obj-118"), 1, this->_currentTime);
    }
    
    void numbertilde_09_dspsetup(bool force) {
        if ((bool)(this->numbertilde_09_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_09_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_09_currentInterval = this->numbertilde_09_currentIntervalInSamples;
        this->numbertilde_09_rampInSamples = this->mstosamps(this->numbertilde_09_ramp);
        this->numbertilde_09_setupDone = true;
        this->numbertilde_09_smooth_d_dspsetup();
    }
    
    number numbertilde_10_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_10_smooth_d_prev);
        this->numbertilde_10_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_10_smooth_d_dspsetup() {
        this->numbertilde_10_smooth_d_reset();
    }
    
    void numbertilde_10_smooth_d_reset() {
        this->numbertilde_10_smooth_d_prev = 0;
    }
    
    number numbertilde_10_smooth_next(number x, number up, number down) {
        if (this->numbertilde_10_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_10_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_10_smooth_index = _up;
                this->numbertilde_10_smooth_increment = (x - this->numbertilde_10_smooth_prev) / _up;
            } else if (x < this->numbertilde_10_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_10_smooth_index = _down;
                this->numbertilde_10_smooth_increment = (x - this->numbertilde_10_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_10_smooth_index > 0) {
            this->numbertilde_10_smooth_prev += this->numbertilde_10_smooth_increment;
            this->numbertilde_10_smooth_index -= 1;
        } else {
            this->numbertilde_10_smooth_prev = x;
        }
    
        return this->numbertilde_10_smooth_prev;
    }
    
    void numbertilde_10_smooth_reset() {
        this->numbertilde_10_smooth_prev = 0;
        this->numbertilde_10_smooth_index = 0;
        this->numbertilde_10_smooth_increment = 0;
        this->numbertilde_10_smooth_d_reset();
    }
    
    void numbertilde_10_init() {
        this->numbertilde_10_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number~_obj-41"), 1, this->_currentTime);
    }
    
    void numbertilde_10_dspsetup(bool force) {
        if ((bool)(this->numbertilde_10_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_10_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_10_currentInterval = this->numbertilde_10_currentIntervalInSamples;
        this->numbertilde_10_rampInSamples = this->mstosamps(this->numbertilde_10_ramp);
        this->numbertilde_10_setupDone = true;
        this->numbertilde_10_smooth_d_dspsetup();
    }
    
    void numberobj_06_init() {
        this->numberobj_06_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number_obj-12"), 1, this->_currentTime);
    }
    
    void numberobj_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_06_value;
    }
    
    void numberobj_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_06_value_set(preset["value"]);
    }
    
    number numbertilde_11_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_11_smooth_d_prev);
        this->numbertilde_11_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_11_smooth_d_dspsetup() {
        this->numbertilde_11_smooth_d_reset();
    }
    
    void numbertilde_11_smooth_d_reset() {
        this->numbertilde_11_smooth_d_prev = 0;
    }
    
    number numbertilde_11_smooth_next(number x, number up, number down) {
        if (this->numbertilde_11_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_11_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_11_smooth_index = _up;
                this->numbertilde_11_smooth_increment = (x - this->numbertilde_11_smooth_prev) / _up;
            } else if (x < this->numbertilde_11_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_11_smooth_index = _down;
                this->numbertilde_11_smooth_increment = (x - this->numbertilde_11_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_11_smooth_index > 0) {
            this->numbertilde_11_smooth_prev += this->numbertilde_11_smooth_increment;
            this->numbertilde_11_smooth_index -= 1;
        } else {
            this->numbertilde_11_smooth_prev = x;
        }
    
        return this->numbertilde_11_smooth_prev;
    }
    
    void numbertilde_11_smooth_reset() {
        this->numbertilde_11_smooth_prev = 0;
        this->numbertilde_11_smooth_index = 0;
        this->numbertilde_11_smooth_increment = 0;
        this->numbertilde_11_smooth_d_reset();
    }
    
    void numbertilde_11_init() {
        this->numbertilde_11_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number~_obj-87"), 1, this->_currentTime);
    }
    
    void numbertilde_11_dspsetup(bool force) {
        if ((bool)(this->numbertilde_11_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_11_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_11_currentInterval = this->numbertilde_11_currentIntervalInSamples;
        this->numbertilde_11_rampInSamples = this->mstosamps(this->numbertilde_11_ramp);
        this->numbertilde_11_setupDone = true;
        this->numbertilde_11_smooth_d_dspsetup();
    }
    
    void numberobj_07_init() {
        this->numberobj_07_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number_obj-171"), 1, this->_currentTime);
    }
    
    void numberobj_07_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_07_value;
    }
    
    void numberobj_07_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_07_value_set(preset["value"]);
    }
    
    void numberobj_08_init() {
        this->numberobj_08_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number_obj-176"), 1, this->_currentTime);
    }
    
    void numberobj_08_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_08_value;
    }
    
    void numberobj_08_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_08_value_set(preset["value"]);
    }
    
    void numberobj_09_init() {
        this->numberobj_09_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number_obj-54"), 1, this->_currentTime);
    }
    
    void numberobj_09_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_09_value;
    }
    
    void numberobj_09_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_09_value_set(preset["value"]);
    }
    
    void numberobj_10_init() {
        this->numberobj_10_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number_obj-57"), 1, this->_currentTime);
    }
    
    void numberobj_10_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_10_value;
    }
    
    void numberobj_10_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_10_value_set(preset["value"]);
    }
    
    number numbertilde_12_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_12_smooth_d_prev);
        this->numbertilde_12_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_12_smooth_d_dspsetup() {
        this->numbertilde_12_smooth_d_reset();
    }
    
    void numbertilde_12_smooth_d_reset() {
        this->numbertilde_12_smooth_d_prev = 0;
    }
    
    number numbertilde_12_smooth_next(number x, number up, number down) {
        if (this->numbertilde_12_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_12_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_12_smooth_index = _up;
                this->numbertilde_12_smooth_increment = (x - this->numbertilde_12_smooth_prev) / _up;
            } else if (x < this->numbertilde_12_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_12_smooth_index = _down;
                this->numbertilde_12_smooth_increment = (x - this->numbertilde_12_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_12_smooth_index > 0) {
            this->numbertilde_12_smooth_prev += this->numbertilde_12_smooth_increment;
            this->numbertilde_12_smooth_index -= 1;
        } else {
            this->numbertilde_12_smooth_prev = x;
        }
    
        return this->numbertilde_12_smooth_prev;
    }
    
    void numbertilde_12_smooth_reset() {
        this->numbertilde_12_smooth_prev = 0;
        this->numbertilde_12_smooth_index = 0;
        this->numbertilde_12_smooth_increment = 0;
        this->numbertilde_12_smooth_d_reset();
    }
    
    void numbertilde_12_init() {
        this->numbertilde_12_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number~_obj-51"), 1, this->_currentTime);
    }
    
    void numbertilde_12_dspsetup(bool force) {
        if ((bool)(this->numbertilde_12_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_12_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_12_currentInterval = this->numbertilde_12_currentIntervalInSamples;
        this->numbertilde_12_rampInSamples = this->mstosamps(this->numbertilde_12_ramp);
        this->numbertilde_12_setupDone = true;
        this->numbertilde_12_smooth_d_dspsetup();
    }
    
    number numbertilde_13_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_13_smooth_d_prev);
        this->numbertilde_13_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_13_smooth_d_dspsetup() {
        this->numbertilde_13_smooth_d_reset();
    }
    
    void numbertilde_13_smooth_d_reset() {
        this->numbertilde_13_smooth_d_prev = 0;
    }
    
    number numbertilde_13_smooth_next(number x, number up, number down) {
        if (this->numbertilde_13_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_13_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_13_smooth_index = _up;
                this->numbertilde_13_smooth_increment = (x - this->numbertilde_13_smooth_prev) / _up;
            } else if (x < this->numbertilde_13_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_13_smooth_index = _down;
                this->numbertilde_13_smooth_increment = (x - this->numbertilde_13_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_13_smooth_index > 0) {
            this->numbertilde_13_smooth_prev += this->numbertilde_13_smooth_increment;
            this->numbertilde_13_smooth_index -= 1;
        } else {
            this->numbertilde_13_smooth_prev = x;
        }
    
        return this->numbertilde_13_smooth_prev;
    }
    
    void numbertilde_13_smooth_reset() {
        this->numbertilde_13_smooth_prev = 0;
        this->numbertilde_13_smooth_index = 0;
        this->numbertilde_13_smooth_increment = 0;
        this->numbertilde_13_smooth_d_reset();
    }
    
    void numbertilde_13_init() {
        this->numbertilde_13_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Compression~/number~_obj-50"), 1, this->_currentTime);
    }
    
    void numbertilde_13_dspsetup(bool force) {
        if ((bool)(this->numbertilde_13_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_13_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_13_currentInterval = this->numbertilde_13_currentIntervalInSamples;
        this->numbertilde_13_rampInSamples = this->mstosamps(this->numbertilde_13_ramp);
        this->numbertilde_13_setupDone = true;
        this->numbertilde_13_smooth_d_dspsetup();
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        numbertilde_08_input_number = 0;
        numbertilde_08_ramp = 0;
        dspexpr_16_in1 = 0;
        maximum_tilde_01_x = 0;
        maximum_tilde_01_y = 0;
        slide_tilde_02_x = 0;
        slide_tilde_02_up = 88;
        slide_tilde_02_down = 4121;
        dspexpr_17_in1 = 0;
        dspexpr_17_in2 = 0;
        dspexpr_18_in1 = 0;
        numbertilde_09_input_number = 0;
        numbertilde_09_ramp = 0;
        dspexpr_19_in1 = 0;
        dspexpr_20_in1 = 0;
        dspexpr_20_in2 = 0;
        dspexpr_21_in1 = 0;
        numbertilde_10_input_number = 0;
        numbertilde_10_ramp = 0;
        dspexpr_22_in1 = 0;
        dspexpr_22_in2 = 0;
        linetilde_02_time = 50;
        linetilde_02_keepramp = 1;
        expr_03_in1 = 0;
        expr_03_in2 = -1;
        expr_03_out1 = 0;
        numberobj_06_value = 0;
        numberobj_06_value_setter(numberobj_06_value);
        numbertilde_11_input_number = 0;
        numbertilde_11_ramp = 0;
        dspexpr_23_in1 = 0;
        dspexpr_24_in1 = 0;
        dspexpr_24_in2 = -1;
        dspexpr_25_in1 = 0;
        dspexpr_25_in2 = 0;
        numberobj_07_value = 0;
        numberobj_07_value_setter(numberobj_07_value);
        numberobj_08_value = 0;
        numberobj_08_value_setter(numberobj_08_value);
        linetilde_03_time = 50;
        linetilde_03_keepramp = 1;
        expr_04_in1 = 0;
        expr_04_out1 = 0;
        expr_05_in1 = 0;
        expr_05_in2 = 1;
        expr_05_out1 = 0;
        numberobj_09_value = 0;
        numberobj_09_value_setter(numberobj_09_value);
        numberobj_10_value = 0;
        numberobj_10_value_setter(numberobj_10_value);
        expr_06_in1 = 0;
        expr_06_in2 = 1;
        expr_06_out1 = 0;
        numbertilde_12_input_number = 0;
        numbertilde_12_ramp = 0;
        numbertilde_13_input_number = 0;
        numbertilde_13_ramp = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numbertilde_08_currentInterval = 0;
        numbertilde_08_currentIntervalInSamples = 0;
        numbertilde_08_lastValue = 0;
        numbertilde_08_outValue = 0;
        numbertilde_08_rampInSamples = 0;
        numbertilde_08_currentMode = 0;
        numbertilde_08_smooth_d_prev = 0;
        numbertilde_08_smooth_prev = 0;
        numbertilde_08_smooth_index = 0;
        numbertilde_08_smooth_increment = 0;
        numbertilde_08_setupDone = false;
        slide_tilde_02_prev = 0;
        scopetilde_04_lastValue = 0;
        scopetilde_04_effectiveCount = 256;
        scopetilde_04_xsign = 1;
        scopetilde_04_ysign = 1;
        scopetilde_04_mode = 0;
        scopetilde_04_setupDone = false;
        numbertilde_09_currentInterval = 0;
        numbertilde_09_currentIntervalInSamples = 0;
        numbertilde_09_lastValue = 0;
        numbertilde_09_outValue = 0;
        numbertilde_09_rampInSamples = 0;
        numbertilde_09_currentMode = 0;
        numbertilde_09_smooth_d_prev = 0;
        numbertilde_09_smooth_prev = 0;
        numbertilde_09_smooth_index = 0;
        numbertilde_09_smooth_increment = 0;
        numbertilde_09_setupDone = false;
        numbertilde_10_currentInterval = 0;
        numbertilde_10_currentIntervalInSamples = 0;
        numbertilde_10_lastValue = 0;
        numbertilde_10_outValue = 0;
        numbertilde_10_rampInSamples = 0;
        numbertilde_10_currentMode = 0;
        numbertilde_10_smooth_d_prev = 0;
        numbertilde_10_smooth_prev = 0;
        numbertilde_10_smooth_index = 0;
        numbertilde_10_smooth_increment = 0;
        numbertilde_10_setupDone = false;
        linetilde_02_currentValue = 0;
        numberobj_06_currentFormat = 6;
        numberobj_06_lastValue = 0;
        numbertilde_11_currentInterval = 0;
        numbertilde_11_currentIntervalInSamples = 0;
        numbertilde_11_lastValue = 0;
        numbertilde_11_outValue = 0;
        numbertilde_11_rampInSamples = 0;
        numbertilde_11_currentMode = 0;
        numbertilde_11_smooth_d_prev = 0;
        numbertilde_11_smooth_prev = 0;
        numbertilde_11_smooth_index = 0;
        numbertilde_11_smooth_increment = 0;
        numbertilde_11_setupDone = false;
        numberobj_07_currentFormat = 6;
        numberobj_07_lastValue = 0;
        numberobj_08_currentFormat = 6;
        numberobj_08_lastValue = 0;
        linetilde_03_currentValue = 0;
        numberobj_09_currentFormat = 6;
        numberobj_09_lastValue = 0;
        numberobj_10_currentFormat = 6;
        numberobj_10_lastValue = 0;
        numbertilde_12_currentInterval = 0;
        numbertilde_12_currentIntervalInSamples = 0;
        numbertilde_12_lastValue = 0;
        numbertilde_12_outValue = 0;
        numbertilde_12_rampInSamples = 0;
        numbertilde_12_currentMode = 0;
        numbertilde_12_smooth_d_prev = 0;
        numbertilde_12_smooth_prev = 0;
        numbertilde_12_smooth_index = 0;
        numbertilde_12_smooth_increment = 0;
        numbertilde_12_setupDone = false;
        numbertilde_13_currentInterval = 0;
        numbertilde_13_currentIntervalInSamples = 0;
        numbertilde_13_lastValue = 0;
        numbertilde_13_outValue = 0;
        numbertilde_13_rampInSamples = 0;
        numbertilde_13_currentMode = 0;
        numbertilde_13_smooth_d_prev = 0;
        numbertilde_13_smooth_prev = 0;
        numbertilde_13_smooth_index = 0;
        numbertilde_13_smooth_increment = 0;
        numbertilde_13_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number numbertilde_08_input_number;
        number numbertilde_08_ramp;
        number dspexpr_16_in1;
        number maximum_tilde_01_x;
        number maximum_tilde_01_y;
        number slide_tilde_02_x;
        number slide_tilde_02_up;
        number slide_tilde_02_down;
        number dspexpr_17_in1;
        number dspexpr_17_in2;
        number dspexpr_18_in1;
        number numbertilde_09_input_number;
        number numbertilde_09_ramp;
        number dspexpr_19_in1;
        number dspexpr_20_in1;
        number dspexpr_20_in2;
        number dspexpr_21_in1;
        number numbertilde_10_input_number;
        number numbertilde_10_ramp;
        number dspexpr_22_in1;
        number dspexpr_22_in2;
        list linetilde_02_segments;
        number linetilde_02_time;
        number linetilde_02_keepramp;
        number expr_03_in1;
        number expr_03_in2;
        number expr_03_out1;
        number numberobj_06_value;
        number numbertilde_11_input_number;
        number numbertilde_11_ramp;
        number dspexpr_23_in1;
        number dspexpr_24_in1;
        number dspexpr_24_in2;
        number dspexpr_25_in1;
        number dspexpr_25_in2;
        number numberobj_07_value;
        number numberobj_08_value;
        list linetilde_03_segments;
        number linetilde_03_time;
        number linetilde_03_keepramp;
        number expr_04_in1;
        number expr_04_out1;
        number expr_05_in1;
        number expr_05_in2;
        number expr_05_out1;
        number numberobj_09_value;
        number numberobj_10_value;
        number expr_06_in1;
        number expr_06_in2;
        number expr_06_out1;
        number numbertilde_12_input_number;
        number numbertilde_12_ramp;
        number numbertilde_13_input_number;
        number numbertilde_13_ramp;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        SampleIndex numbertilde_08_currentInterval;
        SampleIndex numbertilde_08_currentIntervalInSamples;
        number numbertilde_08_lastValue;
        number numbertilde_08_outValue;
        number numbertilde_08_rampInSamples;
        Int numbertilde_08_currentMode;
        number numbertilde_08_smooth_d_prev;
        number numbertilde_08_smooth_prev;
        number numbertilde_08_smooth_index;
        number numbertilde_08_smooth_increment;
        bool numbertilde_08_setupDone;
        number slide_tilde_02_prev;
        number scopetilde_04_lastValue;
        number scopetilde_04_effectiveCount;
        number scopetilde_04_xmonitorvalue;
        number scopetilde_04_ymonitorvalue;
        list scopetilde_04_monitorbuffer;
        number scopetilde_04_xsign;
        number scopetilde_04_ysign;
        Int scopetilde_04_mode;
        bool scopetilde_04_setupDone;
        SampleIndex numbertilde_09_currentInterval;
        SampleIndex numbertilde_09_currentIntervalInSamples;
        number numbertilde_09_lastValue;
        number numbertilde_09_outValue;
        number numbertilde_09_rampInSamples;
        Int numbertilde_09_currentMode;
        number numbertilde_09_smooth_d_prev;
        number numbertilde_09_smooth_prev;
        number numbertilde_09_smooth_index;
        number numbertilde_09_smooth_increment;
        bool numbertilde_09_setupDone;
        SampleIndex numbertilde_10_currentInterval;
        SampleIndex numbertilde_10_currentIntervalInSamples;
        number numbertilde_10_lastValue;
        number numbertilde_10_outValue;
        number numbertilde_10_rampInSamples;
        Int numbertilde_10_currentMode;
        number numbertilde_10_smooth_d_prev;
        number numbertilde_10_smooth_prev;
        number numbertilde_10_smooth_index;
        number numbertilde_10_smooth_increment;
        bool numbertilde_10_setupDone;
        list linetilde_02_activeRamps;
        number linetilde_02_currentValue;
        Int numberobj_06_currentFormat;
        number numberobj_06_lastValue;
        SampleIndex numbertilde_11_currentInterval;
        SampleIndex numbertilde_11_currentIntervalInSamples;
        number numbertilde_11_lastValue;
        number numbertilde_11_outValue;
        number numbertilde_11_rampInSamples;
        Int numbertilde_11_currentMode;
        number numbertilde_11_smooth_d_prev;
        number numbertilde_11_smooth_prev;
        number numbertilde_11_smooth_index;
        number numbertilde_11_smooth_increment;
        bool numbertilde_11_setupDone;
        Int numberobj_07_currentFormat;
        number numberobj_07_lastValue;
        Int numberobj_08_currentFormat;
        number numberobj_08_lastValue;
        list linetilde_03_activeRamps;
        number linetilde_03_currentValue;
        Int numberobj_09_currentFormat;
        number numberobj_09_lastValue;
        Int numberobj_10_currentFormat;
        number numberobj_10_lastValue;
        SampleIndex numbertilde_12_currentInterval;
        SampleIndex numbertilde_12_currentIntervalInSamples;
        number numbertilde_12_lastValue;
        number numbertilde_12_outValue;
        number numbertilde_12_rampInSamples;
        Int numbertilde_12_currentMode;
        number numbertilde_12_smooth_d_prev;
        number numbertilde_12_smooth_prev;
        number numbertilde_12_smooth_index;
        number numbertilde_12_smooth_increment;
        bool numbertilde_12_setupDone;
        SampleIndex numbertilde_13_currentInterval;
        SampleIndex numbertilde_13_currentIntervalInSamples;
        number numbertilde_13_lastValue;
        number numbertilde_13_outValue;
        number numbertilde_13_rampInSamples;
        Int numbertilde_13_currentMode;
        number numbertilde_13_smooth_d_prev;
        number numbertilde_13_smooth_prev;
        number numbertilde_13_smooth_index;
        number numbertilde_13_smooth_increment;
        bool numbertilde_13_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_10 : public PatcherInterfaceImpl {
    
    friend class Flansch;
    
    public:
    
    RNBOSubpatcher_10()
    {
    }
    
    ~RNBOSubpatcher_10()
    {
    }
    
    virtual Flansch* getPatcher() const {
        return static_cast<Flansch *>(_parentPatcher);
    }
    
    Flansch* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number mstohz(number ms) {
        return this->safediv(1000, ms);
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double samplerate) {
        this->translate_01_onSampleRateChanged(samplerate);
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->translate_01_onTempoChanged(tempo);
    }
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void processBBUEvent(MillisecondTime , number , number , number ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("Tempo[1]/number_obj-48") == objectId)
                this->numberobj_11_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Tempo[1]/number_obj-48") == objectId)
                this->numberobj_11_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Tempo[1]/number_obj-48"):
            {
            return "Tempo[1]/number_obj-48";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void numberobj_11_valin_set(number v) {
        this->numberobj_11_value_set(v);
    }
    
    void numberobj_11_format_set(number v) {
        this->numberobj_11_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_06_out1_bang_bang() {
        this->expr_07_in1_bang();
    }
    
    void eventinlet_06_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_07_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_07_in1_set(converted);
        }
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_11_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void eventoutlet_02_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_05_out1_number_set(v);
    }
    
    void translate_01_out_set(number v) {
        this->eventoutlet_02_in1_number_set(v);
    }
    
    void translate_01_value_set(number v) {
        this->translate_01_value = v;
    
        {
            {
                {
                    {
                        {
                            {
                                this->translate_01_out_set(this->mstohz(v));
                            }
                        }
                    }
                }
            }
        }
    }
    
    void numberobj_11_output_set(number v) {
        this->translate_01_value_set(v);
    }
    
    void numberobj_11_value_set(number v) {
        this->numberobj_11_value_setter(v);
        v = this->numberobj_11_value;
        number localvalue = v;
    
        if (this->numberobj_11_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Tempo[1]/number_obj-48"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_11_output_set(localvalue);
    }
    
    void expr_07_out1_set(number v) {
        this->expr_07_out1 = v;
        this->numberobj_11_value_set(this->expr_07_out1);
    }
    
    void expr_07_in1_set(number in1) {
        this->expr_07_in1 = in1;
        this->expr_07_out1_set((this->expr_07_in1 == 0. ? 0. : this->expr_07_in2 / this->expr_07_in1));//#map:Tempo[1]/!/_obj-34:1
    }
    
    void eventinlet_06_out1_number_set(number v) {
        this->expr_07_in1_set(v);
    }
    
    void expr_07_in1_bang() {
        this->expr_07_out1_set((this->expr_07_in1 == 0. ? 0. : this->expr_07_in2 / this->expr_07_in1));//#map:Tempo[1]/!/_obj-34:1
    }
    
    void expr_07_in2_set(number v) {
        this->expr_07_in2 = v;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_11_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_11_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_11_value = localvalue;
    }
    
    void translate_01_onTempoChanged(number ) {}
    
    void translate_01_onSampleRateChanged(number ) {}
    
    void numberobj_11_init() {
        this->numberobj_11_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Tempo[1]/number_obj-48"), 1, this->_currentTime);
    }
    
    void numberobj_11_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_11_value;
    }
    
    void numberobj_11_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_11_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        translate_01_value = 0;
        numberobj_11_value = 0;
        numberobj_11_value_setter(numberobj_11_value);
        expr_07_in1 = 0;
        expr_07_in2 = 60000;
        expr_07_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_11_currentFormat = 6;
        numberobj_11_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number translate_01_value;
        number numberobj_11_value;
        number expr_07_in1;
        number expr_07_in2;
        number expr_07_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_11_currentFormat;
        number numberobj_11_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

Flansch()
{
}

~Flansch()
{
    delete this->p_01;
    delete this->p_02;
    delete this->p_03;
    delete this->p_04;
    delete this->p_05;
}

Flansch* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
    getEngine()->flushClockEvents(this, 1673828112, false);
    getEngine()->flushClockEvents(this, -1541126581, false);
    getEngine()->flushClockEvents(this, -894149362, false);
    getEngine()->flushClockEvents(this, -1357044121, false);
    getEngine()->flushClockEvents(this, 1912853063, false);
    getEngine()->flushClockEvents(this, 185863241, false);
    getEngine()->flushClockEvents(this, 1935387534, false);
    getEngine()->flushClockEvents(this, -1735137014, false);
    getEngine()->flushClockEvents(this, 832840460, false);
    getEngine()->flushClockEvents(this, -677631670, false);
    getEngine()->flushClockEvents(this, -1757644273, false);
    getEngine()->flushClockEvents(this, -30654451, false);
    getEngine()->flushClockEvents(this, 1049358152, false);
    getEngine()->flushClockEvents(this, 810333201, false);
    getEngine()->flushClockEvents(this, 1696335371, false);
    getEngine()->flushClockEvents(this, -871642103, false);
    getEngine()->flushClockEvents(this, -1494586265, false);
    getEngine()->flushClockEvents(this, -62043057, false);
    getEngine()->flushClockEvents(this, 1396722025, false);
    getEngine()->flushClockEvents(this, -1621164530, false);
    getEngine()->flushClockEvents(this, 2098551528, false);
    getEngine()->flushClockEvents(this, 1169787369, false);
    getEngine()->flushClockEvents(this, 157032932, false);
    getEngine()->flushClockEvents(this, -1876983388, false);
    getEngine()->flushClockEvents(this, -935701140, false);
    getEngine()->flushClockEvents(this, -1637530643, false);
    getEngine()->flushClockEvents(this, -1175153885, false);
    getEngine()->flushClockEvents(this, -233871637, false);
    getEngine()->flushClockEvents(this, 467957866, false);
    getEngine()->flushClockEvents(this, 743790737, false);
    getEngine()->flushClockEvents(this, -815330736, false);
    getEngine()->flushClockEvents(this, 349887047, false);
    getEngine()->flushClockEvents(this, 361393614, false);
    getEngine()->flushClockEvents(this, 1920515087, false);
    getEngine()->flushClockEvents(this, -544796571, false);
    getEngine()->flushClockEvents(this, 1871616872, false);
    getEngine()->flushClockEvents(this, 312495399, false);
    getEngine()->flushClockEvents(this, -389334104, false);
    getEngine()->flushClockEvents(this, -1091163607, false);
    getEngine()->flushClockEvents(this, 1014324902, false);
    getEngine()->flushClockEvents(this, 1716154405, false);
    getEngine()->flushClockEvents(this, 1098315180, false);
    getEngine()->flushClockEvents(this, 1560691938, false);
    getEngine()->flushClockEvents(this, 858862435, false);
    getEngine()->flushClockEvents(this, 1800144683, false);
    getEngine()->flushClockEvents(this, -1792993110, false);
    getEngine()->flushClockEvents(this, 1114681293, false);
    getEngine()->flushClockEvents(this, -6936981, false);
    getEngine()->flushClockEvents(this, -1019691418, false);
    getEngine()->flushClockEvents(this, 1241259558, false);
    getEngine()->flushClockEvents(this, -2112425490, false);
    getEngine()->flushClockEvents(this, 1480712303, false);
    getEngine()->flushClockEvents(this, 1943089061, false);
    getEngine()->flushClockEvents(this, -1410595987, false);
    getEngine()->flushClockEvents(this, -708766484, false);
    getEngine()->flushClockEvents(this, -2003561653, false);
    getEngine()->flushClockEvents(this, 732284170, false);
    getEngine()->flushClockEvents(this, -444440180, false);
    getEngine()->flushClockEvents(this, 1909008520, false);
    getEngine()->flushClockEvents(this, -826837303, false);
    getEngine()->flushClockEvents(this, -1721520921, false);
    getEngine()->flushClockEvents(this, 694892522, false);
    getEngine()->flushClockEvents(this, -864228951, false);
    getEngine()->flushClockEvents(this, -1566058454, false);
    getEngine()->flushClockEvents(this, 2027079339, false);
    getEngine()->flushClockEvents(this, -162399448, false);
    getEngine()->flushClockEvents(this, 539430055, false);
    getEngine()->flushClockEvents(this, -78409170, false);
    getEngine()->flushClockEvents(this, 383967588, false);
    getEngine()->flushClockEvents(this, -317861915, false);
    getEngine()->flushClockEvents(this, 623420333, false);
    getEngine()->flushClockEvents(this, 1325249836, false);
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

number samplerate() const {
    return this->sr;
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

SampleIndex currentsampletime() {
    return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
}

inline number safediv(number num, number denom) {
    return (denom == 0.0 ? 0.0 : num / denom);
}

number safepow(number base, number exponent) {
    return fixnan(rnbo_pow(base, exponent));
}

number scale(
    number x,
    number lowin,
    number hiin,
    number lowout,
    number highout,
    number pow
) {
    auto inscale = this->safediv(1., hiin - lowin);
    number outdiff = highout - lowout;
    number value = (x - lowin) * inscale;

    if (pow != 1) {
        if (value > 0)
            value = this->safepow(value, pow);
        else
            value = -this->safepow(-value, pow);
    }

    value = value * outdiff + lowout;
    return value;
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

number wrap(number x, number low, number high) {
    number lo;
    number hi;

    if (low == high)
        return low;

    if (low > high) {
        hi = low;
        lo = high;
    } else {
        lo = low;
        hi = high;
    }

    number range = hi - lo;

    if (x >= lo && x < hi)
        return x;

    if (range <= 0.000000001)
        return lo;

    long numWraps = (long)(trunc((x - lo) / range));
    numWraps = numWraps - ((x < lo ? 1 : 0));
    number result = x - range * numWraps;

    if (result >= hi)
        return result - range;
    else
        return result;
}

number triangle(number phase, number duty) {
    number p1 = duty;
    auto wrappedPhase = this->wrap(phase, 0., 1.);
    p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));

    if (wrappedPhase < p1)
        return wrappedPhase / p1;
    else
        return (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
}

inline number intnum(const number value) {
    return trunc(value);
}

inline number linearinterp(number frac, number x, number y) {
    return x + (y - x) * frac;
}

inline number cubicinterp(number a, number w, number x, number y, number z) {
    number a1 = 1. + a;
    number aa = a * a1;
    number b = 1. - a;
    number b1 = 2. - a;
    number bb = b * b1;
    number fw = -.1666667 * bb * a;
    number fx = .5 * bb * a1;
    number fy = .5 * aa * b1;
    number fz = -.1666667 * aa * b;
    return w * fw + x * fx + y * fy + z * fz;
}

inline number fastcubicinterp(number a, number w, number x, number y, number z) {
    number a2 = a * a;
    number f0 = z - y - w + x;
    number f1 = w - x - f0;
    number f2 = y - w;
    number f3 = x;
    return f0 * a * a2 + f1 * a2 + f2 * a + f3;
}

inline number splineinterp(number a, number w, number x, number y, number z) {
    number a2 = a * a;
    number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
    number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
    number f2 = -0.5 * w + 0.5 * y;
    return f0 * a * a2 + f1 * a2 + f2 * a + x;
}

inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
    number ym2py2 = y0 + y4;
    number ym1py1 = y1 + y3;
    number y2mym2 = y4 - y0;
    number y1mym1 = y3 - y1;
    number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
    number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
    number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
    number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
    number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
    number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
    number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
    return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
}

inline number cosT8(number r) {
    number t84 = 56.0;
    number t83 = 1680.0;
    number t82 = 20160.0;
    number t81 = 2.4801587302e-05;
    number t73 = 42.0;
    number t72 = 840.0;
    number t71 = 1.9841269841e-04;

    if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
        number rr = r * r;
        return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
    } else if (r > 0.0) {
        r -= 1.57079632679489661923132169163975144;
        number rr = r * r;
        return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
    } else {
        r += 1.57079632679489661923132169163975144;
        number rr = r * r;
        return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
    }
}

inline number cosineinterp(number frac, number x, number y) {
    number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
    return x * (1.0 - a2) + y * a2;
}

Index vectorsize() const {
    return this->vs;
}

inline number safesqrt(number num) {
    return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
}

MillisecondTime currenttime() {
    return this->_currentTime;
}

ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
    return this->convertFromNormalizedParameterValue(index, normalizedValue);
}

number tempo() {
    return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
}

number tickstoms(number ticks) {
    return ticks / (number)480 * this->safediv(60, this->tempo()) * 1000;
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

Index getNumMidiInputPorts() const {
    return 1;
}

void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
    this->updateTime(time);
    this->ctlin_01_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    this->ctlin_02_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    const SampleValue * const* inputs,
    Index numInputs,
    SampleValue * const* outputs,
    Index numOutputs,
    Index n
) {
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
    const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
    this->limi_03_perform(in1, this->signals[0], n);
    this->p_01_perform(this->signals[1], n);
    this->dspexpr_28_perform(this->signals[0], this->signals[1], this->signals[2], n);
    this->limi_04_perform(in2, this->signals[0], n);
    this->dspexpr_33_perform(this->signals[0], this->signals[1], this->signals[3], n);
    this->gen_04_perform(in1, in2, this->signals[1], n);
    this->p_04_perform(this->signals[1], this->signals[0], this->signals[4], n);
    this->numbertilde_24_perform(this->signals[4], this->dummyBuffer, n);
    this->linetilde_04_perform(this->signals[4], n);
    this->numbertilde_14_perform(this->signals[4], this->dummyBuffer, n);
    this->linetilde_05_perform(this->signals[1], n);
    this->p_03_perform(n);
    this->ip_01_perform(this->signals[5], n);
    this->phasor_01_perform(this->signals[5], this->signals[6], n);
    this->rate_tilde_01_perform(this->signals[6], this->rate_tilde_01_multiplier, this->signals[5], n);
    this->triangle_tilde_01_perform(this->signals[5], this->triangle_tilde_01_duty, this->signals[7], n);
    this->gen_01_perform(this->signals[7], this->gen_01_in2, this->signals[5], n);

    this->scale_tilde_01_perform(
        this->signals[5],
        this->scale_tilde_01_lowin,
        this->scale_tilde_01_hiin,
        this->scale_tilde_01_lowout,
        this->scale_tilde_01_highout,
        this->scale_tilde_01_pow,
        this->signals[7],
        n
    );

    this->scopetilde_05_perform(this->signals[5], this->zeroBuffer, n);
    this->triangle_tilde_02_perform(this->signals[6], this->triangle_tilde_02_duty, this->signals[5], n);
    this->gen_03_perform(this->signals[5], this->gen_03_in2, this->signals[8], n);
    this->numbertilde_15_perform(this->signals[8], this->dummyBuffer, n);
    this->dspexpr_50_perform(this->signals[8], this->dspexpr_50_in2, this->signals[5], n);
    this->numbertilde_28_perform(this->signals[5], this->signals[9], n);

    this->slide_tilde_05_perform(
        this->signals[9],
        this->slide_tilde_05_up,
        this->slide_tilde_05_down,
        this->signals[5],
        n
    );

    this->scale_tilde_02_perform(
        this->signals[8],
        this->scale_tilde_02_lowin,
        this->scale_tilde_02_hiin,
        this->scale_tilde_02_lowout,
        this->scale_tilde_02_highout,
        this->scale_tilde_02_pow,
        this->signals[9],
        n
    );

    this->scopetilde_06_perform(this->signals[8], this->zeroBuffer, n);
    this->ip_02_perform(this->signals[8], n);
    this->dspexpr_37_perform(this->signals[9], this->signals[8], this->signals[10], n);
    this->dspexpr_36_perform(this->signals[10], this->dspexpr_36_in2, this->signals[8], n);

    this->slide_tilde_03_perform(
        this->signals[8],
        this->slide_tilde_03_up,
        this->slide_tilde_03_down,
        this->signals[10],
        n
    );

    this->numbertilde_17_perform(this->signals[8], this->dummyBuffer, n);
    this->ip_03_perform(this->signals[8], n);
    this->dspexpr_34_perform(this->signals[7], this->signals[8], this->signals[11], n);
    this->dspexpr_35_perform(this->signals[11], this->dspexpr_35_in2, this->signals[8], n);

    this->slide_tilde_04_perform(
        this->signals[8],
        this->slide_tilde_04_up,
        this->slide_tilde_04_down,
        this->signals[11],
        n
    );

    this->numbertilde_16_perform(this->signals[8], this->dummyBuffer, n);

    this->filtercoeff_02_perform(
        this->filtercoeff_02_frequency,
        this->filtercoeff_02_gain,
        this->filtercoeff_02_q,
        this->signals[7],
        this->signals[12],
        this->signals[13],
        this->signals[14],
        this->signals[15],
        n
    );

    this->numbertilde_18_perform(this->signals[7], this->dummyBuffer, n);
    this->numbertilde_20_perform(this->signals[12], this->dummyBuffer, n);
    this->numbertilde_22_perform(this->signals[13], this->dummyBuffer, n);
    this->numbertilde_23_perform(this->signals[14], this->dummyBuffer, n);
    this->numbertilde_25_perform(this->signals[15], this->dummyBuffer, n);
    this->linetilde_06_perform(this->signals[16], n);
    this->dspexpr_41_perform(this->signals[10], this->signals[16], this->signals[17], n);
    this->linetilde_07_perform(this->signals[16], n);
    this->dspexpr_45_perform(this->signals[8], this->signals[16], this->signals[18], n);
    this->dspexpr_44_perform(this->signals[17], this->signals[18], this->signals[16], n);
    this->linetilde_08_perform(this->signals[18], n);
    this->linetilde_09_perform(this->signals[17], n);
    this->dspexpr_47_perform(this->signals[10], this->signals[17], this->signals[8], n);

    this->scale_tilde_04_perform(
        this->signals[9],
        this->scale_tilde_04_lowin,
        this->scale_tilde_04_hiin,
        this->scale_tilde_04_lowout,
        this->signals[8],
        this->scale_tilde_04_pow,
        this->signals[17],
        n
    );

    this->linetilde_10_perform(this->signals[8], n);
    this->dspexpr_49_perform(this->signals[11], this->signals[8], this->signals[9], n);
    this->dspexpr_46_perform(this->signals[17], this->signals[9], this->signals[8], n);
    this->dspexpr_43_perform(this->signals[16], this->signals[8], this->signals[9], n);
    this->dspexpr_42_perform(this->signals[9], this->signals[18], this->signals[8], n);
    this->numbertilde_21_perform(this->signals[8], this->dummyBuffer, n);
    this->ip_04_perform(this->signals[18], n);

    this->selector_03_perform(
        this->selector_03_onoff,
        this->signals[18],
        this->signals[5],
        this->signals[9],
        n
    );

    this->scale_tilde_03_perform(
        this->signals[9],
        this->scale_tilde_03_lowin,
        this->scale_tilde_03_hiin,
        this->scale_tilde_03_lowout,
        this->scale_tilde_03_highout,
        this->scale_tilde_03_pow,
        this->signals[5],
        n
    );

    this->numbertilde_19_perform(this->signals[5], this->dummyBuffer, n);

    this->filtercoeff_03_perform(
        this->filtercoeff_03_frequency,
        this->filtercoeff_03_gain,
        this->filtercoeff_03_q,
        this->signals[18],
        this->signals[16],
        this->signals[17],
        this->signals[11],
        this->signals[10],
        n
    );

    this->numbertilde_26_perform(this->signals[18], this->dummyBuffer, n);
    this->numbertilde_29_perform(this->signals[16], this->dummyBuffer, n);
    this->numbertilde_31_perform(this->signals[17], this->dummyBuffer, n);
    this->numbertilde_33_perform(this->signals[11], this->dummyBuffer, n);
    this->numbertilde_35_perform(this->signals[10], this->dummyBuffer, n);

    this->filtercoeff_04_perform(
        this->filtercoeff_04_frequency,
        this->filtercoeff_04_gain,
        this->filtercoeff_04_q,
        this->signals[19],
        this->signals[20],
        this->signals[21],
        this->signals[22],
        this->signals[23],
        n
    );

    this->biquad_tilde_03_perform(
        this->signals[2],
        this->signals[19],
        this->signals[20],
        this->signals[21],
        this->signals[22],
        this->signals[23],
        this->signals[24],
        n
    );

    this->biquad_tilde_02_perform(
        this->signals[24],
        this->signals[18],
        this->signals[16],
        this->signals[17],
        this->signals[11],
        this->signals[10],
        this->signals[2],
        n
    );

    this->gen_02_perform(
        this->signals[2],
        this->signals[8],
        this->gen_02_in3,
        this->signals[7],
        this->signals[12],
        this->signals[13],
        this->signals[14],
        this->signals[15],
        this->signals[9],
        this->signals[10],
        n
    );

    this->dspexpr_39_perform(this->signals[10], this->signals[5], this->signals[9], n);
    this->scopetilde_10_perform(this->signals[9], this->zeroBuffer, n);
    this->dspexpr_38_perform(this->signals[9], this->signals[5], n);
    this->scopetilde_09_perform(this->signals[5], this->zeroBuffer, n);
    this->dspexpr_40_perform(this->signals[5], this->signals[0], this->signals[9], n);
    this->scopetilde_08_perform(this->signals[9], this->zeroBuffer, n);
    this->scopetilde_11_perform(this->signals[2], this->zeroBuffer, n);
    this->numbertilde_27_perform(this->signals[19], this->dummyBuffer, n);
    this->numbertilde_30_perform(this->signals[20], this->dummyBuffer, n);
    this->numbertilde_32_perform(this->signals[21], this->dummyBuffer, n);
    this->numbertilde_34_perform(this->signals[22], this->dummyBuffer, n);
    this->numbertilde_36_perform(this->signals[23], this->dummyBuffer, n);
    this->p_05_perform(n);
    this->linetilde_11_perform(this->signals[23], n);
    this->dspexpr_51_perform(this->signals[6], this->signals[23], this->signals[22], n);
    this->triangle_tilde_03_perform(this->signals[22], this->triangle_tilde_03_duty, this->signals[23], n);
    this->gen_05_perform(this->signals[23], this->gen_05_in2, this->signals[6], n);
    this->scopetilde_13_perform(this->signals[6], this->zeroBuffer, n);

    this->scale_tilde_06_perform(
        this->signals[6],
        this->scale_tilde_06_lowin,
        this->scale_tilde_06_hiin,
        this->scale_tilde_06_lowout,
        this->scale_tilde_06_highout,
        this->scale_tilde_06_pow,
        this->signals[23],
        n
    );

    this->dspexpr_66_perform(this->signals[6], this->dspexpr_66_in2, this->signals[21], n);
    this->numbertilde_48_perform(this->signals[21], this->signals[6], n);

    this->slide_tilde_08_perform(
        this->signals[6],
        this->slide_tilde_08_up,
        this->slide_tilde_08_down,
        this->signals[21],
        n
    );

    this->rate_tilde_02_perform(this->signals[22], this->rate_tilde_02_multiplier, this->signals[6], n);
    this->triangle_tilde_04_perform(this->signals[6], this->triangle_tilde_04_duty, this->signals[22], n);
    this->gen_06_perform(this->signals[22], this->gen_06_in2, this->signals[6], n);

    this->scale_tilde_05_perform(
        this->signals[6],
        this->scale_tilde_05_lowin,
        this->scale_tilde_05_hiin,
        this->scale_tilde_05_lowout,
        this->scale_tilde_05_highout,
        this->scale_tilde_05_pow,
        this->signals[22],
        n
    );

    this->scopetilde_12_perform(this->signals[6], this->zeroBuffer, n);
    this->ip_05_perform(this->signals[6], n);
    this->dspexpr_57_perform(this->signals[23], this->signals[6], this->signals[20], n);
    this->dspexpr_56_perform(this->signals[20], this->dspexpr_56_in2, this->signals[6], n);
    this->numbertilde_38_perform(this->signals[6], this->dummyBuffer, n);

    this->slide_tilde_06_perform(
        this->signals[6],
        this->slide_tilde_06_up,
        this->slide_tilde_06_down,
        this->signals[20],
        n
    );

    this->ip_06_perform(this->signals[6], n);
    this->dspexpr_52_perform(this->signals[22], this->signals[6], this->signals[19], n);
    this->dspexpr_53_perform(this->signals[19], this->dspexpr_53_in2, this->signals[6], n);
    this->numbertilde_37_perform(this->signals[6], this->dummyBuffer, n);

    this->slide_tilde_07_perform(
        this->signals[6],
        this->slide_tilde_07_up,
        this->slide_tilde_07_down,
        this->signals[19],
        n
    );

    this->filtercoeff_05_perform(
        this->filtercoeff_05_frequency,
        this->filtercoeff_05_gain,
        this->filtercoeff_05_q,
        this->signals[22],
        this->signals[2],
        this->signals[5],
        this->signals[10],
        this->signals[15],
        n
    );

    this->numbertilde_40_perform(this->signals[22], this->dummyBuffer, n);
    this->numbertilde_41_perform(this->signals[2], this->dummyBuffer, n);
    this->numbertilde_43_perform(this->signals[5], this->dummyBuffer, n);
    this->numbertilde_44_perform(this->signals[10], this->dummyBuffer, n);
    this->numbertilde_45_perform(this->signals[15], this->dummyBuffer, n);
    this->linetilde_12_perform(this->signals[14], n);
    this->dspexpr_58_perform(this->signals[20], this->signals[14], this->signals[13], n);
    this->linetilde_13_perform(this->signals[14], n);
    this->dspexpr_62_perform(this->signals[19], this->signals[14], this->signals[12], n);
    this->dspexpr_61_perform(this->signals[13], this->signals[12], this->signals[14], n);
    this->linetilde_14_perform(this->signals[12], n);
    this->linetilde_15_perform(this->signals[13], n);
    this->dspexpr_64_perform(this->signals[20], this->signals[13], this->signals[19], n);

    this->scale_tilde_08_perform(
        this->signals[23],
        this->scale_tilde_08_lowin,
        this->scale_tilde_08_hiin,
        this->scale_tilde_08_lowout,
        this->signals[19],
        this->scale_tilde_08_pow,
        this->signals[13],
        n
    );

    this->linetilde_16_perform(this->signals[19], n);
    this->dspexpr_65_perform(this->signals[6], this->signals[19], this->signals[23], n);
    this->dspexpr_63_perform(this->signals[13], this->signals[23], this->signals[19], n);
    this->dspexpr_60_perform(this->signals[14], this->signals[19], this->signals[23], n);
    this->dspexpr_59_perform(this->signals[23], this->signals[12], this->signals[19], n);
    this->numbertilde_42_perform(this->signals[19], this->dummyBuffer, n);
    this->ip_07_perform(this->signals[12], n);

    this->selector_04_perform(
        this->selector_04_onoff,
        this->signals[12],
        this->signals[21],
        this->signals[23],
        n
    );

    this->scale_tilde_07_perform(
        this->signals[23],
        this->scale_tilde_07_lowin,
        this->scale_tilde_07_hiin,
        this->scale_tilde_07_lowout,
        this->scale_tilde_07_highout,
        this->scale_tilde_07_pow,
        this->signals[21],
        n
    );

    this->numbertilde_39_perform(this->signals[21], this->dummyBuffer, n);

    this->filtercoeff_06_perform(
        this->filtercoeff_06_frequency,
        this->filtercoeff_06_gain,
        this->filtercoeff_06_q,
        this->signals[12],
        this->signals[14],
        this->signals[13],
        this->signals[6],
        this->signals[20],
        n
    );

    this->numbertilde_46_perform(this->signals[12], this->dummyBuffer, n);
    this->numbertilde_49_perform(this->signals[14], this->dummyBuffer, n);
    this->numbertilde_51_perform(this->signals[13], this->dummyBuffer, n);
    this->numbertilde_53_perform(this->signals[6], this->dummyBuffer, n);
    this->numbertilde_55_perform(this->signals[20], this->dummyBuffer, n);

    this->filtercoeff_07_perform(
        this->filtercoeff_07_frequency,
        this->filtercoeff_07_gain,
        this->filtercoeff_07_q,
        this->signals[7],
        this->signals[8],
        this->signals[11],
        this->signals[17],
        this->signals[16],
        n
    );

    this->biquad_tilde_05_perform(
        this->signals[3],
        this->signals[7],
        this->signals[8],
        this->signals[11],
        this->signals[17],
        this->signals[16],
        this->signals[18],
        n
    );

    this->biquad_tilde_04_perform(
        this->signals[18],
        this->signals[12],
        this->signals[14],
        this->signals[13],
        this->signals[6],
        this->signals[20],
        this->signals[3],
        n
    );

    this->gen_07_perform(
        this->signals[3],
        this->signals[19],
        this->gen_07_in3,
        this->signals[22],
        this->signals[2],
        this->signals[5],
        this->signals[10],
        this->signals[15],
        this->signals[23],
        this->signals[20],
        n
    );

    this->dspexpr_55_perform(this->signals[20], this->signals[21], this->signals[23], n);
    this->dspexpr_54_perform(this->signals[23], this->signals[21], n);
    this->dspexpr_48_perform(this->signals[21], this->signals[0], this->signals[23], n);

    this->p_02_perform(
        this->signals[9],
        this->signals[23],
        this->signals[0],
        this->signals[21],
        n
    );

    this->dspexpr_29_perform(this->signals[0], this->signals[1], this->signals[23], n);
    this->dspexpr_27_perform(in1, this->signals[23], this->signals[9], n);
    this->dspexpr_26_perform(this->signals[9], this->signals[4], this->signals[23], n);
    this->selector_01_perform(this->selector_01_onoff, this->signals[23], this->signals[0], out1, n);
    this->dspexpr_32_perform(this->signals[21], this->signals[1], this->signals[0], n);
    this->dspexpr_31_perform(in2, this->signals[0], this->signals[1], n);
    this->dspexpr_30_perform(this->signals[1], this->signals[4], this->signals[0], n);
    this->selector_02_perform(this->selector_02_onoff, this->signals[0], this->signals[21], out2, n);
    this->scopetilde_07_perform(this->signals[21], this->zeroBuffer, n);
    this->numbertilde_47_perform(this->signals[7], this->dummyBuffer, n);
    this->numbertilde_50_perform(this->signals[8], this->dummyBuffer, n);
    this->numbertilde_52_perform(this->signals[11], this->dummyBuffer, n);
    this->numbertilde_54_perform(this->signals[17], this->dummyBuffer, n);
    this->numbertilde_56_perform(this->signals[16], this->dummyBuffer, n);
    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 25; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->ip_01_sigbuf = resizeSignal(this->ip_01_sigbuf, this->maxvs, maxBlockSize);
        this->phasor_01_sigbuf = resizeSignal(this->phasor_01_sigbuf, this->maxvs, maxBlockSize);
        this->ip_02_sigbuf = resizeSignal(this->ip_02_sigbuf, this->maxvs, maxBlockSize);
        this->ip_03_sigbuf = resizeSignal(this->ip_03_sigbuf, this->maxvs, maxBlockSize);
        this->ip_04_sigbuf = resizeSignal(this->ip_04_sigbuf, this->maxvs, maxBlockSize);
        this->ip_05_sigbuf = resizeSignal(this->ip_05_sigbuf, this->maxvs, maxBlockSize);
        this->ip_06_sigbuf = resizeSignal(this->ip_06_sigbuf, this->maxvs, maxBlockSize);
        this->ip_07_sigbuf = resizeSignal(this->ip_07_sigbuf, this->maxvs, maxBlockSize);
        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->limi_03_dspsetup(forceDSPSetup);
    this->limi_04_dspsetup(forceDSPSetup);
    this->numbertilde_24_dspsetup(forceDSPSetup);
    this->numbertilde_14_dspsetup(forceDSPSetup);
    this->ip_01_dspsetup(forceDSPSetup);
    this->phasor_01_dspsetup(forceDSPSetup);
    this->rate_tilde_01_dspsetup(forceDSPSetup);
    this->scopetilde_05_dspsetup(forceDSPSetup);
    this->numbertilde_15_dspsetup(forceDSPSetup);
    this->numbertilde_28_dspsetup(forceDSPSetup);
    this->scopetilde_06_dspsetup(forceDSPSetup);
    this->ip_02_dspsetup(forceDSPSetup);
    this->numbertilde_17_dspsetup(forceDSPSetup);
    this->ip_03_dspsetup(forceDSPSetup);
    this->numbertilde_16_dspsetup(forceDSPSetup);
    this->filtercoeff_02_dspsetup(forceDSPSetup);
    this->numbertilde_18_dspsetup(forceDSPSetup);
    this->numbertilde_20_dspsetup(forceDSPSetup);
    this->numbertilde_22_dspsetup(forceDSPSetup);
    this->numbertilde_23_dspsetup(forceDSPSetup);
    this->numbertilde_25_dspsetup(forceDSPSetup);
    this->numbertilde_21_dspsetup(forceDSPSetup);
    this->ip_04_dspsetup(forceDSPSetup);
    this->numbertilde_19_dspsetup(forceDSPSetup);
    this->filtercoeff_03_dspsetup(forceDSPSetup);
    this->numbertilde_26_dspsetup(forceDSPSetup);
    this->numbertilde_29_dspsetup(forceDSPSetup);
    this->numbertilde_31_dspsetup(forceDSPSetup);
    this->numbertilde_33_dspsetup(forceDSPSetup);
    this->numbertilde_35_dspsetup(forceDSPSetup);
    this->filtercoeff_04_dspsetup(forceDSPSetup);
    this->biquad_tilde_03_dspsetup(forceDSPSetup);
    this->biquad_tilde_02_dspsetup(forceDSPSetup);
    this->gen_02_dspsetup(forceDSPSetup);
    this->scopetilde_10_dspsetup(forceDSPSetup);
    this->scopetilde_09_dspsetup(forceDSPSetup);
    this->scopetilde_08_dspsetup(forceDSPSetup);
    this->scopetilde_11_dspsetup(forceDSPSetup);
    this->numbertilde_27_dspsetup(forceDSPSetup);
    this->numbertilde_30_dspsetup(forceDSPSetup);
    this->numbertilde_32_dspsetup(forceDSPSetup);
    this->numbertilde_34_dspsetup(forceDSPSetup);
    this->numbertilde_36_dspsetup(forceDSPSetup);
    this->scopetilde_13_dspsetup(forceDSPSetup);
    this->numbertilde_48_dspsetup(forceDSPSetup);
    this->rate_tilde_02_dspsetup(forceDSPSetup);
    this->scopetilde_12_dspsetup(forceDSPSetup);
    this->ip_05_dspsetup(forceDSPSetup);
    this->numbertilde_38_dspsetup(forceDSPSetup);
    this->ip_06_dspsetup(forceDSPSetup);
    this->numbertilde_37_dspsetup(forceDSPSetup);
    this->filtercoeff_05_dspsetup(forceDSPSetup);
    this->numbertilde_40_dspsetup(forceDSPSetup);
    this->numbertilde_41_dspsetup(forceDSPSetup);
    this->numbertilde_43_dspsetup(forceDSPSetup);
    this->numbertilde_44_dspsetup(forceDSPSetup);
    this->numbertilde_45_dspsetup(forceDSPSetup);
    this->numbertilde_42_dspsetup(forceDSPSetup);
    this->ip_07_dspsetup(forceDSPSetup);
    this->numbertilde_39_dspsetup(forceDSPSetup);
    this->filtercoeff_06_dspsetup(forceDSPSetup);
    this->numbertilde_46_dspsetup(forceDSPSetup);
    this->numbertilde_49_dspsetup(forceDSPSetup);
    this->numbertilde_51_dspsetup(forceDSPSetup);
    this->numbertilde_53_dspsetup(forceDSPSetup);
    this->numbertilde_55_dspsetup(forceDSPSetup);
    this->filtercoeff_07_dspsetup(forceDSPSetup);
    this->biquad_tilde_05_dspsetup(forceDSPSetup);
    this->biquad_tilde_04_dspsetup(forceDSPSetup);
    this->gen_07_dspsetup(forceDSPSetup);
    this->scopetilde_07_dspsetup(forceDSPSetup);
    this->numbertilde_47_dspsetup(forceDSPSetup);
    this->numbertilde_50_dspsetup(forceDSPSetup);
    this->numbertilde_52_dspsetup(forceDSPSetup);
    this->numbertilde_54_dspsetup(forceDSPSetup);
    this->numbertilde_56_dspsetup(forceDSPSetup);
    this->globaltransport_dspsetup(forceDSPSetup);
    this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_05->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        {
        this->setProbingIndex(-1);
        break;
        }
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    case 0:
        {
        return addressOf(this->RNBODefaultSinus);
        break;
        }
    case 1:
        {
        return addressOf(this->gen_02_delay_1_bufferobj);
        break;
        }
    case 2:
        {
        return addressOf(this->gen_07_delay_1_bufferobj);
        break;
        }
    default:
        {
        return nullptr;
        }
    }
}

DataRefIndex getNumDataRefs() const {
    return 3;
}

void fillRNBODefaultSinus(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        buffer[i] = rnbo_cos(i * 3.14159265358979323846 * 2. / bufsize);
    }
}

void fillDataRef(DataRefIndex index, DataRef& ref) {
    switch (index) {
    case 0:
        {
        this->fillRNBODefaultSinus(ref);
        break;
        }
    }
}

void zeroDataRef(DataRef& ref) {
    ref->setZero();
}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->updateTime(time);

    if (index == 1) {
        this->gen_02_delay_1_buffer = new Float64Buffer(this->gen_02_delay_1_bufferobj);
    }

    if (index == 2) {
        this->gen_07_delay_1_buffer = new Float64Buffer(this->gen_07_delay_1_bufferobj);
    }

    this->p_01->processDataViewUpdate(index, time);
    this->p_02->processDataViewUpdate(index, time);
    this->p_03->processDataViewUpdate(index, time);
    this->p_04->processDataViewUpdate(index, time);
    this->p_05->processDataViewUpdate(index, time);
}

void initialize() {
    this->RNBODefaultSinus = initDataRef("RNBODefaultSinus", true, nullptr, "buffer~");
    this->gen_02_delay_1_bufferobj = initDataRef("gen_02_delay_1_bufferobj", true, nullptr, "buffer~");
    this->gen_07_delay_1_bufferobj = initDataRef("gen_07_delay_1_bufferobj", true, nullptr, "buffer~");
    this->assign_defaults();
    this->setState();
    this->RNBODefaultSinus->setIndex(0);
    this->gen_02_delay_1_bufferobj->setIndex(1);
    this->gen_02_delay_1_buffer = new Float64Buffer(this->gen_02_delay_1_bufferobj);
    this->gen_07_delay_1_bufferobj->setIndex(2);
    this->gen_07_delay_1_buffer = new Float64Buffer(this->gen_07_delay_1_bufferobj);
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

void onSampleRateChanged(double samplerate) {
    this->timevalue_01_onSampleRateChanged(samplerate);
}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(this->_currentTime, tempo, false)) {
        this->p_01->processTempoEvent(time, tempo);
        this->p_02->processTempoEvent(time, tempo);
        this->p_03->processTempoEvent(time, tempo);
        this->p_04->processTempoEvent(time, tempo);
        this->p_05->processTempoEvent(time, tempo);
        this->transport_01_onTempoChanged(tempo);
        this->timevalue_01_onTempoChanged(tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(this->_currentTime, state, false)) {
        this->p_01->processTransportEvent(time, state);
        this->p_02->processTransportEvent(time, state);
        this->p_03->processTransportEvent(time, state);
        this->p_04->processTransportEvent(time, state);
        this->p_05->processTransportEvent(time, state);
        this->transport_01_onTransportChanged(state);
        this->metro_01_onTransportChanged(state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(this->_currentTime, beattime, false)) {
        this->p_01->processBeatTimeEvent(time, beattime);
        this->p_02->processBeatTimeEvent(time, beattime);
        this->p_03->processBeatTimeEvent(time, beattime);
        this->p_04->processBeatTimeEvent(time, beattime);
        this->p_05->processBeatTimeEvent(time, beattime);
        this->metro_01_onBeatTimeChanged(beattime);
    }
}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(this->_currentTime, numerator, denominator, false)) {
        this->p_01->processTimeSignatureEvent(time, numerator, denominator);
        this->p_02->processTimeSignatureEvent(time, numerator, denominator);
        this->p_03->processTimeSignatureEvent(time, numerator, denominator);
        this->p_04->processTimeSignatureEvent(time, numerator, denominator);
        this->p_05->processTimeSignatureEvent(time, numerator, denominator);
        this->transport_01_onTimeSignatureChanged(numerator, denominator);
        this->timevalue_01_onTimeSignatureChanged(numerator, denominator);
    }
}

void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
    this->updateTime(time);

    if (this->globaltransport_setBBU(this->_currentTime, bars, beats, units, false)) {
        this->p_01->processBBUEvent(time, bars, beats, units);
        this->p_02->processBBUEvent(time, bars, beats, units);
        this->p_03->processBBUEvent(time, bars, beats, units);
        this->p_04->processBBUEvent(time, bars, beats, units);
        this->p_05->processBBUEvent(time, bars, beats, units);
    }
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->p_01 = new RNBOSubpatcher_06();
    this->p_01->setEngineAndPatcher(this->getEngine(), this);
    this->p_01->initialize();
    this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
    this->p_02 = new RNBOSubpatcher_07();
    this->p_02->setEngineAndPatcher(this->getEngine(), this);
    this->p_02->initialize();
    this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
    this->p_03 = new RNBOSubpatcher_08();
    this->p_03->setEngineAndPatcher(this->getEngine(), this);
    this->p_03->initialize();
    this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
    this->p_04 = new RNBOSubpatcher_09();
    this->p_04->setEngineAndPatcher(this->getEngine(), this);
    this->p_04->initialize();
    this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));
    this->p_05 = new RNBOSubpatcher_10();
    this->p_05->setEngineAndPatcher(this->getEngine(), this);
    this->p_05->initialize();
    this->p_05->setParameterOffset(this->getParameterOffset(this->p_05));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_01_getPresetValue(getSubState(preset, "Speed"));
    this->param_02_getPresetValue(getSubState(preset, "Depth"));
    this->param_03_getPresetValue(getSubState(preset, "Position"));
    this->numberobj_20_getPresetValue(getSubState(preset, "numberobj_20"));
    this->param_04_getPresetValue(getSubState(preset, "Offset"));
    this->param_05_getPresetValue(getSubState(preset, "Color"));
    this->param_06_getPresetValue(getSubState(preset, "Gainreduction"));
    this->param_07_getPresetValue(getSubState(preset, "Feedback"));
    this->numberobj_32_getPresetValue(getSubState(preset, "numberobj_32"));
    this->param_08_getPresetValue(getSubState(preset, "Tempo"));
    this->param_09_getPresetValue(getSubState(preset, "Spread"));
    this->param_10_getPresetValue(getSubState(preset, "Rates"));
    this->param_11_getPresetValue(getSubState(preset, "Compression"));
    this->param_12_getPresetValue(getSubState(preset, "Gain"));
    this->param_13_getPresetValue(getSubState(preset, "Mix"));
    this->param_14_getPresetValue(getSubState(preset, "Wet"));
    this->numberobj_49_getPresetValue(getSubState(preset, "numberobj_49"));
    this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "Random"));
    this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "Volume&Clip~"));
    this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "DataSwitch"));
    this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "Compression~"));
    this->p_05->getPreset(getSubState(getSubState(preset, "__sps"), "Tempo[1]"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_01_setPresetValue(getSubState(preset, "Speed"));
    this->param_02_setPresetValue(getSubState(preset, "Depth"));
    this->param_03_setPresetValue(getSubState(preset, "Position"));
    this->numberobj_20_setPresetValue(getSubState(preset, "numberobj_20"));
    this->param_04_setPresetValue(getSubState(preset, "Offset"));
    this->param_05_setPresetValue(getSubState(preset, "Color"));
    this->param_06_setPresetValue(getSubState(preset, "Gainreduction"));
    this->param_07_setPresetValue(getSubState(preset, "Feedback"));
    this->numberobj_32_setPresetValue(getSubState(preset, "numberobj_32"));
    this->param_08_setPresetValue(getSubState(preset, "Tempo"));
    this->param_09_setPresetValue(getSubState(preset, "Spread"));
    this->param_10_setPresetValue(getSubState(preset, "Rates"));
    this->param_13_setPresetValue(getSubState(preset, "Mix"));
    this->param_14_setPresetValue(getSubState(preset, "Wet"));
    this->param_11_setPresetValue(getSubState(preset, "Compression"));
    this->param_12_setPresetValue(getSubState(preset, "Gain"));
    this->numberobj_49_setPresetValue(getSubState(preset, "numberobj_49"));
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        {
        this->param_01_value_set(v);
        break;
        }
    case 1:
        {
        this->param_02_value_set(v);
        break;
        }
    case 2:
        {
        this->param_03_value_set(v);
        break;
        }
    case 3:
        {
        this->param_04_value_set(v);
        break;
        }
    case 4:
        {
        this->param_05_value_set(v);
        break;
        }
    case 5:
        {
        this->param_06_value_set(v);
        break;
        }
    case 6:
        {
        this->param_07_value_set(v);
        break;
        }
    case 7:
        {
        this->param_08_value_set(v);
        break;
        }
    case 8:
        {
        this->param_09_value_set(v);
        break;
        }
    case 9:
        {
        this->param_10_value_set(v);
        break;
        }
    case 10:
        {
        this->param_11_value_set(v);
        break;
        }
    case 11:
        {
        this->param_12_value_set(v);
        break;
        }
    case 12:
        {
        this->param_13_value_set(v);
        break;
        }
    case 13:
        {
        this->param_14_value_set(v);
        break;
        }
    default:
        {
        index -= 14;

        if (index < this->p_01->getNumParameters())
            this->p_01->setParameterValue(index, v, time);

        index -= this->p_01->getNumParameters();

        if (index < this->p_02->getNumParameters())
            this->p_02->setParameterValue(index, v, time);

        index -= this->p_02->getNumParameters();

        if (index < this->p_03->getNumParameters())
            this->p_03->setParameterValue(index, v, time);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            this->p_04->setParameterValue(index, v, time);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05->getNumParameters())
            this->p_05->setParameterValue(index, v, time);

        break;
        }
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
    this->setParameterValue(index, this->getParameterValue(index), time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        {
        return this->param_01_value;
        }
    case 1:
        {
        return this->param_02_value;
        }
    case 2:
        {
        return this->param_03_value;
        }
    case 3:
        {
        return this->param_04_value;
        }
    case 4:
        {
        return this->param_05_value;
        }
    case 5:
        {
        return this->param_06_value;
        }
    case 6:
        {
        return this->param_07_value;
        }
    case 7:
        {
        return this->param_08_value;
        }
    case 8:
        {
        return this->param_09_value;
        }
    case 9:
        {
        return this->param_10_value;
        }
    case 10:
        {
        return this->param_11_value;
        }
    case 11:
        {
        return this->param_12_value;
        }
    case 12:
        {
        return this->param_13_value;
        }
    case 13:
        {
        return this->param_14_value;
        }
    default:
        {
        index -= 14;

        if (index < this->p_01->getNumParameters())
            return this->p_01->getParameterValue(index);

        index -= this->p_01->getNumParameters();

        if (index < this->p_02->getNumParameters())
            return this->p_02->getParameterValue(index);

        index -= this->p_02->getNumParameters();

        if (index < this->p_03->getNumParameters())
            return this->p_03->getParameterValue(index);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->getParameterValue(index);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05->getNumParameters())
            return this->p_05->getParameterValue(index);

        return 0;
        }
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 14 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters() + this->p_05->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "Speed";
        }
    case 1:
        {
        return "Depth";
        }
    case 2:
        {
        return "Position";
        }
    case 3:
        {
        return "Offset";
        }
    case 4:
        {
        return "Color";
        }
    case 5:
        {
        return "Gainreduction";
        }
    case 6:
        {
        return "Feedback";
        }
    case 7:
        {
        return "Tempo";
        }
    case 8:
        {
        return "Spread";
        }
    case 9:
        {
        return "Rates";
        }
    case 10:
        {
        return "Compression";
        }
    case 11:
        {
        return "Gain";
        }
    case 12:
        {
        return "Mix";
        }
    case 13:
        {
        return "Wet";
        }
    default:
        {
        index -= 14;

        if (index < this->p_01->getNumParameters())
            return this->p_01->getParameterName(index);

        index -= this->p_01->getNumParameters();

        if (index < this->p_02->getNumParameters())
            return this->p_02->getParameterName(index);

        index -= this->p_02->getNumParameters();

        if (index < this->p_03->getNumParameters())
            return this->p_03->getParameterName(index);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->getParameterName(index);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05->getNumParameters())
            return this->p_05->getParameterName(index);

        return "bogus";
        }
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "Speed";
        }
    case 1:
        {
        return "Depth";
        }
    case 2:
        {
        return "Position";
        }
    case 3:
        {
        return "Offset";
        }
    case 4:
        {
        return "Color";
        }
    case 5:
        {
        return "Gainreduction";
        }
    case 6:
        {
        return "Feedback";
        }
    case 7:
        {
        return "Tempo";
        }
    case 8:
        {
        return "Spread";
        }
    case 9:
        {
        return "Rates";
        }
    case 10:
        {
        return "Compression";
        }
    case 11:
        {
        return "Gain";
        }
    case 12:
        {
        return "Mix";
        }
    case 13:
        {
        return "Wet";
        }
    default:
        {
        index -= 14;

        if (index < this->p_01->getNumParameters())
            return this->p_01->getParameterId(index);

        index -= this->p_01->getNumParameters();

        if (index < this->p_02->getNumParameters())
            return this->p_02->getParameterId(index);

        index -= this->p_02->getNumParameters();

        if (index < this->p_03->getNumParameters())
            return this->p_03->getParameterId(index);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->getParameterId(index);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05->getNumParameters())
            return this->p_05->getParameterId(index);

        return "bogus";
        }
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.5;
            info->min = 0.01;
            info->max = 100;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 1:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.1;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 2:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.05;
            info->min = 0.05;
            info->max = 10;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 3:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.1;
            info->min = 0;
            info->max = 20;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 4:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1000;
            info->min = 270;
            info->max = 5000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "ColorHz 270->OFF";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 5:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -60;
            info->max = 0;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 6:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.5;
            info->min = -0.95;
            info->max = 0.95;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 7:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 20;
            info->max = 300;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 8:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 9:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 1;
            info->max = 7;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 10:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 25;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 11:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 10;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Gain";
            info->unit = "dB";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 12:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.5;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 13:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 1;
            info->max = 2;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        default:
            {
            index -= 14;

            if (index < this->p_01->getNumParameters())
                this->p_01->getParameterInfo(index, info);

            index -= this->p_01->getNumParameters();

            if (index < this->p_02->getNumParameters())
                this->p_02->getParameterInfo(index, info);

            index -= this->p_02->getNumParameters();

            if (index < this->p_03->getNumParameters())
                this->p_03->getParameterInfo(index, info);

            index -= this->p_03->getNumParameters();

            if (index < this->p_04->getNumParameters())
                this->p_04->getParameterInfo(index, info);

            index -= this->p_04->getNumParameters();

            if (index < this->p_05->getNumParameters())
                this->p_05->getParameterInfo(index, info);

            break;
            }
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->p_01)
        return 14;

    if (subpatcher == this->p_02)
        return 14 + this->p_01->getNumParameters();

    if (subpatcher == this->p_03)
        return 14 + this->p_01->getNumParameters() + this->p_02->getNumParameters();

    if (subpatcher == this->p_04)
        return 14 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters();

    if (subpatcher == this->p_05)
        return 14 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 1:
    case 8:
    case 12:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);
            return normalizedValue;
        }
        }
    case 11:
        {
        {
            value = (value < 0 ? 0 : (value > 10 ? 10 : value));
            ParameterValue normalizedValue = (value - 0) / (10 - 0);
            return normalizedValue;
        }
        }
    case 3:
        {
        {
            value = (value < 0 ? 0 : (value > 20 ? 20 : value));
            ParameterValue normalizedValue = (value - 0) / (20 - 0);
            return normalizedValue;
        }
        }
    case 10:
        {
        {
            value = (value < 0 ? 0 : (value > 100 ? 100 : value));
            ParameterValue normalizedValue = (value - 0) / (100 - 0);
            return normalizedValue;
        }
        }
    case 13:
        {
        {
            value = (value < 1 ? 1 : (value > 2 ? 2 : value));
            ParameterValue normalizedValue = (value - 1) / (2 - 1);
            return normalizedValue;
        }
        }
    case 9:
        {
        {
            value = (value < 1 ? 1 : (value > 7 ? 7 : value));
            ParameterValue normalizedValue = (value - 1) / (7 - 1);
            return normalizedValue;
        }
        }
    case 7:
        {
        {
            value = (value < 20 ? 20 : (value > 300 ? 300 : value));
            ParameterValue normalizedValue = (value - 20) / (300 - 20);
            return normalizedValue;
        }
        }
    case 4:
        {
        {
            value = (value < 270 ? 270 : (value > 5000 ? 5000 : value));
            ParameterValue normalizedValue = (value - 270) / (5000 - 270);
            return normalizedValue;
        }
        }
    case 0:
        {
        {
            value = (value < 0.01 ? 0.01 : (value > 100 ? 100 : value));
            ParameterValue normalizedValue = (value - 0.01) / (100 - 0.01);
            return normalizedValue;
        }
        }
    case 2:
        {
        {
            value = (value < 0.05 ? 0.05 : (value > 10 ? 10 : value));
            ParameterValue normalizedValue = (value - 0.05) / (10 - 0.05);
            return normalizedValue;
        }
        }
    case 5:
        {
        {
            value = (value < -60 ? -60 : (value > 0 ? 0 : value));
            ParameterValue normalizedValue = (value - -60) / (0 - -60);
            return normalizedValue;
        }
        }
    case 6:
        {
        {
            value = (value < -0.95 ? -0.95 : (value > 0.95 ? 0.95 : value));
            ParameterValue normalizedValue = (value - -0.95) / (0.95 - -0.95);
            return normalizedValue;
        }
        }
    default:
        {
        index -= 14;

        if (index < this->p_01->getNumParameters())
            return this->p_01->convertToNormalizedParameterValue(index, value);

        index -= this->p_01->getNumParameters();

        if (index < this->p_02->getNumParameters())
            return this->p_02->convertToNormalizedParameterValue(index, value);

        index -= this->p_02->getNumParameters();

        if (index < this->p_03->getNumParameters())
            return this->p_03->convertToNormalizedParameterValue(index, value);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->convertToNormalizedParameterValue(index, value);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05->getNumParameters())
            return this->p_05->convertToNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 1:
    case 8:
    case 12:
        {
        {
            {
                return 0 + value * (1 - 0);
            }
        }
        }
    case 11:
        {
        {
            {
                return 0 + value * (10 - 0);
            }
        }
        }
    case 3:
        {
        {
            {
                return 0 + value * (20 - 0);
            }
        }
        }
    case 10:
        {
        {
            {
                return 0 + value * (100 - 0);
            }
        }
        }
    case 13:
        {
        {
            {
                return 1 + value * (2 - 1);
            }
        }
        }
    case 9:
        {
        {
            {
                return 1 + value * (7 - 1);
            }
        }
        }
    case 7:
        {
        {
            {
                return 20 + value * (300 - 20);
            }
        }
        }
    case 4:
        {
        {
            {
                return 270 + value * (5000 - 270);
            }
        }
        }
    case 0:
        {
        {
            {
                return 0.01 + value * (100 - 0.01);
            }
        }
        }
    case 2:
        {
        {
            {
                return 0.05 + value * (10 - 0.05);
            }
        }
        }
    case 5:
        {
        {
            {
                return -60 + value * (0 - -60);
            }
        }
        }
    case 6:
        {
        {
            {
                return -0.95 + value * (0.95 - -0.95);
            }
        }
        }
    default:
        {
        index -= 14;

        if (index < this->p_01->getNumParameters())
            return this->p_01->convertFromNormalizedParameterValue(index, value);

        index -= this->p_01->getNumParameters();

        if (index < this->p_02->getNumParameters())
            return this->p_02->convertFromNormalizedParameterValue(index, value);

        index -= this->p_02->getNumParameters();

        if (index < this->p_03->getNumParameters())
            return this->p_03->convertFromNormalizedParameterValue(index, value);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->convertFromNormalizedParameterValue(index, value);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05->getNumParameters())
            return this->p_05->convertFromNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        return this->param_01_value_constrain(value);
        }
    case 1:
        {
        return this->param_02_value_constrain(value);
        }
    case 2:
        {
        return this->param_03_value_constrain(value);
        }
    case 3:
        {
        return this->param_04_value_constrain(value);
        }
    case 4:
        {
        return this->param_05_value_constrain(value);
        }
    case 5:
        {
        return this->param_06_value_constrain(value);
        }
    case 6:
        {
        return this->param_07_value_constrain(value);
        }
    case 7:
        {
        return this->param_08_value_constrain(value);
        }
    case 8:
        {
        return this->param_09_value_constrain(value);
        }
    case 9:
        {
        return this->param_10_value_constrain(value);
        }
    case 10:
        {
        return this->param_11_value_constrain(value);
        }
    case 11:
        {
        return this->param_12_value_constrain(value);
        }
    case 12:
        {
        return this->param_13_value_constrain(value);
        }
    case 13:
        {
        return this->param_14_value_constrain(value);
        }
    default:
        {
        index -= 14;

        if (index < this->p_01->getNumParameters())
            return this->p_01->constrainParameterValue(index, value);

        index -= this->p_01->getNumParameters();

        if (index < this->p_02->getNumParameters())
            return this->p_02->constrainParameterValue(index, value);

        index -= this->p_02->getNumParameters();

        if (index < this->p_03->getNumParameters())
            return this->p_03->constrainParameterValue(index, value);

        index -= this->p_03->getNumParameters();

        if (index < this->p_04->getNumParameters())
            return this->p_04->constrainParameterValue(index, value);

        index -= this->p_04->getNumParameters();

        if (index < this->p_05->getNumParameters())
            return this->p_05->constrainParameterValue(index, value);

        return value;
        }
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterBang(this->paramInitIndices[i], 0);
    }
}

void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
    RNBO_UNUSED(hasValue);
    this->updateTime(time);

    switch (index) {
    case 1673828112:
        {
        this->loadbang_07_startupbang_bang();
        break;
        }
    case -1541126581:
        {
        this->loadbang_08_startupbang_bang();
        break;
        }
    case -894149362:
        {
        this->loadbang_09_startupbang_bang();
        break;
        }
    case -1357044121:
        {
        this->delay_01_out_bang();
        break;
        }
    case 1912853063:
        {
        this->loadbang_10_startupbang_bang();
        break;
        }
    case 185863241:
        {
        this->loadbang_11_startupbang_bang();
        break;
        }
    case 1935387534:
        {
        this->metro_01_tick_bang();
        break;
        }
    case -1735137014:
        {
        this->loadbang_12_startupbang_bang();
        break;
        }
    case 832840460:
        {
        this->loadbang_13_startupbang_bang();
        break;
        }
    case -677631670:
        {
        this->loadbang_14_startupbang_bang();
        break;
        }
    case -1757644273:
        {
        this->loadbang_15_startupbang_bang();
        break;
        }
    case -30654451:
        {
        this->loadbang_16_startupbang_bang();
        break;
        }
    case 1049358152:
        {
        this->loadbang_17_startupbang_bang();
        break;
        }
    case 810333201:
        {
        this->loadbang_18_startupbang_bang();
        break;
        }
    case 1696335371:
        {
        this->loadbang_19_startupbang_bang();
        break;
        }
    case -871642103:
        {
        this->loadbang_20_startupbang_bang();
        break;
        }
    case -1494586265:
        {
        this->numbertilde_24_value_set(value);
        break;
        }
    case -62043057:
        {
        this->linetilde_04_target_bang();
        break;
        }
    case 1396722025:
        {
        this->numbertilde_14_value_set(value);
        break;
        }
    case -1621164530:
        {
        this->linetilde_05_target_bang();
        break;
        }
    case 2098551528:
        {
        this->numbertilde_15_value_set(value);
        break;
        }
    case 1169787369:
        {
        this->numbertilde_28_value_set(value);
        break;
        }
    case 157032932:
        {
        this->numbertilde_17_value_set(value);
        break;
        }
    case -1876983388:
        {
        this->numbertilde_16_value_set(value);
        break;
        }
    case -935701140:
        {
        this->numbertilde_18_value_set(value);
        break;
        }
    case -1637530643:
        {
        this->numbertilde_20_value_set(value);
        break;
        }
    case -1175153885:
        {
        this->numbertilde_22_value_set(value);
        break;
        }
    case -233871637:
        {
        this->numbertilde_23_value_set(value);
        break;
        }
    case 467957866:
        {
        this->numbertilde_25_value_set(value);
        break;
        }
    case 743790737:
        {
        this->linetilde_06_target_bang();
        break;
        }
    case -815330736:
        {
        this->linetilde_07_target_bang();
        break;
        }
    case 349887047:
        {
        this->linetilde_08_target_bang();
        break;
        }
    case 361393614:
        {
        this->linetilde_09_target_bang();
        break;
        }
    case 1920515087:
        {
        this->linetilde_10_target_bang();
        break;
        }
    case -544796571:
        {
        this->numbertilde_21_value_set(value);
        break;
        }
    case 1871616872:
        {
        this->numbertilde_19_value_set(value);
        break;
        }
    case 312495399:
        {
        this->numbertilde_26_value_set(value);
        break;
        }
    case -389334104:
        {
        this->numbertilde_29_value_set(value);
        break;
        }
    case -1091163607:
        {
        this->numbertilde_31_value_set(value);
        break;
        }
    case 1014324902:
        {
        this->numbertilde_33_value_set(value);
        break;
        }
    case 1716154405:
        {
        this->numbertilde_35_value_set(value);
        break;
        }
    case 1098315180:
        {
        this->numbertilde_27_value_set(value);
        break;
        }
    case 1560691938:
        {
        this->numbertilde_30_value_set(value);
        break;
        }
    case 858862435:
        {
        this->numbertilde_32_value_set(value);
        break;
        }
    case 1800144683:
        {
        this->numbertilde_34_value_set(value);
        break;
        }
    case -1792993110:
        {
        this->numbertilde_36_value_set(value);
        break;
        }
    case 1114681293:
        {
        this->linetilde_11_target_bang();
        break;
        }
    case -6936981:
        {
        this->numbertilde_48_value_set(value);
        break;
        }
    case -1019691418:
        {
        this->numbertilde_38_value_set(value);
        break;
        }
    case 1241259558:
        {
        this->numbertilde_37_value_set(value);
        break;
        }
    case -2112425490:
        {
        this->numbertilde_40_value_set(value);
        break;
        }
    case 1480712303:
        {
        this->numbertilde_41_value_set(value);
        break;
        }
    case 1943089061:
        {
        this->numbertilde_43_value_set(value);
        break;
        }
    case -1410595987:
        {
        this->numbertilde_44_value_set(value);
        break;
        }
    case -708766484:
        {
        this->numbertilde_45_value_set(value);
        break;
        }
    case -2003561653:
        {
        this->linetilde_12_target_bang();
        break;
        }
    case 732284170:
        {
        this->linetilde_13_target_bang();
        break;
        }
    case -444440180:
        {
        this->linetilde_14_target_bang();
        break;
        }
    case 1909008520:
        {
        this->linetilde_15_target_bang();
        break;
        }
    case -826837303:
        {
        this->linetilde_16_target_bang();
        break;
        }
    case -1721520921:
        {
        this->numbertilde_42_value_set(value);
        break;
        }
    case 694892522:
        {
        this->numbertilde_39_value_set(value);
        break;
        }
    case -864228951:
        {
        this->numbertilde_46_value_set(value);
        break;
        }
    case -1566058454:
        {
        this->numbertilde_49_value_set(value);
        break;
        }
    case 2027079339:
        {
        this->numbertilde_51_value_set(value);
        break;
        }
    case -162399448:
        {
        this->numbertilde_53_value_set(value);
        break;
        }
    case 539430055:
        {
        this->numbertilde_55_value_set(value);
        break;
        }
    case -78409170:
        {
        this->numbertilde_47_value_set(value);
        break;
        }
    case 383967588:
        {
        this->numbertilde_50_value_set(value);
        break;
        }
    case -317861915:
        {
        this->numbertilde_52_value_set(value);
        break;
        }
    case 623420333:
        {
        this->numbertilde_54_value_set(value);
        break;
        }
    case 1325249836:
        {
        this->numbertilde_56_value_set(value);
        break;
        }
    }
}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-246") == objectId)
            this->message_09_listin_number_set(payload);

        if (TAG("message_obj-154") == objectId)
            this->message_10_listin_number_set(payload);

        if (TAG("message_obj-122") == objectId)
            this->message_11_listin_number_set(payload);

        if (TAG("message_obj-164") == objectId)
            this->message_12_listin_number_set(payload);

        if (TAG("message_obj-49") == objectId)
            this->message_13_listin_number_set(payload);

        if (TAG("message_obj-50") == objectId)
            this->message_14_listin_number_set(payload);

        if (TAG("message_obj-145") == objectId)
            this->message_15_listin_number_set(payload);

        if (TAG("message_obj-137") == objectId)
            this->message_16_listin_number_set(payload);

        if (TAG("message_obj-242") == objectId)
            this->message_17_listin_number_set(payload);

        if (TAG("message_obj-233") == objectId)
            this->message_18_listin_number_set(payload);

        if (TAG("message_obj-186") == objectId)
            this->message_19_listin_number_set(payload);

        if (TAG("message_obj-177") == objectId)
            this->message_20_listin_number_set(payload);

        if (TAG("message_obj-253") == objectId)
            this->message_21_listin_number_set(payload);

        if (TAG("message_obj-135") == objectId)
            this->message_22_listin_number_set(payload);

        if (TAG("message_obj-161") == objectId)
            this->message_23_listin_number_set(payload);

        if (TAG("message_obj-175") == objectId)
            this->message_24_listin_number_set(payload);

        if (TAG("message_obj-361") == objectId)
            this->message_25_listin_number_set(payload);

        if (TAG("message_obj-360") == objectId)
            this->message_26_listin_number_set(payload);

        if (TAG("message_obj-141") == objectId)
            this->message_27_listin_number_set(payload);

        if (TAG("message_obj-150") == objectId)
            this->message_28_listin_number_set(payload);

        if (TAG("message_obj-180") == objectId)
            this->message_29_listin_number_set(payload);

        if (TAG("message_obj-188") == objectId)
            this->message_30_listin_number_set(payload);

        break;
        }
    case TAG("valin"):
        {
        if (TAG("number_obj-190") == objectId)
            this->numberobj_12_valin_set(payload);

        if (TAG("number_obj-252") == objectId)
            this->numberobj_13_valin_set(payload);

        if (TAG("number_obj-238") == objectId)
            this->numberobj_14_valin_set(payload);

        if (TAG("toggle_obj-215") == objectId)
            this->toggle_01_valin_set(payload);

        if (TAG("number_obj-210") == objectId)
            this->numberobj_15_valin_set(payload);

        if (TAG("number_obj-147") == objectId)
            this->numberobj_16_valin_set(payload);

        if (TAG("number_obj-39") == objectId)
            this->numberobj_17_valin_set(payload);

        if (TAG("number_obj-29") == objectId)
            this->numberobj_18_valin_set(payload);

        if (TAG("number_obj-120") == objectId)
            this->numberobj_19_valin_set(payload);

        if (TAG("number_obj-198") == objectId)
            this->numberobj_20_valin_set(payload);

        if (TAG("number_obj-61") == objectId)
            this->numberobj_21_valin_set(payload);

        if (TAG("number_obj-285") == objectId)
            this->numberobj_22_valin_set(payload);

        if (TAG("toggle_obj-235") == objectId)
            this->toggle_02_valin_set(payload);

        if (TAG("number_obj-265") == objectId)
            this->numberobj_23_valin_set(payload);

        if (TAG("number_obj-171") == objectId)
            this->numberobj_24_valin_set(payload);

        if (TAG("number_obj-172") == objectId)
            this->numberobj_25_valin_set(payload);

        if (TAG("number_obj-18") == objectId)
            this->numberobj_26_valin_set(payload);

        if (TAG("number_obj-6") == objectId)
            this->numberobj_27_valin_set(payload);

        if (TAG("number_obj-28") == objectId)
            this->numberobj_28_valin_set(payload);

        if (TAG("number_obj-14") == objectId)
            this->numberobj_29_valin_set(payload);

        if (TAG("number_obj-218") == objectId)
            this->numberobj_30_valin_set(payload);

        if (TAG("number_obj-219") == objectId)
            this->numberobj_31_valin_set(payload);

        if (TAG("toggle_obj-167") == objectId)
            this->toggle_03_valin_set(payload);

        if (TAG("number_obj-192") == objectId)
            this->numberobj_32_valin_set(payload);

        if (TAG("number_obj-130") == objectId)
            this->numberobj_33_valin_set(payload);

        if (TAG("number_obj-230") == objectId)
            this->numberobj_34_valin_set(payload);

        if (TAG("number_obj-223") == objectId)
            this->numberobj_35_valin_set(payload);

        if (TAG("number_obj-224") == objectId)
            this->numberobj_36_valin_set(payload);

        if (TAG("number_obj-251") == objectId)
            this->numberobj_37_valin_set(payload);

        if (TAG("number_obj-236") == objectId)
            this->numberobj_38_valin_set(payload);

        if (TAG("number_obj-234") == objectId)
            this->numberobj_39_valin_set(payload);

        if (TAG("number_obj-525") == objectId)
            this->numberobj_40_valin_set(payload);

        if (TAG("number_obj-203") == objectId)
            this->numberobj_41_valin_set(payload);

        if (TAG("number_obj-56") == objectId)
            this->numberobj_42_valin_set(payload);

        if (TAG("number_obj-37") == objectId)
            this->numberobj_43_valin_set(payload);

        if (TAG("number_obj-363") == objectId)
            this->numberobj_44_valin_set(payload);

        if (TAG("number_obj-461") == objectId)
            this->numberobj_45_valin_set(payload);

        if (TAG("number_obj-469") == objectId)
            this->numberobj_46_valin_set(payload);

        if (TAG("number_obj-452") == objectId)
            this->numberobj_47_valin_set(payload);

        if (TAG("number_obj-465") == objectId)
            this->numberobj_48_valin_set(payload);

        if (TAG("toggle_obj-377") == objectId)
            this->toggle_04_valin_set(payload);

        if (TAG("number_obj-196") == objectId)
            this->numberobj_49_valin_set(payload);

        if (TAG("number_obj-369") == objectId)
            this->numberobj_50_valin_set(payload);

        break;
        }
    case TAG("format"):
        {
        if (TAG("number_obj-190") == objectId)
            this->numberobj_12_format_set(payload);

        if (TAG("number_obj-252") == objectId)
            this->numberobj_13_format_set(payload);

        if (TAG("number_obj-238") == objectId)
            this->numberobj_14_format_set(payload);

        if (TAG("number_obj-210") == objectId)
            this->numberobj_15_format_set(payload);

        if (TAG("number_obj-147") == objectId)
            this->numberobj_16_format_set(payload);

        if (TAG("number_obj-39") == objectId)
            this->numberobj_17_format_set(payload);

        if (TAG("number_obj-29") == objectId)
            this->numberobj_18_format_set(payload);

        if (TAG("number_obj-120") == objectId)
            this->numberobj_19_format_set(payload);

        if (TAG("number_obj-198") == objectId)
            this->numberobj_20_format_set(payload);

        if (TAG("number_obj-61") == objectId)
            this->numberobj_21_format_set(payload);

        if (TAG("number_obj-285") == objectId)
            this->numberobj_22_format_set(payload);

        if (TAG("number_obj-265") == objectId)
            this->numberobj_23_format_set(payload);

        if (TAG("number_obj-171") == objectId)
            this->numberobj_24_format_set(payload);

        if (TAG("number_obj-172") == objectId)
            this->numberobj_25_format_set(payload);

        if (TAG("number_obj-18") == objectId)
            this->numberobj_26_format_set(payload);

        if (TAG("number_obj-6") == objectId)
            this->numberobj_27_format_set(payload);

        if (TAG("number_obj-28") == objectId)
            this->numberobj_28_format_set(payload);

        if (TAG("number_obj-14") == objectId)
            this->numberobj_29_format_set(payload);

        if (TAG("number_obj-218") == objectId)
            this->numberobj_30_format_set(payload);

        if (TAG("number_obj-219") == objectId)
            this->numberobj_31_format_set(payload);

        if (TAG("number_obj-192") == objectId)
            this->numberobj_32_format_set(payload);

        if (TAG("number_obj-130") == objectId)
            this->numberobj_33_format_set(payload);

        if (TAG("number_obj-230") == objectId)
            this->numberobj_34_format_set(payload);

        if (TAG("number_obj-223") == objectId)
            this->numberobj_35_format_set(payload);

        if (TAG("number_obj-224") == objectId)
            this->numberobj_36_format_set(payload);

        if (TAG("number_obj-251") == objectId)
            this->numberobj_37_format_set(payload);

        if (TAG("number_obj-236") == objectId)
            this->numberobj_38_format_set(payload);

        if (TAG("number_obj-234") == objectId)
            this->numberobj_39_format_set(payload);

        if (TAG("number_obj-525") == objectId)
            this->numberobj_40_format_set(payload);

        if (TAG("number_obj-203") == objectId)
            this->numberobj_41_format_set(payload);

        if (TAG("number_obj-56") == objectId)
            this->numberobj_42_format_set(payload);

        if (TAG("number_obj-37") == objectId)
            this->numberobj_43_format_set(payload);

        if (TAG("number_obj-363") == objectId)
            this->numberobj_44_format_set(payload);

        if (TAG("number_obj-461") == objectId)
            this->numberobj_45_format_set(payload);

        if (TAG("number_obj-469") == objectId)
            this->numberobj_46_format_set(payload);

        if (TAG("number_obj-452") == objectId)
            this->numberobj_47_format_set(payload);

        if (TAG("number_obj-465") == objectId)
            this->numberobj_48_format_set(payload);

        if (TAG("number_obj-196") == objectId)
            this->numberobj_49_format_set(payload);

        if (TAG("number_obj-369") == objectId)
            this->numberobj_50_format_set(payload);

        break;
        }
    case TAG("sig"):
        {
        if (TAG("number~_obj-87") == objectId)
            this->numbertilde_14_sig_number_set(payload);

        if (TAG("number~_obj-85") == objectId)
            this->numbertilde_15_sig_number_set(payload);

        if (TAG("number~_obj-113") == objectId)
            this->numbertilde_16_sig_number_set(payload);

        if (TAG("number~_obj-33") == objectId)
            this->numbertilde_17_sig_number_set(payload);

        if (TAG("number~_obj-126") == objectId)
            this->numbertilde_18_sig_number_set(payload);

        if (TAG("number~_obj-106") == objectId)
            this->numbertilde_19_sig_number_set(payload);

        if (TAG("number~_obj-127") == objectId)
            this->numbertilde_20_sig_number_set(payload);

        if (TAG("number~_obj-12") == objectId)
            this->numbertilde_21_sig_number_set(payload);

        if (TAG("number~_obj-128") == objectId)
            this->numbertilde_22_sig_number_set(payload);

        if (TAG("number~_obj-124") == objectId)
            this->numbertilde_23_sig_number_set(payload);

        if (TAG("number~_obj-221") == objectId)
            this->numbertilde_24_sig_number_set(payload);

        if (TAG("number~_obj-123") == objectId)
            this->numbertilde_25_sig_number_set(payload);

        if (TAG("number~_obj-92") == objectId)
            this->numbertilde_26_sig_number_set(payload);

        if (TAG("number~_obj-73") == objectId)
            this->numbertilde_27_sig_number_set(payload);

        if (TAG("number~_obj-102") == objectId)
            this->numbertilde_28_sig_number_set(payload);

        if (TAG("number~_obj-93") == objectId)
            this->numbertilde_29_sig_number_set(payload);

        if (TAG("number~_obj-74") == objectId)
            this->numbertilde_30_sig_number_set(payload);

        if (TAG("number~_obj-99") == objectId)
            this->numbertilde_31_sig_number_set(payload);

        if (TAG("number~_obj-80") == objectId)
            this->numbertilde_32_sig_number_set(payload);

        if (TAG("number~_obj-91") == objectId)
            this->numbertilde_33_sig_number_set(payload);

        if (TAG("number~_obj-72") == objectId)
            this->numbertilde_34_sig_number_set(payload);

        if (TAG("number~_obj-90") == objectId)
            this->numbertilde_35_sig_number_set(payload);

        if (TAG("number~_obj-67") == objectId)
            this->numbertilde_36_sig_number_set(payload);

        if (TAG("number~_obj-393") == objectId)
            this->numbertilde_37_sig_number_set(payload);

        if (TAG("number~_obj-448") == objectId)
            this->numbertilde_38_sig_number_set(payload);

        if (TAG("number~_obj-359") == objectId)
            this->numbertilde_39_sig_number_set(payload);

        if (TAG("number~_obj-382") == objectId)
            this->numbertilde_40_sig_number_set(payload);

        if (TAG("number~_obj-383") == objectId)
            this->numbertilde_41_sig_number_set(payload);

        if (TAG("number~_obj-450") == objectId)
            this->numbertilde_42_sig_number_set(payload);

        if (TAG("number~_obj-384") == objectId)
            this->numbertilde_43_sig_number_set(payload);

        if (TAG("number~_obj-381") == objectId)
            this->numbertilde_44_sig_number_set(payload);

        if (TAG("number~_obj-380") == objectId)
            this->numbertilde_45_sig_number_set(payload);

        if (TAG("number~_obj-408") == objectId)
            this->numbertilde_46_sig_number_set(payload);

        if (TAG("number~_obj-426") == objectId)
            this->numbertilde_47_sig_number_set(payload);

        if (TAG("number~_obj-371") == objectId)
            this->numbertilde_48_sig_number_set(payload);

        if (TAG("number~_obj-409") == objectId)
            this->numbertilde_49_sig_number_set(payload);

        if (TAG("number~_obj-427") == objectId)
            this->numbertilde_50_sig_number_set(payload);

        if (TAG("number~_obj-415") == objectId)
            this->numbertilde_51_sig_number_set(payload);

        if (TAG("number~_obj-433") == objectId)
            this->numbertilde_52_sig_number_set(payload);

        if (TAG("number~_obj-407") == objectId)
            this->numbertilde_53_sig_number_set(payload);

        if (TAG("number~_obj-425") == objectId)
            this->numbertilde_54_sig_number_set(payload);

        if (TAG("number~_obj-406") == objectId)
            this->numbertilde_55_sig_number_set(payload);

        if (TAG("number~_obj-424") == objectId)
            this->numbertilde_56_sig_number_set(payload);

        break;
        }
    case TAG("mode"):
        {
        if (TAG("number~_obj-87") == objectId)
            this->numbertilde_14_mode_set(payload);

        if (TAG("number~_obj-85") == objectId)
            this->numbertilde_15_mode_set(payload);

        if (TAG("number~_obj-113") == objectId)
            this->numbertilde_16_mode_set(payload);

        if (TAG("number~_obj-33") == objectId)
            this->numbertilde_17_mode_set(payload);

        if (TAG("number~_obj-126") == objectId)
            this->numbertilde_18_mode_set(payload);

        if (TAG("number~_obj-106") == objectId)
            this->numbertilde_19_mode_set(payload);

        if (TAG("number~_obj-127") == objectId)
            this->numbertilde_20_mode_set(payload);

        if (TAG("number~_obj-12") == objectId)
            this->numbertilde_21_mode_set(payload);

        if (TAG("number~_obj-128") == objectId)
            this->numbertilde_22_mode_set(payload);

        if (TAG("number~_obj-124") == objectId)
            this->numbertilde_23_mode_set(payload);

        if (TAG("number~_obj-221") == objectId)
            this->numbertilde_24_mode_set(payload);

        if (TAG("number~_obj-123") == objectId)
            this->numbertilde_25_mode_set(payload);

        if (TAG("number~_obj-92") == objectId)
            this->numbertilde_26_mode_set(payload);

        if (TAG("number~_obj-73") == objectId)
            this->numbertilde_27_mode_set(payload);

        if (TAG("number~_obj-102") == objectId)
            this->numbertilde_28_mode_set(payload);

        if (TAG("number~_obj-93") == objectId)
            this->numbertilde_29_mode_set(payload);

        if (TAG("number~_obj-74") == objectId)
            this->numbertilde_30_mode_set(payload);

        if (TAG("number~_obj-99") == objectId)
            this->numbertilde_31_mode_set(payload);

        if (TAG("number~_obj-80") == objectId)
            this->numbertilde_32_mode_set(payload);

        if (TAG("number~_obj-91") == objectId)
            this->numbertilde_33_mode_set(payload);

        if (TAG("number~_obj-72") == objectId)
            this->numbertilde_34_mode_set(payload);

        if (TAG("number~_obj-90") == objectId)
            this->numbertilde_35_mode_set(payload);

        if (TAG("number~_obj-67") == objectId)
            this->numbertilde_36_mode_set(payload);

        if (TAG("number~_obj-393") == objectId)
            this->numbertilde_37_mode_set(payload);

        if (TAG("number~_obj-448") == objectId)
            this->numbertilde_38_mode_set(payload);

        if (TAG("number~_obj-359") == objectId)
            this->numbertilde_39_mode_set(payload);

        if (TAG("number~_obj-382") == objectId)
            this->numbertilde_40_mode_set(payload);

        if (TAG("number~_obj-383") == objectId)
            this->numbertilde_41_mode_set(payload);

        if (TAG("number~_obj-450") == objectId)
            this->numbertilde_42_mode_set(payload);

        if (TAG("number~_obj-384") == objectId)
            this->numbertilde_43_mode_set(payload);

        if (TAG("number~_obj-381") == objectId)
            this->numbertilde_44_mode_set(payload);

        if (TAG("number~_obj-380") == objectId)
            this->numbertilde_45_mode_set(payload);

        if (TAG("number~_obj-408") == objectId)
            this->numbertilde_46_mode_set(payload);

        if (TAG("number~_obj-426") == objectId)
            this->numbertilde_47_mode_set(payload);

        if (TAG("number~_obj-371") == objectId)
            this->numbertilde_48_mode_set(payload);

        if (TAG("number~_obj-409") == objectId)
            this->numbertilde_49_mode_set(payload);

        if (TAG("number~_obj-427") == objectId)
            this->numbertilde_50_mode_set(payload);

        if (TAG("number~_obj-415") == objectId)
            this->numbertilde_51_mode_set(payload);

        if (TAG("number~_obj-433") == objectId)
            this->numbertilde_52_mode_set(payload);

        if (TAG("number~_obj-407") == objectId)
            this->numbertilde_53_mode_set(payload);

        if (TAG("number~_obj-425") == objectId)
            this->numbertilde_54_mode_set(payload);

        if (TAG("number~_obj-406") == objectId)
            this->numbertilde_55_mode_set(payload);

        if (TAG("number~_obj-424") == objectId)
            this->numbertilde_56_mode_set(payload);

        break;
        }
    }

    this->p_01->processNumMessage(tag, objectId, time, payload);
    this->p_02->processNumMessage(tag, objectId, time, payload);
    this->p_03->processNumMessage(tag, objectId, time, payload);
    this->p_04->processNumMessage(tag, objectId, time, payload);
    this->p_05->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-246") == objectId)
            this->message_09_listin_list_set(payload);

        if (TAG("message_obj-154") == objectId)
            this->message_10_listin_list_set(payload);

        if (TAG("message_obj-122") == objectId)
            this->message_11_listin_list_set(payload);

        if (TAG("message_obj-164") == objectId)
            this->message_12_listin_list_set(payload);

        if (TAG("message_obj-49") == objectId)
            this->message_13_listin_list_set(payload);

        if (TAG("message_obj-50") == objectId)
            this->message_14_listin_list_set(payload);

        if (TAG("message_obj-145") == objectId)
            this->message_15_listin_list_set(payload);

        if (TAG("message_obj-137") == objectId)
            this->message_16_listin_list_set(payload);

        if (TAG("message_obj-242") == objectId)
            this->message_17_listin_list_set(payload);

        if (TAG("message_obj-233") == objectId)
            this->message_18_listin_list_set(payload);

        if (TAG("message_obj-186") == objectId)
            this->message_19_listin_list_set(payload);

        if (TAG("message_obj-177") == objectId)
            this->message_20_listin_list_set(payload);

        if (TAG("message_obj-253") == objectId)
            this->message_21_listin_list_set(payload);

        if (TAG("message_obj-135") == objectId)
            this->message_22_listin_list_set(payload);

        if (TAG("message_obj-161") == objectId)
            this->message_23_listin_list_set(payload);

        if (TAG("message_obj-175") == objectId)
            this->message_24_listin_list_set(payload);

        if (TAG("message_obj-361") == objectId)
            this->message_25_listin_list_set(payload);

        if (TAG("message_obj-360") == objectId)
            this->message_26_listin_list_set(payload);

        if (TAG("message_obj-141") == objectId)
            this->message_27_listin_list_set(payload);

        if (TAG("message_obj-150") == objectId)
            this->message_28_listin_list_set(payload);

        if (TAG("message_obj-180") == objectId)
            this->message_29_listin_list_set(payload);

        if (TAG("message_obj-188") == objectId)
            this->message_30_listin_list_set(payload);

        break;
        }
    case TAG("sig"):
        {
        if (TAG("number~_obj-87") == objectId)
            this->numbertilde_14_sig_list_set(payload);

        if (TAG("number~_obj-85") == objectId)
            this->numbertilde_15_sig_list_set(payload);

        if (TAG("number~_obj-113") == objectId)
            this->numbertilde_16_sig_list_set(payload);

        if (TAG("number~_obj-33") == objectId)
            this->numbertilde_17_sig_list_set(payload);

        if (TAG("number~_obj-126") == objectId)
            this->numbertilde_18_sig_list_set(payload);

        if (TAG("number~_obj-106") == objectId)
            this->numbertilde_19_sig_list_set(payload);

        if (TAG("number~_obj-127") == objectId)
            this->numbertilde_20_sig_list_set(payload);

        if (TAG("number~_obj-12") == objectId)
            this->numbertilde_21_sig_list_set(payload);

        if (TAG("number~_obj-128") == objectId)
            this->numbertilde_22_sig_list_set(payload);

        if (TAG("number~_obj-124") == objectId)
            this->numbertilde_23_sig_list_set(payload);

        if (TAG("number~_obj-221") == objectId)
            this->numbertilde_24_sig_list_set(payload);

        if (TAG("number~_obj-123") == objectId)
            this->numbertilde_25_sig_list_set(payload);

        if (TAG("number~_obj-92") == objectId)
            this->numbertilde_26_sig_list_set(payload);

        if (TAG("number~_obj-73") == objectId)
            this->numbertilde_27_sig_list_set(payload);

        if (TAG("number~_obj-102") == objectId)
            this->numbertilde_28_sig_list_set(payload);

        if (TAG("number~_obj-93") == objectId)
            this->numbertilde_29_sig_list_set(payload);

        if (TAG("number~_obj-74") == objectId)
            this->numbertilde_30_sig_list_set(payload);

        if (TAG("number~_obj-99") == objectId)
            this->numbertilde_31_sig_list_set(payload);

        if (TAG("number~_obj-80") == objectId)
            this->numbertilde_32_sig_list_set(payload);

        if (TAG("number~_obj-91") == objectId)
            this->numbertilde_33_sig_list_set(payload);

        if (TAG("number~_obj-72") == objectId)
            this->numbertilde_34_sig_list_set(payload);

        if (TAG("number~_obj-90") == objectId)
            this->numbertilde_35_sig_list_set(payload);

        if (TAG("number~_obj-67") == objectId)
            this->numbertilde_36_sig_list_set(payload);

        if (TAG("number~_obj-393") == objectId)
            this->numbertilde_37_sig_list_set(payload);

        if (TAG("number~_obj-448") == objectId)
            this->numbertilde_38_sig_list_set(payload);

        if (TAG("number~_obj-359") == objectId)
            this->numbertilde_39_sig_list_set(payload);

        if (TAG("number~_obj-382") == objectId)
            this->numbertilde_40_sig_list_set(payload);

        if (TAG("number~_obj-383") == objectId)
            this->numbertilde_41_sig_list_set(payload);

        if (TAG("number~_obj-450") == objectId)
            this->numbertilde_42_sig_list_set(payload);

        if (TAG("number~_obj-384") == objectId)
            this->numbertilde_43_sig_list_set(payload);

        if (TAG("number~_obj-381") == objectId)
            this->numbertilde_44_sig_list_set(payload);

        if (TAG("number~_obj-380") == objectId)
            this->numbertilde_45_sig_list_set(payload);

        if (TAG("number~_obj-408") == objectId)
            this->numbertilde_46_sig_list_set(payload);

        if (TAG("number~_obj-426") == objectId)
            this->numbertilde_47_sig_list_set(payload);

        if (TAG("number~_obj-371") == objectId)
            this->numbertilde_48_sig_list_set(payload);

        if (TAG("number~_obj-409") == objectId)
            this->numbertilde_49_sig_list_set(payload);

        if (TAG("number~_obj-427") == objectId)
            this->numbertilde_50_sig_list_set(payload);

        if (TAG("number~_obj-415") == objectId)
            this->numbertilde_51_sig_list_set(payload);

        if (TAG("number~_obj-433") == objectId)
            this->numbertilde_52_sig_list_set(payload);

        if (TAG("number~_obj-407") == objectId)
            this->numbertilde_53_sig_list_set(payload);

        if (TAG("number~_obj-425") == objectId)
            this->numbertilde_54_sig_list_set(payload);

        if (TAG("number~_obj-406") == objectId)
            this->numbertilde_55_sig_list_set(payload);

        if (TAG("number~_obj-424") == objectId)
            this->numbertilde_56_sig_list_set(payload);

        break;
        }
    }

    this->p_01->processListMessage(tag, objectId, time, payload);
    this->p_02->processListMessage(tag, objectId, time, payload);
    this->p_03->processListMessage(tag, objectId, time, payload);
    this->p_04->processListMessage(tag, objectId, time, payload);
    this->p_05->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-246") == objectId)
            this->message_09_listin_bang_bang();

        if (TAG("message_obj-154") == objectId)
            this->message_10_listin_bang_bang();

        if (TAG("message_obj-122") == objectId)
            this->message_11_listin_bang_bang();

        if (TAG("message_obj-164") == objectId)
            this->message_12_listin_bang_bang();

        if (TAG("message_obj-49") == objectId)
            this->message_13_listin_bang_bang();

        if (TAG("message_obj-50") == objectId)
            this->message_14_listin_bang_bang();

        if (TAG("message_obj-145") == objectId)
            this->message_15_listin_bang_bang();

        if (TAG("message_obj-137") == objectId)
            this->message_16_listin_bang_bang();

        if (TAG("message_obj-242") == objectId)
            this->message_17_listin_bang_bang();

        if (TAG("message_obj-233") == objectId)
            this->message_18_listin_bang_bang();

        if (TAG("message_obj-186") == objectId)
            this->message_19_listin_bang_bang();

        if (TAG("message_obj-177") == objectId)
            this->message_20_listin_bang_bang();

        if (TAG("message_obj-253") == objectId)
            this->message_21_listin_bang_bang();

        if (TAG("message_obj-135") == objectId)
            this->message_22_listin_bang_bang();

        if (TAG("message_obj-161") == objectId)
            this->message_23_listin_bang_bang();

        if (TAG("message_obj-175") == objectId)
            this->message_24_listin_bang_bang();

        if (TAG("message_obj-361") == objectId)
            this->message_25_listin_bang_bang();

        if (TAG("message_obj-360") == objectId)
            this->message_26_listin_bang_bang();

        if (TAG("message_obj-141") == objectId)
            this->message_27_listin_bang_bang();

        if (TAG("message_obj-150") == objectId)
            this->message_28_listin_bang_bang();

        if (TAG("message_obj-180") == objectId)
            this->message_29_listin_bang_bang();

        if (TAG("message_obj-188") == objectId)
            this->message_30_listin_bang_bang();

        break;
        }
    case TAG("startupbang"):
        {
        if (TAG("loadbang_obj-152") == objectId)
            this->loadbang_07_startupbang_bang();

        if (TAG("loadbang_obj-131") == objectId)
            this->loadbang_08_startupbang_bang();

        if (TAG("loadbang_obj-163") == objectId)
            this->loadbang_09_startupbang_bang();

        if (TAG("loadbang_obj-143") == objectId)
            this->loadbang_10_startupbang_bang();

        if (TAG("loadbang_obj-136") == objectId)
            this->loadbang_11_startupbang_bang();

        if (TAG("loadbang_obj-184") == objectId)
            this->loadbang_12_startupbang_bang();

        if (TAG("loadbang_obj-176") == objectId)
            this->loadbang_13_startupbang_bang();

        if (TAG("loadbang_obj-134") == objectId)
            this->loadbang_14_startupbang_bang();

        if (TAG("loadbang_obj-159") == objectId)
            this->loadbang_15_startupbang_bang();

        if (TAG("loadbang_obj-165") == objectId)
            this->loadbang_16_startupbang_bang();

        if (TAG("loadbang_obj-139") == objectId)
            this->loadbang_17_startupbang_bang();

        if (TAG("loadbang_obj-146") == objectId)
            this->loadbang_18_startupbang_bang();

        if (TAG("loadbang_obj-179") == objectId)
            this->loadbang_19_startupbang_bang();

        if (TAG("loadbang_obj-187") == objectId)
            this->loadbang_20_startupbang_bang();

        break;
        }
    case TAG("bangin"):
        {
        if (TAG("button_obj-255") == objectId)
            this->button_01_bangin_bang();

        break;
        }
    }

    this->p_01->processBangMessage(tag, objectId, time);
    this->p_02->processBangMessage(tag, objectId, time);
    this->p_03->processBangMessage(tag, objectId, time);
    this->p_04->processBangMessage(tag, objectId, time);
    this->p_05->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {
    case TAG("listout"):
        {
        return "listout";
        }
    case TAG("message_obj-246"):
        {
        return "message_obj-246";
        }
    case TAG("valout"):
        {
        return "valout";
        }
    case TAG("number_obj-190"):
        {
        return "number_obj-190";
        }
    case TAG("setup"):
        {
        return "setup";
        }
    case TAG("number_obj-252"):
        {
        return "number_obj-252";
        }
    case TAG("number_obj-238"):
        {
        return "number_obj-238";
        }
    case TAG("monitor"):
        {
        return "monitor";
        }
    case TAG("number~_obj-87"):
        {
        return "number~_obj-87";
        }
    case TAG("assign"):
        {
        return "assign";
        }
    case TAG("toggle_obj-215"):
        {
        return "toggle_obj-215";
        }
    case TAG("number_obj-210"):
        {
        return "number_obj-210";
        }
    case TAG("number_obj-147"):
        {
        return "number_obj-147";
        }
    case TAG("scope~_obj-111"):
        {
        return "scope~_obj-111";
        }
    case TAG("scope~_obj-162"):
        {
        return "scope~_obj-162";
        }
    case TAG("number_obj-39"):
        {
        return "number_obj-39";
        }
    case TAG("number~_obj-85"):
        {
        return "number~_obj-85";
        }
    case TAG("number~_obj-113"):
        {
        return "number~_obj-113";
        }
    case TAG("number~_obj-33"):
        {
        return "number~_obj-33";
        }
    case TAG("number_obj-29"):
        {
        return "number_obj-29";
        }
    case TAG("number_obj-120"):
        {
        return "number_obj-120";
        }
    case TAG("scope~_obj-211"):
        {
        return "scope~_obj-211";
        }
    case TAG("message_obj-154"):
        {
        return "message_obj-154";
        }
    case TAG("message_obj-122"):
        {
        return "message_obj-122";
        }
    case TAG("number_obj-198"):
        {
        return "number_obj-198";
        }
    case TAG("number_obj-61"):
        {
        return "number_obj-61";
        }
    case TAG("scope~_obj-153"):
        {
        return "scope~_obj-153";
        }
    case TAG("number~_obj-126"):
        {
        return "number~_obj-126";
        }
    case TAG("number_obj-285"):
        {
        return "number_obj-285";
        }
    case TAG("toggle_obj-235"):
        {
        return "toggle_obj-235";
        }
    case TAG("number~_obj-106"):
        {
        return "number~_obj-106";
        }
    case TAG("number_obj-265"):
        {
        return "number_obj-265";
        }
    case TAG("number_obj-171"):
        {
        return "number_obj-171";
        }
    case TAG("number_obj-172"):
        {
        return "number_obj-172";
        }
    case TAG("number~_obj-127"):
        {
        return "number~_obj-127";
        }
    case TAG("number~_obj-12"):
        {
        return "number~_obj-12";
        }
    case TAG("number_obj-18"):
        {
        return "number_obj-18";
        }
    case TAG("scope~_obj-208"):
        {
        return "scope~_obj-208";
        }
    case TAG("scope~_obj-205"):
        {
        return "scope~_obj-205";
        }
    case TAG("number~_obj-128"):
        {
        return "number~_obj-128";
        }
    case TAG("number_obj-6"):
        {
        return "number_obj-6";
        }
    case TAG("number~_obj-124"):
        {
        return "number~_obj-124";
        }
    case TAG("number_obj-28"):
        {
        return "number_obj-28";
        }
    case TAG("number_obj-14"):
        {
        return "number_obj-14";
        }
    case TAG("number~_obj-221"):
        {
        return "number~_obj-221";
        }
    case TAG("message_obj-164"):
        {
        return "message_obj-164";
        }
    case TAG("number~_obj-123"):
        {
        return "number~_obj-123";
        }
    case TAG("number_obj-218"):
        {
        return "number_obj-218";
        }
    case TAG("number_obj-219"):
        {
        return "number_obj-219";
        }
    case TAG("message_obj-49"):
        {
        return "message_obj-49";
        }
    case TAG("toggle_obj-167"):
        {
        return "toggle_obj-167";
        }
    case TAG("scope~_obj-108"):
        {
        return "scope~_obj-108";
        }
    case TAG("number_obj-192"):
        {
        return "number_obj-192";
        }
    case TAG("message_obj-50"):
        {
        return "message_obj-50";
        }
    case TAG("number~_obj-92"):
        {
        return "number~_obj-92";
        }
    case TAG("number~_obj-73"):
        {
        return "number~_obj-73";
        }
    case TAG("number~_obj-102"):
        {
        return "number~_obj-102";
        }
    case TAG("message_obj-145"):
        {
        return "message_obj-145";
        }
    case TAG("message_obj-137"):
        {
        return "message_obj-137";
        }
    case TAG("number_obj-130"):
        {
        return "number_obj-130";
        }
    case TAG("number_obj-230"):
        {
        return "number_obj-230";
        }
    case TAG("number_obj-223"):
        {
        return "number_obj-223";
        }
    case TAG("number_obj-224"):
        {
        return "number_obj-224";
        }
    case TAG("number~_obj-93"):
        {
        return "number~_obj-93";
        }
    case TAG("number~_obj-74"):
        {
        return "number~_obj-74";
        }
    case TAG("message_obj-242"):
        {
        return "message_obj-242";
        }
    case TAG("number~_obj-99"):
        {
        return "number~_obj-99";
        }
    case TAG("number~_obj-80"):
        {
        return "number~_obj-80";
        }
    case TAG("message_obj-233"):
        {
        return "message_obj-233";
        }
    case TAG("number~_obj-91"):
        {
        return "number~_obj-91";
        }
    case TAG("number~_obj-72"):
        {
        return "number~_obj-72";
        }
    case TAG("bangout"):
        {
        return "bangout";
        }
    case TAG("button_obj-255"):
        {
        return "button_obj-255";
        }
    case TAG("message_obj-186"):
        {
        return "message_obj-186";
        }
    case TAG("number_obj-251"):
        {
        return "number_obj-251";
        }
    case TAG("number_obj-236"):
        {
        return "number_obj-236";
        }
    case TAG("number_obj-234"):
        {
        return "number_obj-234";
        }
    case TAG("message_obj-177"):
        {
        return "message_obj-177";
        }
    case TAG("number~_obj-90"):
        {
        return "number~_obj-90";
        }
    case TAG("number~_obj-67"):
        {
        return "number~_obj-67";
        }
    case TAG("scope~_obj-114"):
        {
        return "scope~_obj-114";
        }
    case TAG("message_obj-253"):
        {
        return "message_obj-253";
        }
    case TAG("scope~_obj-477"):
        {
        return "scope~_obj-477";
        }
    case TAG("number~_obj-393"):
        {
        return "number~_obj-393";
        }
    case TAG("message_obj-135"):
        {
        return "message_obj-135";
        }
    case TAG("number~_obj-448"):
        {
        return "number~_obj-448";
        }
    case TAG("number~_obj-359"):
        {
        return "number~_obj-359";
        }
    case TAG("message_obj-161"):
        {
        return "message_obj-161";
        }
    case TAG("number_obj-525"):
        {
        return "number_obj-525";
        }
    case TAG("number_obj-203"):
        {
        return "number_obj-203";
        }
    case TAG("number_obj-56"):
        {
        return "number_obj-56";
        }
    case TAG("number_obj-37"):
        {
        return "number_obj-37";
        }
    case TAG("number~_obj-382"):
        {
        return "number~_obj-382";
        }
    case TAG("number_obj-363"):
        {
        return "number_obj-363";
        }
    case TAG("number~_obj-383"):
        {
        return "number~_obj-383";
        }
    case TAG("number~_obj-450"):
        {
        return "number~_obj-450";
        }
    case TAG("number_obj-461"):
        {
        return "number_obj-461";
        }
    case TAG("number~_obj-384"):
        {
        return "number~_obj-384";
        }
    case TAG("number_obj-469"):
        {
        return "number_obj-469";
        }
    case TAG("number~_obj-381"):
        {
        return "number~_obj-381";
        }
    case TAG("number_obj-452"):
        {
        return "number_obj-452";
        }
    case TAG("number_obj-465"):
        {
        return "number_obj-465";
        }
    case TAG("message_obj-175"):
        {
        return "message_obj-175";
        }
    case TAG("number~_obj-380"):
        {
        return "number~_obj-380";
        }
    case TAG("message_obj-361"):
        {
        return "message_obj-361";
        }
    case TAG("toggle_obj-377"):
        {
        return "toggle_obj-377";
        }
    case TAG("number_obj-196"):
        {
        return "number_obj-196";
        }
    case TAG("message_obj-360"):
        {
        return "message_obj-360";
        }
    case TAG("number~_obj-408"):
        {
        return "number~_obj-408";
        }
    case TAG("number~_obj-426"):
        {
        return "number~_obj-426";
        }
    case TAG("message_obj-141"):
        {
        return "message_obj-141";
        }
    case TAG("number~_obj-371"):
        {
        return "number~_obj-371";
        }
    case TAG("message_obj-150"):
        {
        return "message_obj-150";
        }
    case TAG("number_obj-369"):
        {
        return "number_obj-369";
        }
    case TAG("number~_obj-409"):
        {
        return "number~_obj-409";
        }
    case TAG("number~_obj-427"):
        {
        return "number~_obj-427";
        }
    case TAG("number~_obj-415"):
        {
        return "number~_obj-415";
        }
    case TAG("number~_obj-433"):
        {
        return "number~_obj-433";
        }
    case TAG("message_obj-180"):
        {
        return "message_obj-180";
        }
    case TAG("message_obj-188"):
        {
        return "message_obj-188";
        }
    case TAG("number~_obj-407"):
        {
        return "number~_obj-407";
        }
    case TAG("number~_obj-425"):
        {
        return "number~_obj-425";
        }
    case TAG("number~_obj-406"):
        {
        return "number~_obj-406";
        }
    case TAG("number~_obj-424"):
        {
        return "number~_obj-424";
        }
    case TAG("listin"):
        {
        return "listin";
        }
    case TAG("valin"):
        {
        return "valin";
        }
    case TAG("format"):
        {
        return "format";
        }
    case TAG("sig"):
        {
        return "sig";
        }
    case TAG("mode"):
        {
        return "mode";
        }
    case TAG("startupbang"):
        {
        return "startupbang";
        }
    case TAG("loadbang_obj-152"):
        {
        return "loadbang_obj-152";
        }
    case TAG("loadbang_obj-131"):
        {
        return "loadbang_obj-131";
        }
    case TAG("loadbang_obj-163"):
        {
        return "loadbang_obj-163";
        }
    case TAG("loadbang_obj-143"):
        {
        return "loadbang_obj-143";
        }
    case TAG("loadbang_obj-136"):
        {
        return "loadbang_obj-136";
        }
    case TAG("bangin"):
        {
        return "bangin";
        }
    case TAG("loadbang_obj-184"):
        {
        return "loadbang_obj-184";
        }
    case TAG("loadbang_obj-176"):
        {
        return "loadbang_obj-176";
        }
    case TAG("loadbang_obj-134"):
        {
        return "loadbang_obj-134";
        }
    case TAG("loadbang_obj-159"):
        {
        return "loadbang_obj-159";
        }
    case TAG("loadbang_obj-165"):
        {
        return "loadbang_obj-165";
        }
    case TAG("loadbang_obj-139"):
        {
        return "loadbang_obj-139";
        }
    case TAG("loadbang_obj-146"):
        {
        return "loadbang_obj-146";
        }
    case TAG("loadbang_obj-179"):
        {
        return "loadbang_obj-179";
        }
    case TAG("loadbang_obj-187"):
        {
        return "loadbang_obj-187";
        }
    }

    auto subpatchResult_0 = this->p_01->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_02->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    auto subpatchResult_2 = this->p_03->resolveTag(tag);

    if (subpatchResult_2)
        return subpatchResult_2;

    auto subpatchResult_3 = this->p_04->resolveTag(tag);

    if (subpatchResult_3)
        return subpatchResult_3;

    auto subpatchResult_4 = this->p_05->resolveTag(tag);

    if (subpatchResult_4)
        return subpatchResult_4;

    return "";
}

MessageIndex getNumMessages() const {
    return 0;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {

    }

    return NullMessageInfo;
}

protected:

void param_01_value_set(number v) {
    v = this->param_01_value_constrain(v);
    this->param_01_value = v;
    this->sendParameter(0, false);

    if (this->param_01_value != this->param_01_lastValue) {
        this->getEngine()->presetTouched();
        this->param_01_lastValue = this->param_01_value;
    }

    this->numberobj_13_value_set(v);
    this->trigger_02_input_number_set(v);
}

void param_02_value_set(number v) {
    v = this->param_02_value_constrain(v);
    this->param_02_value = v;
    this->sendParameter(1, false);

    if (this->param_02_value != this->param_02_lastValue) {
        this->getEngine()->presetTouched();
        this->param_02_lastValue = this->param_02_value;
    }

    this->numberobj_48_value_set(v);
    this->expr_19_in1_set(v);
    this->numberobj_29_value_set(v);
    this->expr_12_in1_set(v);
}

void param_03_value_set(number v) {
    v = this->param_03_value_constrain(v);
    this->param_03_value = v;
    this->sendParameter(2, false);

    if (this->param_03_value != this->param_03_lastValue) {
        this->getEngine()->presetTouched();
        this->param_03_lastValue = this->param_03_value;
    }

    this->numberobj_46_value_set(v);
    this->expr_18_in1_set(v);
    this->numberobj_27_value_set(v);
    this->expr_11_in1_set(v);
}

void param_04_value_set(number v) {
    v = this->param_04_value_constrain(v);
    this->param_04_value = v;
    this->sendParameter(3, false);

    if (this->param_04_value != this->param_04_lastValue) {
        this->getEngine()->presetTouched();
        this->param_04_lastValue = this->param_04_value;
    }

    {
        list converted = {v};
        this->scale_12_input_set(converted);
    }

    {
        list converted = {v};
        this->scale_11_input_set(converted);
    }

    {
        list converted = {v};
        this->scale_10_input_set(converted);
    }

    {
        list converted = {v};
        this->scale_07_input_set(converted);
    }

    {
        list converted = {v};
        this->scale_06_input_set(converted);
    }

    {
        list converted = {v};
        this->scale_04_input_set(converted);
    }
}

void param_05_value_set(number v) {
    v = this->param_05_value_constrain(v);
    this->param_05_value = v;
    this->sendParameter(4, false);

    if (this->param_05_value != this->param_05_lastValue) {
        this->getEngine()->presetTouched();
        this->param_05_lastValue = this->param_05_value;
    }

    this->select_04_input_number_set(v);
    this->numberobj_44_value_set(v);
    this->select_01_input_number_set(v);
    this->numberobj_23_value_set(v);
}

void param_06_value_set(number v) {
    v = this->param_06_value_constrain(v);
    this->param_06_value = v;
    this->sendParameter(5, false);

    if (this->param_06_value != this->param_06_lastValue) {
        this->getEngine()->presetTouched();
        this->param_06_lastValue = this->param_06_value;
    }

    this->numberobj_30_value_set(v);
}

void param_07_value_set(number v) {
    v = this->param_07_value_constrain(v);
    this->param_07_value = v;
    this->sendParameter(6, false);

    if (this->param_07_value != this->param_07_lastValue) {
        this->getEngine()->presetTouched();
        this->param_07_lastValue = this->param_07_value;
    }

    this->gen_07_in3_set(v);
    this->gen_02_in3_set(v);
    this->expr_10_in1_set(v);
}

void param_08_value_set(number v) {
    v = this->param_08_value_constrain(v);
    this->param_08_value = v;
    this->sendParameter(7, false);

    if (this->param_08_value != this->param_08_lastValue) {
        this->getEngine()->presetTouched();
        this->param_08_lastValue = this->param_08_value;
    }

    this->numberobj_36_value_set(v);
}

void param_09_value_set(number v) {
    v = this->param_09_value_constrain(v);
    this->param_09_value = v;
    this->sendParameter(8, false);

    if (this->param_09_value != this->param_09_lastValue) {
        this->getEngine()->presetTouched();
        this->param_09_lastValue = this->param_09_value;
    }

    this->numberobj_40_value_set(v);
}

void param_10_value_set(number v) {
    v = this->param_10_value_constrain(v);
    this->param_10_value = v;
    this->sendParameter(9, false);

    if (this->param_10_value != this->param_10_lastValue) {
        this->getEngine()->presetTouched();
        this->param_10_lastValue = this->param_10_value;
    }

    this->expr_15_in1_set(v);
}

void param_11_value_set(number v) {
    v = this->param_11_value_constrain(v);
    this->param_11_value = v;
    this->sendParameter(10, false);

    if (this->param_11_value != this->param_11_lastValue) {
        this->getEngine()->presetTouched();
        this->param_11_lastValue = this->param_11_value;
    }

    this->numberobj_25_value_set(v);
}

void param_12_value_set(number v) {
    v = this->param_12_value_constrain(v);
    this->param_12_value = v;
    this->sendParameter(11, false);

    if (this->param_12_value != this->param_12_lastValue) {
        this->getEngine()->presetTouched();
        this->param_12_lastValue = this->param_12_value;
    }

    this->numberobj_19_value_set(v);
}

void param_13_value_set(number v) {
    v = this->param_13_value_constrain(v);
    this->param_13_value = v;
    this->sendParameter(12, false);

    if (this->param_13_value != this->param_13_lastValue) {
        this->getEngine()->presetTouched();
        this->param_13_lastValue = this->param_13_value;
    }

    this->numberobj_17_value_set(v);
}

void param_14_value_set(number v) {
    v = this->param_14_value_constrain(v);
    this->param_14_value = v;
    this->sendParameter(13, false);

    if (this->param_14_value != this->param_14_lastValue) {
        this->getEngine()->presetTouched();
        this->param_14_lastValue = this->param_14_value;
    }

    this->numberobj_14_value_set(v);
}

void message_09_listin_list_set(const list& v) {
    this->message_09_set_set(v);
}

void message_09_listin_number_set(number v) {
    this->message_09_set_set(v);
}

void message_09_listin_bang_bang() {
    this->message_09_trigger_bang();
}

void numberobj_12_valin_set(number v) {
    this->numberobj_12_value_set(v);
}

void numberobj_12_format_set(number v) {
    this->numberobj_12_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_13_valin_set(number v) {
    this->numberobj_13_value_set(v);
}

void numberobj_13_format_set(number v) {
    this->numberobj_13_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_14_valin_set(number v) {
    this->numberobj_14_value_set(v);
}

void numberobj_14_format_set(number v) {
    this->numberobj_14_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_14_sig_number_set(number v) {
    this->numbertilde_14_outValue = v;
}

void numbertilde_14_sig_list_set(const list& v) {
    this->numbertilde_14_outValue = v[0];
}

void numbertilde_14_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_14_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_14_currentMode = 1;
    }
}

void toggle_01_valin_set(number v) {
    this->toggle_01_value_number_set(v);
}

void numberobj_15_valin_set(number v) {
    this->numberobj_15_value_set(v);
}

void numberobj_15_format_set(number v) {
    this->numberobj_15_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_16_valin_set(number v) {
    this->numberobj_16_value_set(v);
}

void numberobj_16_format_set(number v) {
    this->numberobj_16_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_17_valin_set(number v) {
    this->numberobj_17_value_set(v);
}

void numberobj_17_format_set(number v) {
    this->numberobj_17_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_15_sig_number_set(number v) {
    this->numbertilde_15_outValue = v;
}

void numbertilde_15_sig_list_set(const list& v) {
    this->numbertilde_15_outValue = v[0];
}

void numbertilde_15_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_15_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_15_currentMode = 1;
    }
}

void numbertilde_16_sig_number_set(number v) {
    this->numbertilde_16_outValue = v;
}

void numbertilde_16_sig_list_set(const list& v) {
    this->numbertilde_16_outValue = v[0];
}

void numbertilde_16_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_16_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_16_currentMode = 1;
    }
}

void numbertilde_17_sig_number_set(number v) {
    this->numbertilde_17_outValue = v;
}

void numbertilde_17_sig_list_set(const list& v) {
    this->numbertilde_17_outValue = v[0];
}

void numbertilde_17_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_17_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_17_currentMode = 1;
    }
}

void numberobj_18_valin_set(number v) {
    this->numberobj_18_value_set(v);
}

void numberobj_18_format_set(number v) {
    this->numberobj_18_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_19_valin_set(number v) {
    this->numberobj_19_value_set(v);
}

void numberobj_19_format_set(number v) {
    this->numberobj_19_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void loadbang_07_startupbang_bang() {
    this->loadbang_07_output_bang();
}

void message_10_listin_list_set(const list& v) {
    this->message_10_set_set(v);
}

void message_10_listin_number_set(number v) {
    this->message_10_set_set(v);
}

void message_10_listin_bang_bang() {
    this->message_10_trigger_bang();
}

void loadbang_08_startupbang_bang() {
    this->loadbang_08_output_bang();
}

void message_11_listin_list_set(const list& v) {
    this->message_11_set_set(v);
}

void message_11_listin_number_set(number v) {
    this->message_11_set_set(v);
}

void message_11_listin_bang_bang() {
    this->message_11_trigger_bang();
}

void numberobj_20_valin_set(number v) {
    this->numberobj_20_value_set(v);
}

void numberobj_20_format_set(number v) {
    this->numberobj_20_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_21_valin_set(number v) {
    this->numberobj_21_value_set(v);
}

void numberobj_21_format_set(number v) {
    this->numberobj_21_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_18_sig_number_set(number v) {
    this->numbertilde_18_outValue = v;
}

void numbertilde_18_sig_list_set(const list& v) {
    this->numbertilde_18_outValue = v[0];
}

void numbertilde_18_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_18_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_18_currentMode = 1;
    }
}

void numberobj_22_valin_set(number v) {
    this->numberobj_22_value_set(v);
}

void numberobj_22_format_set(number v) {
    this->numberobj_22_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void toggle_02_valin_set(number v) {
    this->toggle_02_value_number_set(v);
}

void numbertilde_19_sig_number_set(number v) {
    this->numbertilde_19_outValue = v;
}

void numbertilde_19_sig_list_set(const list& v) {
    this->numbertilde_19_outValue = v[0];
}

void numbertilde_19_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_19_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_19_currentMode = 1;
    }
}

void numberobj_23_valin_set(number v) {
    this->numberobj_23_value_set(v);
}

void numberobj_23_format_set(number v) {
    this->numberobj_23_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_24_valin_set(number v) {
    this->numberobj_24_value_set(v);
}

void numberobj_24_format_set(number v) {
    this->numberobj_24_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_25_valin_set(number v) {
    this->numberobj_25_value_set(v);
}

void numberobj_25_format_set(number v) {
    this->numberobj_25_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_20_sig_number_set(number v) {
    this->numbertilde_20_outValue = v;
}

void numbertilde_20_sig_list_set(const list& v) {
    this->numbertilde_20_outValue = v[0];
}

void numbertilde_20_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_20_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_20_currentMode = 1;
    }
}

void numbertilde_21_sig_number_set(number v) {
    this->numbertilde_21_outValue = v;
}

void numbertilde_21_sig_list_set(const list& v) {
    this->numbertilde_21_outValue = v[0];
}

void numbertilde_21_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_21_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_21_currentMode = 1;
    }
}

void numberobj_26_valin_set(number v) {
    this->numberobj_26_value_set(v);
}

void numberobj_26_format_set(number v) {
    this->numberobj_26_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_22_sig_number_set(number v) {
    this->numbertilde_22_outValue = v;
}

void numbertilde_22_sig_list_set(const list& v) {
    this->numbertilde_22_outValue = v[0];
}

void numbertilde_22_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_22_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_22_currentMode = 1;
    }
}

void numberobj_27_valin_set(number v) {
    this->numberobj_27_value_set(v);
}

void numberobj_27_format_set(number v) {
    this->numberobj_27_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_23_sig_number_set(number v) {
    this->numbertilde_23_outValue = v;
}

void numbertilde_23_sig_list_set(const list& v) {
    this->numbertilde_23_outValue = v[0];
}

void numbertilde_23_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_23_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_23_currentMode = 1;
    }
}

void numberobj_28_valin_set(number v) {
    this->numberobj_28_value_set(v);
}

void numberobj_28_format_set(number v) {
    this->numberobj_28_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_29_valin_set(number v) {
    this->numberobj_29_value_set(v);
}

void numberobj_29_format_set(number v) {
    this->numberobj_29_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_24_sig_number_set(number v) {
    this->numbertilde_24_outValue = v;
}

void numbertilde_24_sig_list_set(const list& v) {
    this->numbertilde_24_outValue = v[0];
}

void numbertilde_24_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_24_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_24_currentMode = 1;
    }
}

void loadbang_09_startupbang_bang() {
    this->loadbang_09_output_bang();
}

void message_12_listin_list_set(const list& v) {
    this->message_12_set_set(v);
}

void message_12_listin_number_set(number v) {
    this->message_12_set_set(v);
}

void message_12_listin_bang_bang() {
    this->message_12_trigger_bang();
}

void numbertilde_25_sig_number_set(number v) {
    this->numbertilde_25_outValue = v;
}

void numbertilde_25_sig_list_set(const list& v) {
    this->numbertilde_25_outValue = v[0];
}

void numbertilde_25_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_25_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_25_currentMode = 1;
    }
}

void numberobj_30_valin_set(number v) {
    this->numberobj_30_value_set(v);
}

void numberobj_30_format_set(number v) {
    this->numberobj_30_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_31_valin_set(number v) {
    this->numberobj_31_value_set(v);
}

void numberobj_31_format_set(number v) {
    this->numberobj_31_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void message_13_listin_list_set(const list& v) {
    this->message_13_set_set(v);
}

void message_13_listin_number_set(number v) {
    this->message_13_set_set(v);
}

void message_13_listin_bang_bang() {
    this->message_13_trigger_bang();
}

void toggle_03_valin_set(number v) {
    this->toggle_03_value_number_set(v);
}

void numberobj_32_valin_set(number v) {
    this->numberobj_32_value_set(v);
}

void numberobj_32_format_set(number v) {
    this->numberobj_32_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void message_14_listin_list_set(const list& v) {
    this->message_14_set_set(v);
}

void message_14_listin_number_set(number v) {
    this->message_14_set_set(v);
}

void message_14_listin_bang_bang() {
    this->message_14_trigger_bang();
}

void delay_01_out_bang() {
    this->expr_14_in1_bang();
}

void numbertilde_26_sig_number_set(number v) {
    this->numbertilde_26_outValue = v;
}

void numbertilde_26_sig_list_set(const list& v) {
    this->numbertilde_26_outValue = v[0];
}

void numbertilde_26_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_26_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_26_currentMode = 1;
    }
}

void numbertilde_27_sig_number_set(number v) {
    this->numbertilde_27_outValue = v;
}

void numbertilde_27_sig_list_set(const list& v) {
    this->numbertilde_27_outValue = v[0];
}

void numbertilde_27_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_27_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_27_currentMode = 1;
    }
}

void numbertilde_28_sig_number_set(number v) {
    this->numbertilde_28_outValue = v;
}

void numbertilde_28_sig_list_set(const list& v) {
    this->numbertilde_28_outValue = v[0];
}

void numbertilde_28_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_28_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_28_currentMode = 1;
    }
}

void loadbang_10_startupbang_bang() {
    this->loadbang_10_output_bang();
}

void message_15_listin_list_set(const list& v) {
    this->message_15_set_set(v);
}

void message_15_listin_number_set(number v) {
    this->message_15_set_set(v);
}

void message_15_listin_bang_bang() {
    this->message_15_trigger_bang();
}

void loadbang_11_startupbang_bang() {
    this->loadbang_11_output_bang();
}

void message_16_listin_list_set(const list& v) {
    this->message_16_set_set(v);
}

void message_16_listin_number_set(number v) {
    this->message_16_set_set(v);
}

void message_16_listin_bang_bang() {
    this->message_16_trigger_bang();
}

void numberobj_33_valin_set(number v) {
    this->numberobj_33_value_set(v);
}

void numberobj_33_format_set(number v) {
    this->numberobj_33_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_34_valin_set(number v) {
    this->numberobj_34_value_set(v);
}

void numberobj_34_format_set(number v) {
    this->numberobj_34_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_35_valin_set(number v) {
    this->numberobj_35_value_set(v);
}

void numberobj_35_format_set(number v) {
    this->numberobj_35_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_36_valin_set(number v) {
    this->numberobj_36_value_set(v);
}

void numberobj_36_format_set(number v) {
    this->numberobj_36_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_29_sig_number_set(number v) {
    this->numbertilde_29_outValue = v;
}

void numbertilde_29_sig_list_set(const list& v) {
    this->numbertilde_29_outValue = v[0];
}

void numbertilde_29_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_29_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_29_currentMode = 1;
    }
}

void numbertilde_30_sig_number_set(number v) {
    this->numbertilde_30_outValue = v;
}

void numbertilde_30_sig_list_set(const list& v) {
    this->numbertilde_30_outValue = v[0];
}

void numbertilde_30_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_30_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_30_currentMode = 1;
    }
}

void message_17_listin_list_set(const list& v) {
    this->message_17_set_set(v);
}

void message_17_listin_number_set(number v) {
    this->message_17_set_set(v);
}

void message_17_listin_bang_bang() {
    this->message_17_trigger_bang();
}

void numbertilde_31_sig_number_set(number v) {
    this->numbertilde_31_outValue = v;
}

void numbertilde_31_sig_list_set(const list& v) {
    this->numbertilde_31_outValue = v[0];
}

void numbertilde_31_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_31_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_31_currentMode = 1;
    }
}

void numbertilde_32_sig_number_set(number v) {
    this->numbertilde_32_outValue = v;
}

void numbertilde_32_sig_list_set(const list& v) {
    this->numbertilde_32_outValue = v[0];
}

void numbertilde_32_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_32_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_32_currentMode = 1;
    }
}

void message_18_listin_list_set(const list& v) {
    this->message_18_set_set(v);
}

void message_18_listin_number_set(number v) {
    this->message_18_set_set(v);
}

void message_18_listin_bang_bang() {
    this->message_18_trigger_bang();
}

void numbertilde_33_sig_number_set(number v) {
    this->numbertilde_33_outValue = v;
}

void numbertilde_33_sig_list_set(const list& v) {
    this->numbertilde_33_outValue = v[0];
}

void numbertilde_33_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_33_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_33_currentMode = 1;
    }
}

void numbertilde_34_sig_number_set(number v) {
    this->numbertilde_34_outValue = v;
}

void numbertilde_34_sig_list_set(const list& v) {
    this->numbertilde_34_outValue = v[0];
}

void numbertilde_34_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_34_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_34_currentMode = 1;
    }
}

void button_01_bangin_bang() {
    this->button_01_bangval_bang();
}

void metro_01_tick_bang() {
    this->metro_01_tickout_bang();
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(this->metro_01_on)) {
        this->metro_01_last = this->currenttime();

        {
            this->metro_01_next = this->metro_01_last + this->metro_01_interval;
            this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_01_interval + this->_currentTime);;
        }
    }
}

void loadbang_12_startupbang_bang() {
    this->loadbang_12_output_bang();
}

void message_19_listin_list_set(const list& v) {
    this->message_19_set_set(v);
}

void message_19_listin_number_set(number v) {
    this->message_19_set_set(v);
}

void message_19_listin_bang_bang() {
    this->message_19_trigger_bang();
}

void numberobj_37_valin_set(number v) {
    this->numberobj_37_value_set(v);
}

void numberobj_37_format_set(number v) {
    this->numberobj_37_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_38_valin_set(number v) {
    this->numberobj_38_value_set(v);
}

void numberobj_38_format_set(number v) {
    this->numberobj_38_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_39_valin_set(number v) {
    this->numberobj_39_value_set(v);
}

void numberobj_39_format_set(number v) {
    this->numberobj_39_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void loadbang_13_startupbang_bang() {
    this->loadbang_13_output_bang();
}

void message_20_listin_list_set(const list& v) {
    this->message_20_set_set(v);
}

void message_20_listin_number_set(number v) {
    this->message_20_set_set(v);
}

void message_20_listin_bang_bang() {
    this->message_20_trigger_bang();
}

void numbertilde_35_sig_number_set(number v) {
    this->numbertilde_35_outValue = v;
}

void numbertilde_35_sig_list_set(const list& v) {
    this->numbertilde_35_outValue = v[0];
}

void numbertilde_35_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_35_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_35_currentMode = 1;
    }
}

void numbertilde_36_sig_number_set(number v) {
    this->numbertilde_36_outValue = v;
}

void numbertilde_36_sig_list_set(const list& v) {
    this->numbertilde_36_outValue = v[0];
}

void numbertilde_36_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_36_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_36_currentMode = 1;
    }
}

void message_21_listin_list_set(const list& v) {
    this->message_21_set_set(v);
}

void message_21_listin_number_set(number v) {
    this->message_21_set_set(v);
}

void message_21_listin_bang_bang() {
    this->message_21_trigger_bang();
}

void numbertilde_37_sig_number_set(number v) {
    this->numbertilde_37_outValue = v;
}

void numbertilde_37_sig_list_set(const list& v) {
    this->numbertilde_37_outValue = v[0];
}

void numbertilde_37_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_37_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_37_currentMode = 1;
    }
}

void loadbang_14_startupbang_bang() {
    this->loadbang_14_output_bang();
}

void message_22_listin_list_set(const list& v) {
    this->message_22_set_set(v);
}

void message_22_listin_number_set(number v) {
    this->message_22_set_set(v);
}

void message_22_listin_bang_bang() {
    this->message_22_trigger_bang();
}

void numbertilde_38_sig_number_set(number v) {
    this->numbertilde_38_outValue = v;
}

void numbertilde_38_sig_list_set(const list& v) {
    this->numbertilde_38_outValue = v[0];
}

void numbertilde_38_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_38_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_38_currentMode = 1;
    }
}

void numbertilde_39_sig_number_set(number v) {
    this->numbertilde_39_outValue = v;
}

void numbertilde_39_sig_list_set(const list& v) {
    this->numbertilde_39_outValue = v[0];
}

void numbertilde_39_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_39_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_39_currentMode = 1;
    }
}

void loadbang_15_startupbang_bang() {
    this->loadbang_15_output_bang();
}

void message_23_listin_list_set(const list& v) {
    this->message_23_set_set(v);
}

void message_23_listin_number_set(number v) {
    this->message_23_set_set(v);
}

void message_23_listin_bang_bang() {
    this->message_23_trigger_bang();
}

void numberobj_40_valin_set(number v) {
    this->numberobj_40_value_set(v);
}

void numberobj_40_format_set(number v) {
    this->numberobj_40_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_41_valin_set(number v) {
    this->numberobj_41_value_set(v);
}

void numberobj_41_format_set(number v) {
    this->numberobj_41_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_42_valin_set(number v) {
    this->numberobj_42_value_set(v);
}

void numberobj_42_format_set(number v) {
    this->numberobj_42_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_43_valin_set(number v) {
    this->numberobj_43_value_set(v);
}

void numberobj_43_format_set(number v) {
    this->numberobj_43_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_40_sig_number_set(number v) {
    this->numbertilde_40_outValue = v;
}

void numbertilde_40_sig_list_set(const list& v) {
    this->numbertilde_40_outValue = v[0];
}

void numbertilde_40_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_40_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_40_currentMode = 1;
    }
}

void numberobj_44_valin_set(number v) {
    this->numberobj_44_value_set(v);
}

void numberobj_44_format_set(number v) {
    this->numberobj_44_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_41_sig_number_set(number v) {
    this->numbertilde_41_outValue = v;
}

void numbertilde_41_sig_list_set(const list& v) {
    this->numbertilde_41_outValue = v[0];
}

void numbertilde_41_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_41_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_41_currentMode = 1;
    }
}

void numbertilde_42_sig_number_set(number v) {
    this->numbertilde_42_outValue = v;
}

void numbertilde_42_sig_list_set(const list& v) {
    this->numbertilde_42_outValue = v[0];
}

void numbertilde_42_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_42_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_42_currentMode = 1;
    }
}

void numberobj_45_valin_set(number v) {
    this->numberobj_45_value_set(v);
}

void numberobj_45_format_set(number v) {
    this->numberobj_45_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_43_sig_number_set(number v) {
    this->numbertilde_43_outValue = v;
}

void numbertilde_43_sig_list_set(const list& v) {
    this->numbertilde_43_outValue = v[0];
}

void numbertilde_43_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_43_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_43_currentMode = 1;
    }
}

void numberobj_46_valin_set(number v) {
    this->numberobj_46_value_set(v);
}

void numberobj_46_format_set(number v) {
    this->numberobj_46_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_44_sig_number_set(number v) {
    this->numbertilde_44_outValue = v;
}

void numbertilde_44_sig_list_set(const list& v) {
    this->numbertilde_44_outValue = v[0];
}

void numbertilde_44_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_44_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_44_currentMode = 1;
    }
}

void numberobj_47_valin_set(number v) {
    this->numberobj_47_value_set(v);
}

void numberobj_47_format_set(number v) {
    this->numberobj_47_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_48_valin_set(number v) {
    this->numberobj_48_value_set(v);
}

void numberobj_48_format_set(number v) {
    this->numberobj_48_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void loadbang_16_startupbang_bang() {
    this->loadbang_16_output_bang();
}

void message_24_listin_list_set(const list& v) {
    this->message_24_set_set(v);
}

void message_24_listin_number_set(number v) {
    this->message_24_set_set(v);
}

void message_24_listin_bang_bang() {
    this->message_24_trigger_bang();
}

void numbertilde_45_sig_number_set(number v) {
    this->numbertilde_45_outValue = v;
}

void numbertilde_45_sig_list_set(const list& v) {
    this->numbertilde_45_outValue = v[0];
}

void numbertilde_45_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_45_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_45_currentMode = 1;
    }
}

void message_25_listin_list_set(const list& v) {
    this->message_25_set_set(v);
}

void message_25_listin_number_set(number v) {
    this->message_25_set_set(v);
}

void message_25_listin_bang_bang() {
    this->message_25_trigger_bang();
}

void toggle_04_valin_set(number v) {
    this->toggle_04_value_number_set(v);
}

void numberobj_49_valin_set(number v) {
    this->numberobj_49_value_set(v);
}

void numberobj_49_format_set(number v) {
    this->numberobj_49_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void message_26_listin_list_set(const list& v) {
    this->message_26_set_set(v);
}

void message_26_listin_number_set(number v) {
    this->message_26_set_set(v);
}

void message_26_listin_bang_bang() {
    this->message_26_trigger_bang();
}

void numbertilde_46_sig_number_set(number v) {
    this->numbertilde_46_outValue = v;
}

void numbertilde_46_sig_list_set(const list& v) {
    this->numbertilde_46_outValue = v[0];
}

void numbertilde_46_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_46_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_46_currentMode = 1;
    }
}

void numbertilde_47_sig_number_set(number v) {
    this->numbertilde_47_outValue = v;
}

void numbertilde_47_sig_list_set(const list& v) {
    this->numbertilde_47_outValue = v[0];
}

void numbertilde_47_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_47_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_47_currentMode = 1;
    }
}

void loadbang_17_startupbang_bang() {
    this->loadbang_17_output_bang();
}

void message_27_listin_list_set(const list& v) {
    this->message_27_set_set(v);
}

void message_27_listin_number_set(number v) {
    this->message_27_set_set(v);
}

void message_27_listin_bang_bang() {
    this->message_27_trigger_bang();
}

void numbertilde_48_sig_number_set(number v) {
    this->numbertilde_48_outValue = v;
}

void numbertilde_48_sig_list_set(const list& v) {
    this->numbertilde_48_outValue = v[0];
}

void numbertilde_48_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_48_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_48_currentMode = 1;
    }
}

void loadbang_18_startupbang_bang() {
    this->loadbang_18_output_bang();
}

void message_28_listin_list_set(const list& v) {
    this->message_28_set_set(v);
}

void message_28_listin_number_set(number v) {
    this->message_28_set_set(v);
}

void message_28_listin_bang_bang() {
    this->message_28_trigger_bang();
}

void numberobj_50_valin_set(number v) {
    this->numberobj_50_value_set(v);
}

void numberobj_50_format_set(number v) {
    this->numberobj_50_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_49_sig_number_set(number v) {
    this->numbertilde_49_outValue = v;
}

void numbertilde_49_sig_list_set(const list& v) {
    this->numbertilde_49_outValue = v[0];
}

void numbertilde_49_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_49_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_49_currentMode = 1;
    }
}

void numbertilde_50_sig_number_set(number v) {
    this->numbertilde_50_outValue = v;
}

void numbertilde_50_sig_list_set(const list& v) {
    this->numbertilde_50_outValue = v[0];
}

void numbertilde_50_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_50_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_50_currentMode = 1;
    }
}

void numbertilde_51_sig_number_set(number v) {
    this->numbertilde_51_outValue = v;
}

void numbertilde_51_sig_list_set(const list& v) {
    this->numbertilde_51_outValue = v[0];
}

void numbertilde_51_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_51_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_51_currentMode = 1;
    }
}

void numbertilde_52_sig_number_set(number v) {
    this->numbertilde_52_outValue = v;
}

void numbertilde_52_sig_list_set(const list& v) {
    this->numbertilde_52_outValue = v[0];
}

void numbertilde_52_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_52_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_52_currentMode = 1;
    }
}

void loadbang_19_startupbang_bang() {
    this->loadbang_19_output_bang();
}

void message_29_listin_list_set(const list& v) {
    this->message_29_set_set(v);
}

void message_29_listin_number_set(number v) {
    this->message_29_set_set(v);
}

void message_29_listin_bang_bang() {
    this->message_29_trigger_bang();
}

void loadbang_20_startupbang_bang() {
    this->loadbang_20_output_bang();
}

void message_30_listin_list_set(const list& v) {
    this->message_30_set_set(v);
}

void message_30_listin_number_set(number v) {
    this->message_30_set_set(v);
}

void message_30_listin_bang_bang() {
    this->message_30_trigger_bang();
}

void numbertilde_53_sig_number_set(number v) {
    this->numbertilde_53_outValue = v;
}

void numbertilde_53_sig_list_set(const list& v) {
    this->numbertilde_53_outValue = v[0];
}

void numbertilde_53_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_53_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_53_currentMode = 1;
    }
}

void numbertilde_54_sig_number_set(number v) {
    this->numbertilde_54_outValue = v;
}

void numbertilde_54_sig_list_set(const list& v) {
    this->numbertilde_54_outValue = v[0];
}

void numbertilde_54_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_54_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_54_currentMode = 1;
    }
}

void numbertilde_55_sig_number_set(number v) {
    this->numbertilde_55_outValue = v;
}

void numbertilde_55_sig_list_set(const list& v) {
    this->numbertilde_55_outValue = v[0];
}

void numbertilde_55_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_55_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_55_currentMode = 1;
    }
}

void numbertilde_56_sig_number_set(number v) {
    this->numbertilde_56_outValue = v;
}

void numbertilde_56_sig_list_set(const list& v) {
    this->numbertilde_56_outValue = v[0];
}

void numbertilde_56_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_56_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_56_currentMode = 1;
    }
}

void numbertilde_24_value_set(number v) {
    this->numberobj_31_value_set(v);
}

void linetilde_04_target_bang() {}

void numbertilde_14_value_set(number ) {}

void linetilde_05_target_bang() {}

void numbertilde_15_value_set(number ) {}

void numbertilde_28_value_set(number ) {}

void numbertilde_17_value_set(number ) {}

void numbertilde_16_value_set(number ) {}

void numbertilde_18_value_set(number ) {}

void numbertilde_20_value_set(number ) {}

void numbertilde_22_value_set(number ) {}

void numbertilde_23_value_set(number ) {}

void numbertilde_25_value_set(number ) {}

void linetilde_06_target_bang() {}

void linetilde_07_target_bang() {}

void linetilde_08_target_bang() {}

void linetilde_09_target_bang() {}

void linetilde_10_target_bang() {}

void numbertilde_21_value_set(number ) {}

void numbertilde_19_value_set(number ) {}

void numbertilde_26_value_set(number ) {}

void numbertilde_29_value_set(number ) {}

void numbertilde_31_value_set(number ) {}

void numbertilde_33_value_set(number ) {}

void numbertilde_35_value_set(number ) {}

void numbertilde_27_value_set(number ) {}

void numbertilde_30_value_set(number ) {}

void numbertilde_32_value_set(number ) {}

void numbertilde_34_value_set(number ) {}

void numbertilde_36_value_set(number ) {}

void linetilde_11_target_bang() {}

void numbertilde_48_value_set(number ) {}

void numbertilde_38_value_set(number ) {}

void numbertilde_37_value_set(number ) {}

void numbertilde_40_value_set(number ) {}

void numbertilde_41_value_set(number ) {}

void numbertilde_43_value_set(number ) {}

void numbertilde_44_value_set(number ) {}

void numbertilde_45_value_set(number ) {}

void linetilde_12_target_bang() {}

void linetilde_13_target_bang() {}

void linetilde_14_target_bang() {}

void linetilde_15_target_bang() {}

void linetilde_16_target_bang() {}

void numbertilde_42_value_set(number ) {}

void numbertilde_39_value_set(number ) {}

void numbertilde_46_value_set(number ) {}

void numbertilde_49_value_set(number ) {}

void numbertilde_51_value_set(number ) {}

void numbertilde_53_value_set(number ) {}

void numbertilde_55_value_set(number ) {}

void numbertilde_47_value_set(number ) {}

void numbertilde_50_value_set(number ) {}

void numbertilde_52_value_set(number ) {}

void numbertilde_54_value_set(number ) {}

void numbertilde_56_value_set(number ) {}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 2;
}

Index getNumOutputChannels() const {
    return 2;
}

void allocateDataRefs() {
    this->p_01->allocateDataRefs();
    this->p_02->allocateDataRefs();
    this->p_03->allocateDataRefs();
    this->p_04->allocateDataRefs();
    this->p_05->allocateDataRefs();

    if (this->RNBODefaultSinus->hasRequestedSize()) {
        if (this->RNBODefaultSinus->wantsFill())
            this->fillRNBODefaultSinus(this->RNBODefaultSinus);

        this->getEngine()->sendDataRefUpdated(0);
    }

    this->gen_02_delay_1_buffer = this->gen_02_delay_1_buffer->allocateIfNeeded();

    if (this->gen_02_delay_1_bufferobj->hasRequestedSize()) {
        if (this->gen_02_delay_1_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_02_delay_1_bufferobj);

        this->getEngine()->sendDataRefUpdated(1);
    }

    this->gen_07_delay_1_buffer = this->gen_07_delay_1_buffer->allocateIfNeeded();

    if (this->gen_07_delay_1_bufferobj->hasRequestedSize()) {
        if (this->gen_07_delay_1_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_07_delay_1_bufferobj);

        this->getEngine()->sendDataRefUpdated(2);
    }
}

void initializeObjects() {
    this->message_09_init();
    this->numberobj_12_init();
    this->numberobj_13_init();
    this->numberobj_14_init();
    this->numbertilde_14_init();
    this->numberobj_15_init();
    this->numberobj_16_init();
    this->numberobj_17_init();
    this->numbertilde_15_init();
    this->numbertilde_16_init();
    this->gen_02_delay_1_init();
    this->gen_02_history_2_init();
    this->gen_02_history_3_init();
    this->gen_02_history_4_init();
    this->gen_02_history_5_init();
    this->numbertilde_17_init();
    this->ip_01_init();
    this->numberobj_18_init();
    this->numberobj_19_init();
    this->message_10_init();
    this->ip_02_init();
    this->message_11_init();
    this->ip_03_init();
    this->numberobj_20_init();
    this->numberobj_21_init();
    this->numbertilde_18_init();
    this->numberobj_22_init();
    this->numbertilde_19_init();
    this->numberobj_23_init();
    this->numberobj_24_init();
    this->numberobj_25_init();
    this->numbertilde_20_init();
    this->numbertilde_21_init();
    this->numberobj_26_init();
    this->numbertilde_22_init();
    this->numberobj_27_init();
    this->numbertilde_23_init();
    this->numberobj_28_init();
    this->numberobj_29_init();
    this->numbertilde_24_init();
    this->message_12_init();
    this->numbertilde_25_init();
    this->numberobj_30_init();
    this->numberobj_31_init();
    this->message_13_init();
    this->ip_04_init();
    this->numberobj_32_init();
    this->message_14_init();
    this->numbertilde_26_init();
    this->numbertilde_27_init();
    this->numbertilde_28_init();
    this->message_15_init();
    this->message_16_init();
    this->numberobj_33_init();
    this->numberobj_34_init();
    this->numberobj_35_init();
    this->numberobj_36_init();
    this->numbertilde_29_init();
    this->numbertilde_30_init();
    this->message_17_init();
    this->numbertilde_31_init();
    this->numbertilde_32_init();
    this->message_18_init();
    this->numbertilde_33_init();
    this->numbertilde_34_init();
    this->message_19_init();
    this->numberobj_37_init();
    this->numberobj_38_init();
    this->numberobj_39_init();
    this->message_20_init();
    this->numbertilde_35_init();
    this->numbertilde_36_init();
    this->message_21_init();
    this->numbertilde_37_init();
    this->message_22_init();
    this->gen_07_delay_1_init();
    this->gen_07_history_2_init();
    this->gen_07_history_3_init();
    this->gen_07_history_4_init();
    this->gen_07_history_5_init();
    this->numbertilde_38_init();
    this->numbertilde_39_init();
    this->message_23_init();
    this->numberobj_40_init();
    this->ip_05_init();
    this->ip_06_init();
    this->numberobj_41_init();
    this->numberobj_42_init();
    this->numberobj_43_init();
    this->numbertilde_40_init();
    this->numberobj_44_init();
    this->numbertilde_41_init();
    this->numbertilde_42_init();
    this->numberobj_45_init();
    this->numbertilde_43_init();
    this->numberobj_46_init();
    this->numbertilde_44_init();
    this->numberobj_47_init();
    this->numberobj_48_init();
    this->message_24_init();
    this->numbertilde_45_init();
    this->message_25_init();
    this->ip_07_init();
    this->numberobj_49_init();
    this->message_26_init();
    this->numbertilde_46_init();
    this->numbertilde_47_init();
    this->message_27_init();
    this->numbertilde_48_init();
    this->message_28_init();
    this->numberobj_50_init();
    this->numbertilde_49_init();
    this->numbertilde_50_init();
    this->numbertilde_51_init();
    this->numbertilde_52_init();
    this->message_29_init();
    this->message_30_init();
    this->numbertilde_53_init();
    this->numbertilde_54_init();
    this->numbertilde_55_init();
    this->numbertilde_56_init();
    this->p_01->initializeObjects();
    this->p_02->initializeObjects();
    this->p_03->initializeObjects();
    this->p_04->initializeObjects();
    this->p_05->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->p_01->startup();
    this->p_02->startup();
    this->p_03->startup();
    this->p_04->startup();
    this->p_05->startup();
    this->getEngine()->scheduleClockEvent(this, 1673828112, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, -1541126581, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, -894149362, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, 1912853063, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, 185863241, 0 + this->_currentTime);;

    if ((bool)(this->metro_01_on))
        this->metro_01_on_set(1);

    this->getEngine()->scheduleClockEvent(this, -1735137014, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, 832840460, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, -677631670, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, -1757644273, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, -30654451, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, 1049358152, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, 810333201, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, 1696335371, 0 + this->_currentTime);;
    this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    this->timevalue_01_sendValue();

    {
        this->scheduleParamInit(0, 0);
    }

    {
        this->scheduleParamInit(1, 0);
    }

    {
        this->scheduleParamInit(2, 0);
    }

    {
        this->scheduleParamInit(3, 0);
    }

    {
        this->scheduleParamInit(4, 0);
    }

    {
        this->scheduleParamInit(5, 0);
    }

    {
        this->scheduleParamInit(6, 0);
    }

    {
        this->scheduleParamInit(7, 0);
    }

    {
        this->scheduleParamInit(8, 0);
    }

    {
        this->scheduleParamInit(9, 0);
    }

    {
        this->scheduleParamInit(10, 2);
    }

    {
        this->scheduleParamInit(11, 5);
    }

    {
        this->scheduleParamInit(12, 0);
    }

    {
        this->scheduleParamInit(13, 0);
    }

    this->processParamInitEvents();
}

number param_01_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0.01 ? 0.01 : v));
    return v;
}

void numberobj_13_output_set(number ) {}

void numberobj_13_value_set(number v) {
    this->numberobj_13_value_setter(v);
    v = this->numberobj_13_value;
    number localvalue = v;

    if (this->numberobj_13_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-252"), localvalue, this->_currentTime);
    this->numberobj_13_output_set(localvalue);
}

void p_03_in3_number_set(number v) {
    this->p_03->updateTime(this->_currentTime);
    this->p_03->eventinlet_04_out1_number_set(v);
}

void numberobj_22_output_set(number v) {
    this->p_03_in3_number_set(v);
}

void numberobj_22_value_set(number v) {
    this->numberobj_22_value_setter(v);
    v = this->numberobj_22_value;
    number localvalue = v;

    if (this->numberobj_22_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-285"), localvalue, this->_currentTime);
    this->numberobj_22_output_set(localvalue);
}

void trigger_03_out2_set(number v) {
    this->numberobj_22_value_set(v);
}

void select_02_match1_bang() {}

void delay_01_stop_bang() {
    this->getEngine()->flushClockEvents(this, -1357044121, false);;
}

void delay_01_input_bang() {
    if ((bool)(!(bool)(this->delay_01_delayall)))
        this->delay_01_stop_bang();

    this->getEngine()->scheduleClockEvent(this, -1357044121, this->delay_01_time + this->_currentTime);;
}

void select_02_match2_bang() {
    this->delay_01_input_bang();
}

void select_02_nomatch_number_set(number ) {}

void select_02_input_number_set(number v) {
    if (v == this->select_02_test1)
        this->select_02_match1_bang();
    else if (v == this->select_02_test2)
        this->select_02_match2_bang();
    else
        this->select_02_nomatch_number_set(v);
}

void trigger_03_out1_set(number v) {
    this->select_02_input_number_set(v);
}

void trigger_03_input_number_set(number v) {
    this->trigger_03_out2_set(trunc(v));
    this->trigger_03_out1_set(trunc(v));
}

void toggle_02_output_set(number v) {
    this->trigger_03_input_number_set(v);
}

void toggle_02_value_number_set(number v) {
    this->toggle_02_value_number_setter(v);
    v = this->toggle_02_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-235"), v, this->_currentTime);
    this->toggle_02_output_set(v);
}

void message_09_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_02_value_number_set(converted);
    }
}

void message_09_trigger_bang() {
    this->message_09_out_set(this->message_09_set);
}

void trigger_02_out2_bang() {
    this->message_09_trigger_bang();
}

void listreg_01_in2_set(const list& v) {
    this->listreg_01_in2 = jsCreateListCopy(v);

    {
        list __value = {};
        this->listreg_01_in1 = jsCreateListCopy(__value);
    };

    this->listreg_01_stored = jsCreateListCopy(v);
}

void dspexpr_66_in2_set(number v) {
    this->dspexpr_66_in2 = v;
}

void numberobj_50_output_set(number v) {
    this->dspexpr_66_in2_set(v);
}

void numberobj_50_value_set(number v) {
    this->numberobj_50_value_setter(v);
    v = this->numberobj_50_value;
    number localvalue = v;

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_50_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-369"), localvalue, this->_currentTime);
    this->numberobj_50_output_set(localvalue);
}

void scale_13_out_set(const list& v) {
    this->scale_13_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_50_value_set(converted);
    }
}

void scale_13_input_set(const list& v) {
    this->scale_13_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_13_inlow,
            this->scale_13_inhigh,
            this->scale_13_outlow,
            this->scale_13_outhigh,
            this->scale_13_power
        ));
    }

    this->scale_13_out_set(tmp);
}

void dspexpr_50_in2_set(number v) {
    this->dspexpr_50_in2 = v;
}

void numberobj_33_output_set(number v) {
    this->dspexpr_50_in2_set(v);
}

void numberobj_33_value_set(number v) {
    this->numberobj_33_value_setter(v);
    v = this->numberobj_33_value;
    number localvalue = v;

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_33_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-130"), localvalue, this->_currentTime);
    this->numberobj_33_output_set(localvalue);
}

void scale_08_out_set(const list& v) {
    this->scale_08_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_33_value_set(converted);
    }
}

void scale_08_input_set(const list& v) {
    this->scale_08_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_08_inlow,
            this->scale_08_inhigh,
            this->scale_08_outlow,
            this->scale_08_outhigh,
            this->scale_08_power
        ));
    }

    this->scale_08_out_set(tmp);
}

void ip_01_value_set(number v) {
    this->ip_01_value = v;
    this->ip_01_fillSigBuf();
    this->ip_01_lastValue = v;
}

void numberobj_18_output_set(number v) {
    {
        list converted = {v};
        this->scale_13_input_set(converted);
    }

    {
        list converted = {v};
        this->scale_08_input_set(converted);
    }

    this->ip_01_value_set(v);
}

void numberobj_18_value_set(number v) {
    this->numberobj_18_value_setter(v);
    v = this->numberobj_18_value;
    number localvalue = v;

    if (this->numberobj_18_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-29"), localvalue, this->_currentTime);
    this->numberobj_18_output_set(localvalue);
}

void p_03_out1_number_set(number v) {
    this->numberobj_18_value_set(v);
}

void p_03_in1_list_set(const list& v) {
    this->p_03->updateTime(this->_currentTime);
    this->p_03->eventinlet_02_out1_list_set(v);
}

void scale_03_out_set(const list& v) {
    this->scale_03_out = jsCreateListCopy(v);
    this->p_03_in1_list_set(v);
}

void scale_03_input_set(const list& v) {
    this->scale_03_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_03_inlow,
            this->scale_03_inhigh,
            this->scale_03_outlow,
            this->scale_03_outhigh,
            this->scale_03_power
        ));
    }

    this->scale_03_out_set(tmp);
}

void trigger_02_out1_set(number v) {
    {
        list converted = {v};
        this->listreg_01_in2_set(converted);
    }

    {
        list converted = {v};
        this->scale_03_input_set(converted);
    }
}

void trigger_02_input_number_set(number v) {
    this->trigger_02_out2_bang();
    this->trigger_02_out1_set(v);
}

number param_02_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void linetilde_16_time_set(number v) {
    this->linetilde_16_time = v;
}

void linetilde_16_segments_set(const list& v) {
    this->linetilde_16_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_16_time == 0) {
            this->linetilde_16_activeRamps->length = 0;
            this->linetilde_16_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_16_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_16_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_16_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_16_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_16_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_16_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_16_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_16_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_16_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_16_activeRamps->push(lastRampValue);
                this->linetilde_16_activeRamps->push(0);
                this->linetilde_16_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_16_keepramp)) {
                        this->linetilde_16_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_16_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_16_activeRamps->push(destinationValue);
                this->linetilde_16_activeRamps->push(inc);
                this->linetilde_16_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void numberobj_48_output_set(number v) {
    {
        list converted = {v};
        this->linetilde_16_segments_set(converted);
    }
}

void numberobj_48_value_set(number v) {
    this->numberobj_48_value_setter(v);
    v = this->numberobj_48_value;
    number localvalue = v;

    if (this->numberobj_48_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-465"), localvalue, this->_currentTime);
    this->numberobj_48_output_set(localvalue);
}

void linetilde_13_time_set(number v) {
    this->linetilde_13_time = v;
}

void linetilde_13_segments_set(const list& v) {
    this->linetilde_13_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_13_time == 0) {
            this->linetilde_13_activeRamps->length = 0;
            this->linetilde_13_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_13_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_13_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_13_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_13_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_13_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_13_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_13_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_13_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_13_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_13_activeRamps->push(lastRampValue);
                this->linetilde_13_activeRamps->push(0);
                this->linetilde_13_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_13_keepramp)) {
                        this->linetilde_13_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_13_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_13_activeRamps->push(destinationValue);
                this->linetilde_13_activeRamps->push(inc);
                this->linetilde_13_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void numberobj_45_output_set(number v) {
    {
        list converted = {v};
        this->linetilde_13_segments_set(converted);
    }
}

void numberobj_45_value_set(number v) {
    this->numberobj_45_value_setter(v);
    v = this->numberobj_45_value;
    number localvalue = v;

    if (this->numberobj_45_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-461"), localvalue, this->_currentTime);
    this->numberobj_45_output_set(localvalue);
}

void expr_19_out1_set(number v) {
    this->expr_19_out1 = v;
    this->numberobj_45_value_set(this->expr_19_out1);
}

void expr_19_in1_set(number in1) {
    this->expr_19_in1 = in1;
    this->expr_19_out1_set(this->expr_19_in2 - this->expr_19_in1);//#map:!-_obj-463:1
}

void linetilde_10_time_set(number v) {
    this->linetilde_10_time = v;
}

void linetilde_10_segments_set(const list& v) {
    this->linetilde_10_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_10_time == 0) {
            this->linetilde_10_activeRamps->length = 0;
            this->linetilde_10_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_10_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_10_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_10_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_10_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_10_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_10_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_10_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_10_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_10_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_10_activeRamps->push(lastRampValue);
                this->linetilde_10_activeRamps->push(0);
                this->linetilde_10_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_10_keepramp)) {
                        this->linetilde_10_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_10_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_10_activeRamps->push(destinationValue);
                this->linetilde_10_activeRamps->push(inc);
                this->linetilde_10_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void numberobj_29_output_set(number v) {
    {
        list converted = {v};
        this->linetilde_10_segments_set(converted);
    }
}

void numberobj_29_value_set(number v) {
    this->numberobj_29_value_setter(v);
    v = this->numberobj_29_value;
    number localvalue = v;

    if (this->numberobj_29_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-14"), localvalue, this->_currentTime);
    this->numberobj_29_output_set(localvalue);
}

void linetilde_07_time_set(number v) {
    this->linetilde_07_time = v;
}

void linetilde_07_segments_set(const list& v) {
    this->linetilde_07_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_07_time == 0) {
            this->linetilde_07_activeRamps->length = 0;
            this->linetilde_07_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_07_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_07_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_07_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_07_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_07_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_07_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_07_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_07_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_07_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_07_activeRamps->push(lastRampValue);
                this->linetilde_07_activeRamps->push(0);
                this->linetilde_07_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_07_keepramp)) {
                        this->linetilde_07_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_07_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_07_activeRamps->push(destinationValue);
                this->linetilde_07_activeRamps->push(inc);
                this->linetilde_07_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void numberobj_26_output_set(number v) {
    {
        list converted = {v};
        this->linetilde_07_segments_set(converted);
    }
}

void numberobj_26_value_set(number v) {
    this->numberobj_26_value_setter(v);
    v = this->numberobj_26_value;
    number localvalue = v;

    if (this->numberobj_26_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-18"), localvalue, this->_currentTime);
    this->numberobj_26_output_set(localvalue);
}

void expr_12_out1_set(number v) {
    this->expr_12_out1 = v;
    this->numberobj_26_value_set(this->expr_12_out1);
}

void expr_12_in1_set(number in1) {
    this->expr_12_in1 = in1;
    this->expr_12_out1_set(this->expr_12_in2 - this->expr_12_in1);//#map:!-_obj-16:1
}

number param_03_value_constrain(number v) const {
    v = (v > 10 ? 10 : (v < 0.05 ? 0.05 : v));
    return v;
}

void linetilde_15_time_set(number v) {
    this->linetilde_15_time = v;
}

void linetilde_15_segments_set(const list& v) {
    this->linetilde_15_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_15_time == 0) {
            this->linetilde_15_activeRamps->length = 0;
            this->linetilde_15_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_15_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_15_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_15_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_15_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_15_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_15_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_15_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_15_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_15_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_15_activeRamps->push(lastRampValue);
                this->linetilde_15_activeRamps->push(0);
                this->linetilde_15_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_15_keepramp)) {
                        this->linetilde_15_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_15_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_15_activeRamps->push(destinationValue);
                this->linetilde_15_activeRamps->push(inc);
                this->linetilde_15_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void numberobj_46_output_set(number v) {
    {
        list converted = {v};
        this->linetilde_15_segments_set(converted);
    }
}

void numberobj_46_value_set(number v) {
    this->numberobj_46_value_setter(v);
    v = this->numberobj_46_value;
    number localvalue = v;

    if (this->numberobj_46_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-469"), localvalue, this->_currentTime);
    this->numberobj_46_output_set(localvalue);
}

void linetilde_12_time_set(number v) {
    this->linetilde_12_time = v;
}

void linetilde_12_segments_set(const list& v) {
    this->linetilde_12_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_12_time == 0) {
            this->linetilde_12_activeRamps->length = 0;
            this->linetilde_12_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_12_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_12_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_12_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_12_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_12_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_12_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_12_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_12_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_12_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_12_activeRamps->push(lastRampValue);
                this->linetilde_12_activeRamps->push(0);
                this->linetilde_12_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_12_keepramp)) {
                        this->linetilde_12_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_12_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_12_activeRamps->push(destinationValue);
                this->linetilde_12_activeRamps->push(inc);
                this->linetilde_12_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void expr_18_out1_set(number v) {
    this->expr_18_out1 = v;

    {
        list converted = {this->expr_18_out1};
        this->linetilde_12_segments_set(converted);
    }
}

void expr_18_in1_set(number in1) {
    this->expr_18_in1 = in1;
    this->expr_18_out1_set(this->expr_18_in1 + this->expr_18_in2);//#map:+_obj-459:1
}

void linetilde_09_time_set(number v) {
    this->linetilde_09_time = v;
}

void linetilde_09_segments_set(const list& v) {
    this->linetilde_09_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_09_time == 0) {
            this->linetilde_09_activeRamps->length = 0;
            this->linetilde_09_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_09_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_09_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_09_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_09_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_09_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_09_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_09_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_09_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_09_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_09_activeRamps->push(lastRampValue);
                this->linetilde_09_activeRamps->push(0);
                this->linetilde_09_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_09_keepramp)) {
                        this->linetilde_09_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_09_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_09_activeRamps->push(destinationValue);
                this->linetilde_09_activeRamps->push(inc);
                this->linetilde_09_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void numberobj_27_output_set(number v) {
    {
        list converted = {v};
        this->linetilde_09_segments_set(converted);
    }
}

void numberobj_27_value_set(number v) {
    this->numberobj_27_value_setter(v);
    v = this->numberobj_27_value;
    number localvalue = v;

    if (this->numberobj_27_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-6"), localvalue, this->_currentTime);
    this->numberobj_27_output_set(localvalue);
}

void linetilde_06_time_set(number v) {
    this->linetilde_06_time = v;
}

void linetilde_06_segments_set(const list& v) {
    this->linetilde_06_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_06_time == 0) {
            this->linetilde_06_activeRamps->length = 0;
            this->linetilde_06_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_06_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_06_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_06_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_06_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_06_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_06_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_06_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_06_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_06_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_06_activeRamps->push(lastRampValue);
                this->linetilde_06_activeRamps->push(0);
                this->linetilde_06_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_06_keepramp)) {
                        this->linetilde_06_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_06_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_06_activeRamps->push(destinationValue);
                this->linetilde_06_activeRamps->push(inc);
                this->linetilde_06_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void expr_11_out1_set(number v) {
    this->expr_11_out1 = v;

    {
        list converted = {this->expr_11_out1};
        this->linetilde_06_segments_set(converted);
    }
}

void expr_11_in1_set(number in1) {
    this->expr_11_in1 = in1;
    this->expr_11_out1_set(this->expr_11_in1 + this->expr_11_in2);//#map:+_obj-20:1
}

number param_04_value_constrain(number v) const {
    v = (v > 20 ? 20 : (v < 0 ? 0 : v));
    return v;
}

void ip_05_value_set(number v) {
    this->ip_05_value = v;
    this->ip_05_fillSigBuf();
    this->ip_05_lastValue = v;
}

void numberobj_42_output_set(number v) {
    this->ip_05_value_set(v);
}

void numberobj_42_value_set(number v) {
    this->numberobj_42_value_setter(v);
    v = this->numberobj_42_value;
    number localvalue = v;

    if (this->numberobj_42_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-56"), localvalue, this->_currentTime);
    this->numberobj_42_output_set(localvalue);
}

void scale_12_out_set(const list& v) {
    this->scale_12_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_42_value_set(converted);
    }
}

void scale_12_input_set(const list& v) {
    this->scale_12_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_12_inlow,
            this->scale_12_inhigh,
            this->scale_12_outlow,
            this->scale_12_outhigh,
            this->scale_12_power
        ));
    }

    this->scale_12_out_set(tmp);
}

void linetilde_14_time_set(number v) {
    this->linetilde_14_time = v;
}

void linetilde_14_segments_set(const list& v) {
    this->linetilde_14_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_14_time == 0) {
            this->linetilde_14_activeRamps->length = 0;
            this->linetilde_14_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_14_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_14_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_14_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_14_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_14_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_14_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_14_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_14_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_14_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_14_activeRamps->push(lastRampValue);
                this->linetilde_14_activeRamps->push(0);
                this->linetilde_14_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_14_keepramp)) {
                        this->linetilde_14_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_14_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_14_activeRamps->push(destinationValue);
                this->linetilde_14_activeRamps->push(inc);
                this->linetilde_14_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void numberobj_47_output_set(number v) {
    {
        list converted = {v};
        this->linetilde_14_segments_set(converted);
    }
}

void numberobj_47_value_set(number v) {
    this->numberobj_47_value_setter(v);
    v = this->numberobj_47_value;
    number localvalue = v;

    if (this->numberobj_47_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-452"), localvalue, this->_currentTime);
    this->numberobj_47_output_set(localvalue);
}

void scale_11_out_set(const list& v) {
    this->scale_11_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_47_value_set(converted);
    }
}

void scale_11_input_set(const list& v) {
    this->scale_11_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_11_inlow,
            this->scale_11_inhigh,
            this->scale_11_outlow,
            this->scale_11_outhigh,
            this->scale_11_power
        ));
    }

    this->scale_11_out_set(tmp);
}

void ip_06_value_set(number v) {
    this->ip_06_value = v;
    this->ip_06_fillSigBuf();
    this->ip_06_lastValue = v;
}

void numberobj_41_output_set(number v) {
    this->ip_06_value_set(v);
}

void numberobj_41_value_set(number v) {
    this->numberobj_41_value_setter(v);
    v = this->numberobj_41_value;
    number localvalue = v;

    if (this->numberobj_41_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-203"), localvalue, this->_currentTime);
    this->numberobj_41_output_set(localvalue);
}

void scale_10_out_set(const list& v) {
    this->scale_10_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_41_value_set(converted);
    }
}

void scale_10_input_set(const list& v) {
    this->scale_10_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_10_inlow,
            this->scale_10_inhigh,
            this->scale_10_outlow,
            this->scale_10_outhigh,
            this->scale_10_power
        ));
    }

    this->scale_10_out_set(tmp);
}

void ip_02_value_set(number v) {
    this->ip_02_value = v;
    this->ip_02_fillSigBuf();
    this->ip_02_lastValue = v;
}

void numberobj_21_output_set(number v) {
    this->ip_02_value_set(v);
}

void numberobj_21_value_set(number v) {
    this->numberobj_21_value_setter(v);
    v = this->numberobj_21_value;
    number localvalue = v;

    if (this->numberobj_21_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-61"), localvalue, this->_currentTime);
    this->numberobj_21_output_set(localvalue);
}

void scale_07_out_set(const list& v) {
    this->scale_07_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_21_value_set(converted);
    }
}

void scale_07_input_set(const list& v) {
    this->scale_07_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_07_inlow,
            this->scale_07_inhigh,
            this->scale_07_outlow,
            this->scale_07_outhigh,
            this->scale_07_power
        ));
    }

    this->scale_07_out_set(tmp);
}

void linetilde_08_time_set(number v) {
    this->linetilde_08_time = v;
}

void linetilde_08_segments_set(const list& v) {
    this->linetilde_08_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_08_time == 0) {
            this->linetilde_08_activeRamps->length = 0;
            this->linetilde_08_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_08_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_08_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_08_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_08_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_08_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_08_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_08_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_08_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_08_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_08_activeRamps->push(lastRampValue);
                this->linetilde_08_activeRamps->push(0);
                this->linetilde_08_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_08_keepramp)) {
                        this->linetilde_08_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_08_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_08_activeRamps->push(destinationValue);
                this->linetilde_08_activeRamps->push(inc);
                this->linetilde_08_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void numberobj_28_output_set(number v) {
    {
        list converted = {v};
        this->linetilde_08_segments_set(converted);
    }
}

void numberobj_28_value_set(number v) {
    this->numberobj_28_value_setter(v);
    v = this->numberobj_28_value;
    number localvalue = v;

    if (this->numberobj_28_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-28"), localvalue, this->_currentTime);
    this->numberobj_28_output_set(localvalue);
}

void scale_06_out_set(const list& v) {
    this->scale_06_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_28_value_set(converted);
    }
}

void scale_06_input_set(const list& v) {
    this->scale_06_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_06_inlow,
            this->scale_06_inhigh,
            this->scale_06_outlow,
            this->scale_06_outhigh,
            this->scale_06_power
        ));
    }

    this->scale_06_out_set(tmp);
}

void ip_03_value_set(number v) {
    this->ip_03_value = v;
    this->ip_03_fillSigBuf();
    this->ip_03_lastValue = v;
}

void numberobj_20_output_set(number v) {
    this->ip_03_value_set(v);
}

void numberobj_20_value_set(number v) {
    this->numberobj_20_value_setter(v);
    v = this->numberobj_20_value;
    number localvalue = v;

    if (this->numberobj_20_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-198"), localvalue, this->_currentTime);
    this->numberobj_20_output_set(localvalue);

    {
        if (localvalue != this->numberobj_20_lastValue) {
            this->getEngine()->presetTouched();
            this->numberobj_20_lastValue = localvalue;
        }
    }
}

void scale_04_out_set(const list& v) {
    this->scale_04_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_20_value_set(converted);
    }
}

void scale_04_input_set(const list& v) {
    this->scale_04_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_04_inlow,
            this->scale_04_inhigh,
            this->scale_04_outlow,
            this->scale_04_outhigh,
            this->scale_04_power
        ));
    }

    this->scale_04_out_set(tmp);
}

number param_05_value_constrain(number v) const {
    v = (v > 5000 ? 5000 : (v < 270 ? 270 : v));
    return v;
}

void selector_04_onoff_set(number v) {
    this->selector_04_onoff = v;
}

void expr_20_out1_set(number v) {
    this->expr_20_out1 = v;
    this->selector_04_onoff_set(this->expr_20_out1);
}

void expr_20_in1_set(number in1) {
    this->expr_20_in1 = in1;
    this->expr_20_out1_set(this->expr_20_in1 + this->expr_20_in2);//#map:+_obj-376:1
}

void toggle_04_output_set(number v) {
    this->expr_20_in1_set(v);
}

void toggle_04_value_number_set(number v) {
    this->toggle_04_value_number_setter(v);
    v = this->toggle_04_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-377"), v, this->_currentTime);
    this->toggle_04_output_set(v);
}

void message_25_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_04_value_number_set(converted);
    }
}

void message_25_trigger_bang() {
    this->message_25_out_set(this->message_25_set);
}

void select_04_match1_bang() {
    this->message_25_trigger_bang();
}

void message_26_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_04_value_number_set(converted);
    }
}

void message_26_trigger_bang() {
    this->message_26_out_set(this->message_26_set);
}

void select_04_nomatch_number_set(number v) {
    RNBO_UNUSED(v);
    this->message_26_trigger_bang();
}

void select_04_input_number_set(number v) {
    if (v == this->select_04_test1)
        this->select_04_match1_bang();
    else
        this->select_04_nomatch_number_set(v);
}

void filtercoeff_05_frequency_set(number v) {
    this->filtercoeff_05_frequency = v;
}

void numberobj_44_output_set(number v) {
    this->filtercoeff_05_frequency_set(v);
}

void numberobj_44_value_set(number v) {
    this->numberobj_44_value_setter(v);
    v = this->numberobj_44_value;
    number localvalue = v;

    if (this->numberobj_44_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-363"), localvalue, this->_currentTime);
    this->numberobj_44_output_set(localvalue);
}

void selector_03_onoff_set(number v) {
    this->selector_03_onoff = v;
}

void expr_13_out1_set(number v) {
    this->expr_13_out1 = v;
    this->selector_03_onoff_set(this->expr_13_out1);
}

void expr_13_in1_set(number in1) {
    this->expr_13_in1 = in1;
    this->expr_13_out1_set(this->expr_13_in1 + this->expr_13_in2);//#map:+_obj-156:1
}

void toggle_03_output_set(number v) {
    this->expr_13_in1_set(v);
}

void toggle_03_value_number_set(number v) {
    this->toggle_03_value_number_setter(v);
    v = this->toggle_03_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-167"), v, this->_currentTime);
    this->toggle_03_output_set(v);
}

void message_13_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_03_value_number_set(converted);
    }
}

void message_13_trigger_bang() {
    this->message_13_out_set(this->message_13_set);
}

void select_01_match1_bang() {
    this->message_13_trigger_bang();
}

void message_14_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_03_value_number_set(converted);
    }
}

void message_14_trigger_bang() {
    this->message_14_out_set(this->message_14_set);
}

void select_01_nomatch_number_set(number v) {
    RNBO_UNUSED(v);
    this->message_14_trigger_bang();
}

void select_01_input_number_set(number v) {
    if (v == this->select_01_test1)
        this->select_01_match1_bang();
    else
        this->select_01_nomatch_number_set(v);
}

void filtercoeff_02_frequency_set(number v) {
    this->filtercoeff_02_frequency = v;
}

void numberobj_23_output_set(number v) {
    this->filtercoeff_02_frequency_set(v);
}

void numberobj_23_value_set(number v) {
    this->numberobj_23_value_setter(v);
    v = this->numberobj_23_value;
    number localvalue = v;

    if (this->numberobj_23_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-265"), localvalue, this->_currentTime);
    this->numberobj_23_output_set(localvalue);
}

number param_06_value_constrain(number v) const {
    v = (v > 0 ? 0 : (v < -60 ? -60 : v));
    return v;
}

void numberobj_30_output_set(number ) {}

void numberobj_30_value_set(number v) {
    this->numberobj_30_value_setter(v);
    v = this->numberobj_30_value;
    number localvalue = v;

    if (this->numberobj_30_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-218"), localvalue, this->_currentTime);
    this->numberobj_30_output_set(localvalue);
}

number param_07_value_constrain(number v) const {
    v = (v > 0.95 ? 0.95 : (v < -0.95 ? -0.95 : v));
    return v;
}

void gen_07_in3_set(number v) {
    this->gen_07_in3 = v;
}

void gen_02_in3_set(number v) {
    this->gen_02_in3 = v;
}

void numberobj_16_output_set(number ) {}

void numberobj_16_value_set(number v) {
    this->numberobj_16_value_setter(v);
    v = this->numberobj_16_value;
    number localvalue = v;

    if (this->numberobj_16_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-147"), localvalue, this->_currentTime);
    this->numberobj_16_output_set(localvalue);
}

void limi_03_postamp_set(number v) {
    this->limi_03_postamp_setter(v);
    v = this->limi_03_postamp;
}

void limi_04_postamp_set(number v) {
    this->limi_04_postamp_setter(v);
    v = this->limi_04_postamp;
}

void numberobj_12_output_set(number v) {
    this->limi_03_postamp_set(v);
    this->limi_04_postamp_set(v);
}

void numberobj_12_value_set(number v) {
    this->numberobj_12_value_setter(v);
    v = this->numberobj_12_value;
    number localvalue = v;

    if (this->numberobj_12_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-190"), localvalue, this->_currentTime);
    this->numberobj_12_output_set(localvalue);
}

void scale_02_out_set(const list& v) {
    this->scale_02_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_16_value_set(converted);
    }

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_12_value_set(converted);
    }
}

void scale_02_input_set(const list& v) {
    this->scale_02_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_02_inlow,
            this->scale_02_inhigh,
            this->scale_02_outlow,
            this->scale_02_outhigh,
            this->scale_02_power
        ));
    }

    this->scale_02_out_set(tmp);
}

void expr_10_out1_set(number v) {
    this->expr_10_out1 = v;

    {
        list converted = {this->expr_10_out1};
        this->scale_02_input_set(converted);
    }
}

void expr_10_in1_set(number in1) {
    this->expr_10_in1 = in1;
    this->expr_10_out1_set(rnbo_abs(this->expr_10_in1));//#map:abs_obj-138:1
}

number param_08_value_constrain(number v) const {
    v = (v > 300 ? 300 : (v < 20 ? 20 : v));
    return v;
}

void p_03_in2_number_set(number v) {
    this->p_03->updateTime(this->_currentTime);
    this->p_03->eventinlet_03_out1_number_set(v);
}

void numberobj_34_output_set(number v) {
    this->p_03_in2_number_set(v);
}

void numberobj_34_value_set(number v) {
    this->numberobj_34_value_setter(v);
    v = this->numberobj_34_value;
    number localvalue = v;

    if (this->numberobj_34_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-230"), localvalue, this->_currentTime);
    this->numberobj_34_output_set(localvalue);
}

void expr_14_out1_set(number v) {
    this->expr_14_out1 = v;
    this->numberobj_34_value_set(this->expr_14_out1);
}

void expr_14_in1_set(number in1) {
    this->expr_14_in1 = in1;
    this->expr_14_out1_set(this->expr_14_in1 * this->expr_14_in2);//#map:*_obj-227:1
}

void numberobj_35_output_set(number v) {
    this->expr_14_in1_set(v);
}

void numberobj_35_value_set(number v) {
    this->numberobj_35_value_setter(v);
    v = this->numberobj_35_value;
    number localvalue = v;

    if (this->numberobj_35_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-223"), localvalue, this->_currentTime);
    this->numberobj_35_output_set(localvalue);
}

void p_05_out1_number_set(number v) {
    this->numberobj_35_value_set(v);
}

void p_05_in1_number_set(number v) {
    this->p_05->updateTime(this->_currentTime);
    this->p_05->eventinlet_06_out1_number_set(v);
}

void numberobj_36_output_set(number v) {
    this->p_05_in1_number_set(v);
}

void numberobj_36_value_set(number v) {
    this->numberobj_36_value_setter(v);
    v = this->numberobj_36_value;
    number localvalue = v;

    if (this->numberobj_36_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-224"), localvalue, this->_currentTime);
    this->numberobj_36_output_set(localvalue);
}

number param_09_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void numberobj_43_output_set(number ) {}

void numberobj_43_value_set(number v) {
    this->numberobj_43_value_setter(v);
    v = this->numberobj_43_value;
    number localvalue = v;

    if (this->numberobj_43_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-37"), localvalue, this->_currentTime);
    this->numberobj_43_output_set(localvalue);
}

void linetilde_11_time_set(number v) {
    this->linetilde_11_time = v;
}

void linetilde_11_segments_set(const list& v) {
    this->linetilde_11_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_11_time == 0) {
            this->linetilde_11_activeRamps->length = 0;
            this->linetilde_11_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_11_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_11_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_11_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_11_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_11_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_11_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_11_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_11_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_11_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_11_activeRamps->push(lastRampValue);
                this->linetilde_11_activeRamps->push(0);
                this->linetilde_11_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_11_keepramp)) {
                        this->linetilde_11_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_11_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_11_activeRamps->push(destinationValue);
                this->linetilde_11_activeRamps->push(inc);
                this->linetilde_11_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void scale_09_out_set(const list& v) {
    this->scale_09_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_43_value_set(converted);
    }

    this->linetilde_11_segments_set(v);
}

void scale_09_input_set(const list& v) {
    this->scale_09_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_09_inlow,
            this->scale_09_inhigh,
            this->scale_09_outlow,
            this->scale_09_outhigh,
            this->scale_09_power
        ));
    }

    this->scale_09_out_set(tmp);
}

void numberobj_40_output_set(number v) {
    {
        list converted = {v};
        this->scale_09_input_set(converted);
    }
}

void numberobj_40_value_set(number v) {
    this->numberobj_40_value_setter(v);
    v = this->numberobj_40_value;
    number localvalue = v;

    if (this->numberobj_40_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-525"), localvalue, this->_currentTime);
    this->numberobj_40_output_set(localvalue);
}

number param_10_value_constrain(number v) const {
    v = (v > 7 ? 7 : (v < 1 ? 1 : v));
    return v;
}

void message_21_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_02_value_number_set(converted);
    }
}

void message_21_trigger_bang() {
    this->message_21_out_set(this->message_21_set);
}

void trigger_06_out2_bang() {
    this->message_21_trigger_bang();
}

void listreg_01_out_set(const list& v) {
    this->scale_03_input_set(v);
}

void listreg_01_in1_bang() {
    list v = this->listreg_01_in1;

    if ((bool)(v->length)) {
        this->listreg_01_stored = v;
    }

    this->listreg_01_out_set(this->listreg_01_stored);
}

void trigger_06_out1_bang() {
    this->listreg_01_in1_bang();
}

void trigger_06_input_bang_bang() {
    this->trigger_06_out2_bang();
    this->trigger_06_out1_bang();
}

void select_03_match1_bang() {
    this->trigger_06_input_bang_bang();
}

void select_03_nomatch_number_set(number ) {}

void select_03_input_number_set(number v) {
    if (v == this->select_03_test1)
        this->select_03_match1_bang();
    else
        this->select_03_nomatch_number_set(v);
}

void listnth_01_index_set(const list& v) {
    this->listnth_01_index = jsCreateListCopy(v);
}

void trigger_05_out2_set(number v) {
    {
        list converted = {v};
        this->listnth_01_index_set(converted);
    }
}

void listnth_01_out2_set(const list& ) {}

void numberobj_39_output_set(number ) {}

void numberobj_39_value_set(number v) {
    this->numberobj_39_value_setter(v);
    v = this->numberobj_39_value;
    number localvalue = v;

    if (this->numberobj_39_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-234"), localvalue, this->_currentTime);
    this->numberobj_39_output_set(localvalue);
}

void message_17_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_02_value_number_set(converted);
    }
}

void message_17_trigger_bang() {
    this->message_17_out_set(this->message_17_set);
}

void trigger_04_out3_bang() {
    this->message_17_trigger_bang();
}

void expr_14_in2_set(number v) {
    this->expr_14_in2 = v;
}

void trigger_04_out2_set(number v) {
    this->expr_14_in2_set(v);
}

void expr_14_in1_bang() {
    this->expr_14_out1_set(this->expr_14_in1 * this->expr_14_in2);//#map:*_obj-227:1
}

void trigger_04_out1_bang() {
    this->expr_14_in1_bang();
}

void trigger_04_input_number_set(number v) {
    this->trigger_04_out3_bang();
    this->trigger_04_out2_set(v);
    this->trigger_04_out1_bang();
}

void listnth_01_out1_set(number v) {
    this->numberobj_39_value_set(v);
    this->trigger_04_input_number_set(v);
}

void listnth_01_input_set(const list& v) {
    this->listnth_01_input = jsCreateListCopy(v);
    list result = jsCreateListCopy(v);

    if (this->listnth_01_index->length > 0 && this->listnth_01_index[0] - 1 < v->length && this->listnth_01_index[0] >= 1) {
        number nth = v[(Index)(this->listnth_01_index[0] - 1)];

        if (this->listnth_01_index->length == 1)
            result->splice((Index)(this->listnth_01_index[0]) - 1, 1);
        else
            result->splice((Index)(this->listnth_01_index[0]) - 1, 1, this->listnth_01_index[1]);

        this->listnth_01_out2_set(result);
        this->listnth_01_out1_set(nth);
    } else if ((bool)(this->listnth_01_input->length))
        this->listnth_01_out2_set(v);
}

void message_18_out_set(const list& v) {
    this->listnth_01_input_set(v);
}

void message_18_trigger_bang() {
    this->message_18_out_set(this->message_18_set);
}

void trigger_05_out1_bang() {
    this->message_18_trigger_bang();
}

void trigger_05_input_number_set(number v) {
    this->trigger_05_out2_set(trunc(v));
    this->trigger_05_out1_bang();
}

void numberobj_38_output_set(number v) {
    this->select_03_input_number_set(v);
    this->trigger_05_input_number_set(v);
}

void numberobj_38_value_set(number v) {
    this->numberobj_38_value_setter(v);
    v = this->numberobj_38_value;
    number localvalue = v;

    if (this->numberobj_38_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-236"), localvalue, this->_currentTime);
    this->numberobj_38_output_set(localvalue);
}

void expr_15_out1_set(number v) {
    this->expr_15_out1 = v;
    this->numberobj_38_value_set(this->expr_15_out1);
}

void expr_15_in1_set(number in1) {
    this->expr_15_in1 = in1;
    this->expr_15_out1_set(this->expr_15_in1 - this->expr_15_in2);//#map:-_obj-189:1
}

number param_11_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));
    return v;
}

void p_04_in3_number_set(number v) {
    this->p_04->updateTime(this->_currentTime);
    this->p_04->eventinlet_05_out1_number_set(v);
}

void numberobj_24_output_set(number v) {
    this->p_04_in3_number_set(v);
}

void numberobj_24_value_set(number v) {
    this->numberobj_24_value_setter(v);
    v = this->numberobj_24_value;
    number localvalue = v;

    if (this->numberobj_24_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-171"), localvalue, this->_currentTime);
    this->numberobj_24_output_set(localvalue);
}

void scale_05_out_set(const list& v) {
    this->scale_05_out = jsCreateListCopy(v);

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->numberobj_24_value_set(converted);
    }
}

void scale_05_input_set(const list& v) {
    this->scale_05_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_05_inlow,
            this->scale_05_inhigh,
            this->scale_05_outlow,
            this->scale_05_outhigh,
            this->scale_05_power
        ));
    }

    this->scale_05_out_set(tmp);
}

void numberobj_25_output_set(number v) {
    {
        list converted = {v};
        this->scale_05_input_set(converted);
    }
}

void numberobj_25_value_set(number v) {
    this->numberobj_25_value_setter(v);
    v = this->numberobj_25_value;
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 100) {
        localvalue = 100;
    }

    if (this->numberobj_25_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-172"), localvalue, this->_currentTime);
    this->numberobj_25_output_set(localvalue);
}

number param_12_value_constrain(number v) const {
    v = (v > 10 ? 10 : (v < 0 ? 0 : v));
    return v;
}

void p_02_in3_number_set(number v) {
    this->p_02->updateTime(this->_currentTime);
    this->p_02->eventinlet_01_out1_number_set(v);
}

void numberobj_19_output_set(number v) {
    this->p_02_in3_number_set(v);
}

void numberobj_19_value_set(number v) {
    this->numberobj_19_value_setter(v);
    v = this->numberobj_19_value;
    number localvalue = v;

    if (this->numberobj_19_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-120"), localvalue, this->_currentTime);
    this->numberobj_19_output_set(localvalue);
}

number param_13_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void linetilde_05_time_set(number v) {
    this->linetilde_05_time = v;
}

void linetilde_05_segments_set(const list& v) {
    this->linetilde_05_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_05_time == 0) {
            this->linetilde_05_activeRamps->length = 0;
            this->linetilde_05_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_05_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_05_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_05_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_05_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_05_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_05_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_05_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_05_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_05_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_05_activeRamps->push(lastRampValue);
                this->linetilde_05_activeRamps->push(0);
                this->linetilde_05_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_05_keepramp)) {
                        this->linetilde_05_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_05_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_05_activeRamps->push(destinationValue);
                this->linetilde_05_activeRamps->push(inc);
                this->linetilde_05_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void linetilde_04_time_set(number v) {
    this->linetilde_04_time = v;
}

void linetilde_04_segments_set(const list& v) {
    this->linetilde_04_segments = jsCreateListCopy(v);

    if ((bool)(v->length)) {
        if (v->length == 1 && this->linetilde_04_time == 0) {
            this->linetilde_04_activeRamps->length = 0;
            this->linetilde_04_currentValue = v[0];
        } else {
            auto currentTime = this->currentsampletime();
            number lastRampValue = this->linetilde_04_currentValue;
            number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;

            for (Index i = 0; i < this->linetilde_04_activeRamps->length; i += 3) {
                rampEnd = this->linetilde_04_activeRamps[(Index)(i + 2)];

                if (rampEnd > currentTime) {
                    this->linetilde_04_activeRamps[(Index)(i + 2)] = currentTime;
                    number diff = rampEnd - currentTime;
                    number valueDiff = diff * this->linetilde_04_activeRamps[(Index)(i + 1)];
                    lastRampValue = this->linetilde_04_activeRamps[(Index)i] - valueDiff;
                    this->linetilde_04_activeRamps[(Index)i] = lastRampValue;
                    this->linetilde_04_activeRamps->length = i + 3;
                    rampEnd = currentTime;
                } else {
                    lastRampValue = this->linetilde_04_activeRamps[(Index)i];
                }
            }

            if (rampEnd < currentTime) {
                this->linetilde_04_activeRamps->push(lastRampValue);
                this->linetilde_04_activeRamps->push(0);
                this->linetilde_04_activeRamps->push(currentTime);
            }

            number lastRampEnd = currentTime;

            for (Index i = 0; i < v->length; i += 2) {
                number destinationValue = v[(Index)i];
                number inc = 0;
                number rampTimeInSamples;

                if (v->length > i + 1) {
                    rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);

                    if ((bool)(this->linetilde_04_keepramp)) {
                        this->linetilde_04_time_set(v[(Index)(i + 1)]);
                    }
                } else {
                    rampTimeInSamples = this->mstosamps(this->linetilde_04_time);
                }

                if (rampTimeInSamples <= 0) {
                    rampTimeInSamples = 1;
                }

                inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                lastRampEnd += rampTimeInSamples;
                this->linetilde_04_activeRamps->push(destinationValue);
                this->linetilde_04_activeRamps->push(inc);
                this->linetilde_04_activeRamps->push(lastRampEnd);
                lastRampValue = destinationValue;
            }
        }
    }
}

void scale_01_out_set(const list& v) {
    this->scale_01_out = jsCreateListCopy(v);
    this->linetilde_04_segments_set(v);
}

void scale_01_input_set(const list& v) {
    this->scale_01_input = jsCreateListCopy(v);
    list tmp = {};

    for (Index i = 0; i < v->length; i++) {
        tmp->push(this->scale(
            v[(Index)i],
            this->scale_01_inlow,
            this->scale_01_inhigh,
            this->scale_01_outlow,
            this->scale_01_outhigh,
            this->scale_01_power
        ));
    }

    this->scale_01_out_set(tmp);
}

void numberobj_17_output_set(number v) {
    {
        list converted = {v};
        this->linetilde_05_segments_set(converted);
    }

    {
        list converted = {v};
        this->scale_01_input_set(converted);
    }
}

void numberobj_17_value_set(number v) {
    this->numberobj_17_value_setter(v);
    v = this->numberobj_17_value;
    number localvalue = v;

    if (this->numberobj_17_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-39"), localvalue, this->_currentTime);
    this->numberobj_17_output_set(localvalue);
}

number param_14_value_constrain(number v) const {
    v = (v > 2 ? 2 : (v < 1 ? 1 : v));
    return v;
}

void selector_02_onoff_set(number v) {
    this->selector_02_onoff = v;
}

void selector_01_onoff_set(number v) {
    this->selector_01_onoff = v;
}

void numberobj_15_output_set(number v) {
    this->selector_02_onoff_set(v);
    this->selector_01_onoff_set(v);
}

void numberobj_15_value_set(number v) {
    this->numberobj_15_value_setter(v);
    v = this->numberobj_15_value;
    number localvalue = v;

    if (this->numberobj_15_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-210"), localvalue, this->_currentTime);
    this->numberobj_15_output_set(localvalue);
}

void expr_08_out1_set(number v) {
    this->expr_08_out1 = v;
    this->numberobj_15_value_set(this->expr_08_out1);
}

void expr_08_in1_set(number in1) {
    this->expr_08_in1 = in1;
    this->expr_08_out1_set(this->expr_08_in1 + this->expr_08_in2);//#map:+_obj-217:1
}

void toggle_01_output_set(number v) {
    this->expr_08_in1_set(v);
}

void toggle_01_value_number_set(number v) {
    this->toggle_01_value_number_setter(v);
    v = this->toggle_01_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-215"), v, this->_currentTime);
    this->toggle_01_output_set(v);
}

void expr_09_out1_set(number v) {
    this->expr_09_out1 = v;
    this->toggle_01_value_number_set(this->expr_09_out1);
}

void expr_09_in1_set(number in1) {
    this->expr_09_in1 = in1;
    this->expr_09_out1_set(this->expr_09_in1 - this->expr_09_in2);//#map:-_obj-185:1
}

void numberobj_14_output_set(number v) {
    this->expr_09_in1_set(v);
}

void numberobj_14_value_set(number v) {
    this->numberobj_14_value_setter(v);
    v = this->numberobj_14_value;
    number localvalue = v;

    if (this->numberobj_14_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-238"), localvalue, this->_currentTime);
    this->numberobj_14_output_set(localvalue);
}

void message_09_set_set(const list& v) {
    this->message_09_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-246"), v, this->_currentTime);
}

void gen_01_in2_set(number v) {
    this->gen_01_in2 = v;
}

void message_10_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->gen_01_in2_set(converted);
    }
}

void message_10_trigger_bang() {
    this->message_10_out_set(this->message_10_set);
}

void loadbang_07_output_bang() {
    this->message_10_trigger_bang();
}

void message_10_set_set(const list& v) {
    this->message_10_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-154"), v, this->_currentTime);
}

void gen_03_in2_set(number v) {
    this->gen_03_in2 = v;
}

void message_11_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->gen_03_in2_set(converted);
    }
}

void message_11_trigger_bang() {
    this->message_11_out_set(this->message_11_set);
}

void loadbang_08_output_bang() {
    this->message_11_trigger_bang();
}

void message_11_set_set(const list& v) {
    this->message_11_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-122"), v, this->_currentTime);
}

void filtercoeff_02_q_set(number v) {
    this->filtercoeff_02_q = v;
}

void message_12_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->filtercoeff_02_q_set(converted);
    }
}

void message_12_trigger_bang() {
    this->message_12_out_set(this->message_12_set);
}

void loadbang_09_output_bang() {
    this->message_12_trigger_bang();
}

void message_12_set_set(const list& v) {
    this->message_12_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-164"), v, this->_currentTime);
}

void numberobj_31_output_set(number v) {
    this->param_06_value_set(v);
}

void numberobj_31_value_set(number v) {
    this->numberobj_31_value_setter(v);
    v = this->numberobj_31_value;
    number localvalue = v;

    if (this->numberobj_31_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-219"), localvalue, this->_currentTime);
    this->numberobj_31_output_set(localvalue);
}

void message_13_set_set(const list& v) {
    this->message_13_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-49"), v, this->_currentTime);
}

void ip_04_value_set(number v) {
    this->ip_04_value = v;
    this->ip_04_fillSigBuf();
    this->ip_04_lastValue = v;
}

void numberobj_32_output_set(number v) {
    this->ip_04_value_set(v);
}

void numberobj_32_value_set(number v) {
    this->numberobj_32_value_setter(v);
    v = this->numberobj_32_value;
    number localvalue = v;

    if (this->numberobj_32_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-192"), localvalue, this->_currentTime);
    this->numberobj_32_output_set(localvalue);

    {
        if (localvalue != this->numberobj_32_lastValue) {
            this->getEngine()->presetTouched();
            this->numberobj_32_lastValue = localvalue;
        }
    }
}

void message_14_set_set(const list& v) {
    this->message_14_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-50"), v, this->_currentTime);
}

void filtercoeff_03_frequency_set(number v) {
    this->filtercoeff_03_frequency = v;
}

void filtercoeff_03_gain_set(number v) {
    this->filtercoeff_03_gain = v;
}

void filtercoeff_03_q_set(number v) {
    this->filtercoeff_03_q = v;
}

void message_15_out_set(const list& v) {
    {
        if (v->length > 2)
            this->filtercoeff_03_q_set(v[2]);

        if (v->length > 1)
            this->filtercoeff_03_gain_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->filtercoeff_03_frequency_set(converted);
    }
}

void message_15_trigger_bang() {
    this->message_15_out_set(this->message_15_set);
}

void loadbang_10_output_bang() {
    this->message_15_trigger_bang();
}

void message_15_set_set(const list& v) {
    this->message_15_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-145"), v, this->_currentTime);
}

void filtercoeff_04_frequency_set(number v) {
    this->filtercoeff_04_frequency = v;
}

void filtercoeff_04_gain_set(number v) {
    this->filtercoeff_04_gain = v;
}

void filtercoeff_04_q_set(number v) {
    this->filtercoeff_04_q = v;
}

void message_16_out_set(const list& v) {
    {
        if (v->length > 2)
            this->filtercoeff_04_q_set(v[2]);

        if (v->length > 1)
            this->filtercoeff_04_gain_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->filtercoeff_04_frequency_set(converted);
    }
}

void message_16_trigger_bang() {
    this->message_16_out_set(this->message_16_set);
}

void loadbang_11_output_bang() {
    this->message_16_trigger_bang();
}

void message_16_set_set(const list& v) {
    this->message_16_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-137"), v, this->_currentTime);
}

void message_17_set_set(const list& v) {
    this->message_17_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-242"), v, this->_currentTime);
}

void message_18_set_set(const list& v) {
    this->message_18_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-233"), v, this->_currentTime);
}

void button_01_output_bang() {}

void button_01_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-255"), this->_currentTime);;
    this->button_01_output_bang();
}

void metro_01_tickout_bang() {
    this->button_01_bangval_bang();
}

void message_19_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->filtercoeff_03_q_set(converted);
    }
}

void message_19_trigger_bang() {
    this->message_19_out_set(this->message_19_set);
}

void loadbang_12_output_bang() {
    this->message_19_trigger_bang();
}

void message_19_set_set(const list& v) {
    this->message_19_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-186"), v, this->_currentTime);
}

void numberobj_37_output_set(number ) {}

void numberobj_37_value_set(number v) {
    this->numberobj_37_value_setter(v);
    v = this->numberobj_37_value;
    number localvalue = v;

    if (this->numberobj_37_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-251"), localvalue, this->_currentTime);
    this->numberobj_37_output_set(localvalue);
}

void message_20_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->filtercoeff_04_q_set(converted);
    }
}

void message_20_trigger_bang() {
    this->message_20_out_set(this->message_20_set);
}

void loadbang_13_output_bang() {
    this->message_20_trigger_bang();
}

void message_20_set_set(const list& v) {
    this->message_20_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-177"), v, this->_currentTime);
}

void message_21_set_set(const list& v) {
    this->message_21_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-253"), v, this->_currentTime);
}

void gen_05_in2_set(number v) {
    this->gen_05_in2 = v;
}

void message_22_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->gen_05_in2_set(converted);
    }
}

void message_22_trigger_bang() {
    this->message_22_out_set(this->message_22_set);
}

void loadbang_14_output_bang() {
    this->message_22_trigger_bang();
}

void message_22_set_set(const list& v) {
    this->message_22_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-135"), v, this->_currentTime);
}

void gen_06_in2_set(number v) {
    this->gen_06_in2 = v;
}

void message_23_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->gen_06_in2_set(converted);
    }
}

void message_23_trigger_bang() {
    this->message_23_out_set(this->message_23_set);
}

void loadbang_15_output_bang() {
    this->message_23_trigger_bang();
}

void message_23_set_set(const list& v) {
    this->message_23_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-161"), v, this->_currentTime);
}

void filtercoeff_05_q_set(number v) {
    this->filtercoeff_05_q = v;
}

void message_24_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->filtercoeff_05_q_set(converted);
    }
}

void message_24_trigger_bang() {
    this->message_24_out_set(this->message_24_set);
}

void loadbang_16_output_bang() {
    this->message_24_trigger_bang();
}

void message_24_set_set(const list& v) {
    this->message_24_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-175"), v, this->_currentTime);
}

void message_25_set_set(const list& v) {
    this->message_25_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-361"), v, this->_currentTime);
}

void ip_07_value_set(number v) {
    this->ip_07_value = v;
    this->ip_07_fillSigBuf();
    this->ip_07_lastValue = v;
}

void numberobj_49_output_set(number v) {
    this->ip_07_value_set(v);
}

void numberobj_49_value_set(number v) {
    this->numberobj_49_value_setter(v);
    v = this->numberobj_49_value;
    number localvalue = v;

    if (this->numberobj_49_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-196"), localvalue, this->_currentTime);
    this->numberobj_49_output_set(localvalue);

    {
        if (localvalue != this->numberobj_49_lastValue) {
            this->getEngine()->presetTouched();
            this->numberobj_49_lastValue = localvalue;
        }
    }
}

void message_26_set_set(const list& v) {
    this->message_26_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-360"), v, this->_currentTime);
}

void filtercoeff_07_frequency_set(number v) {
    this->filtercoeff_07_frequency = v;
}

void filtercoeff_07_gain_set(number v) {
    this->filtercoeff_07_gain = v;
}

void filtercoeff_07_q_set(number v) {
    this->filtercoeff_07_q = v;
}

void message_27_out_set(const list& v) {
    {
        if (v->length > 2)
            this->filtercoeff_07_q_set(v[2]);

        if (v->length > 1)
            this->filtercoeff_07_gain_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->filtercoeff_07_frequency_set(converted);
    }
}

void message_27_trigger_bang() {
    this->message_27_out_set(this->message_27_set);
}

void loadbang_17_output_bang() {
    this->message_27_trigger_bang();
}

void message_27_set_set(const list& v) {
    this->message_27_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-141"), v, this->_currentTime);
}

void filtercoeff_06_frequency_set(number v) {
    this->filtercoeff_06_frequency = v;
}

void filtercoeff_06_gain_set(number v) {
    this->filtercoeff_06_gain = v;
}

void filtercoeff_06_q_set(number v) {
    this->filtercoeff_06_q = v;
}

void message_28_out_set(const list& v) {
    {
        if (v->length > 2)
            this->filtercoeff_06_q_set(v[2]);

        if (v->length > 1)
            this->filtercoeff_06_gain_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->filtercoeff_06_frequency_set(converted);
    }
}

void message_28_trigger_bang() {
    this->message_28_out_set(this->message_28_set);
}

void loadbang_18_output_bang() {
    this->message_28_trigger_bang();
}

void message_28_set_set(const list& v) {
    this->message_28_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-150"), v, this->_currentTime);
}

void message_29_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->filtercoeff_07_q_set(converted);
    }
}

void message_29_trigger_bang() {
    this->message_29_out_set(this->message_29_set);
}

void loadbang_19_output_bang() {
    this->message_29_trigger_bang();
}

void message_29_set_set(const list& v) {
    this->message_29_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-180"), v, this->_currentTime);
}

void message_30_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->filtercoeff_06_q_set(converted);
    }
}

void message_30_trigger_bang() {
    this->message_30_out_set(this->message_30_set);
}

void loadbang_20_output_bang() {
    this->message_30_trigger_bang();
}

void message_30_set_set(const list& v) {
    this->message_30_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-188"), v, this->_currentTime);
}

void metro_01_on_set(number v) {
    this->metro_01_on = v;
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(v)) {
        {
            this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
        }
    }
}

void metro_01_interval_set(number v) {
    this->metro_01_interval_setter(v);
    v = this->metro_01_interval;
}

void timevalue_01_out_set(number v) {
    this->metro_01_interval_set(v);
}

void ctlin_01_outchannel_set(number ) {}

void ctlin_01_outcontroller_set(number ) {}

void fromnormalized_01_output_set(number v) {
    this->param_11_value_set(v);
}

void fromnormalized_01_input_set(number v) {
    this->fromnormalized_01_output_set(this->fromnormalized(10, v));
}

void expr_16_out1_set(number v) {
    this->expr_16_out1 = v;
    this->fromnormalized_01_input_set(this->expr_16_out1);
}

void expr_16_in1_set(number in1) {
    this->expr_16_in1 = in1;
    this->expr_16_out1_set(this->expr_16_in1 * this->expr_16_in2);//#map:expr_16:1
}

void ctlin_01_value_set(number v) {
    this->expr_16_in1_set(v);
}

void ctlin_01_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(length);
    RNBO_UNUSED(port);

    if (status == 0xB0 && (channel == this->ctlin_01_channel || this->ctlin_01_channel == -1) && (data[1] == this->ctlin_01_controller || this->ctlin_01_controller == -1)) {
        this->ctlin_01_outchannel_set(channel);
        this->ctlin_01_outcontroller_set(data[1]);
        this->ctlin_01_value_set(data[2]);
        this->ctlin_01_status = 0;
    }
}

void ctlin_02_outchannel_set(number ) {}

void ctlin_02_outcontroller_set(number ) {}

void fromnormalized_02_output_set(number v) {
    this->param_12_value_set(v);
}

void fromnormalized_02_input_set(number v) {
    this->fromnormalized_02_output_set(this->fromnormalized(11, v));
}

void expr_17_out1_set(number v) {
    this->expr_17_out1 = v;
    this->fromnormalized_02_input_set(this->expr_17_out1);
}

void expr_17_in1_set(number in1) {
    this->expr_17_in1 = in1;
    this->expr_17_out1_set(this->expr_17_in1 * this->expr_17_in2);//#map:expr_17:1
}

void ctlin_02_value_set(number v) {
    this->expr_17_in1_set(v);
}

void ctlin_02_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(length);
    RNBO_UNUSED(port);

    if (status == 0xB0 && (channel == this->ctlin_02_channel || this->ctlin_02_channel == -1) && (data[1] == this->ctlin_02_controller || this->ctlin_02_controller == -1)) {
        this->ctlin_02_outchannel_set(channel);
        this->ctlin_02_outcontroller_set(data[1]);
        this->ctlin_02_value_set(data[2]);
        this->ctlin_02_status = 0;
    }
}

void transport_01_outtempo_set(number v) {
    this->numberobj_37_value_set(v);
    this->param_08_value_set(v);
}

void transport_01_state_set(number ) {}

void transport_01_outtimesig_set(const list& ) {}

void limi_03_perform(const SampleValue * input1, SampleValue * output1, Index n) {
    RNBO_UNUSED(output1);
    RNBO_UNUSED(input1);
    auto __limi_03_lookaheadInv = this->limi_03_lookaheadInv;
    auto __limi_03_threshold = this->limi_03_threshold;
    auto __limi_03_lookahead = this->limi_03_lookahead;
    auto __limi_03_recover = this->limi_03_recover;
    auto __limi_03_last = this->limi_03_last;
    auto __limi_03_postamp = this->limi_03_postamp;
    auto __limi_03_lookaheadIndex = this->limi_03_lookaheadIndex;
    auto __limi_03_preamp = this->limi_03_preamp;
    auto __limi_03_dcblock = this->limi_03_dcblock;
    auto __limi_03_bypass = this->limi_03_bypass;
    ConstSampleArray<1> input = {input1};
    SampleArray<1> output = {output1};

    if ((bool)(__limi_03_bypass)) {
        for (Index i = 0; i < n; i++) {
            for (Index j = 0; j < 1; j++) {
                output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
            }
        }
    } else {
        number v;

        for (Index i = 0; i < n; i++) {
            number hotSample = 0;

            for (Index j = 0; j < 1; j++) {
                auto smps = input[(Index)j];
                v = ((bool)(__limi_03_dcblock) ? this->limi_03_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                v *= __limi_03_preamp;
                this->limi_03_lookaheadBuffers[(Index)j][__limi_03_lookaheadIndex] = v * __limi_03_postamp;
                v = rnbo_fabs(v);

                if (v > hotSample)
                    hotSample = v;
            }

            {
                if (__limi_03_last > 0.01)
                    v = __limi_03_last + __limi_03_recover * __limi_03_last;
                else
                    v = __limi_03_last + __limi_03_recover;
            }

            if (v > 1)
                v = 1;

            this->limi_03_gainBuffer[__limi_03_lookaheadIndex] = v;
            int lookaheadPlayback = (int)(__limi_03_lookaheadIndex - (int)(__limi_03_lookahead));

            if (lookaheadPlayback < 0)
                lookaheadPlayback += (int)(__limi_03_lookahead);

            if (hotSample * v > __limi_03_threshold) {
                number newgain;
                number curgain = __limi_03_threshold / hotSample;
                number inc = __limi_03_threshold - curgain;
                number acc = 0.0;
                number flag = 0;

                for (Index j = 0; flag == 0 && j < (Index)(__limi_03_lookahead); j++) {
                    int k = (int)(__limi_03_lookaheadIndex - (int)(j));

                    if (k < 0)
                        k += (int)(__limi_03_lookahead);

                    {
                        newgain = curgain + inc * (acc * acc);
                    }

                    if (newgain < this->limi_03_gainBuffer[(Index)k])
                        this->limi_03_gainBuffer[(Index)k] = newgain;
                    else
                        flag = 1;

                    acc = acc + __limi_03_lookaheadInv;
                }
            }

            for (Index j = 0; j < 1; j++) {
                output[(Index)j][(Index)i] = this->limi_03_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * this->limi_03_gainBuffer[(Index)lookaheadPlayback];
            }

            __limi_03_last = this->limi_03_gainBuffer[__limi_03_lookaheadIndex];
            __limi_03_lookaheadIndex++;

            if (__limi_03_lookaheadIndex >= __limi_03_lookahead)
                __limi_03_lookaheadIndex = 0;
        }
    }

    this->limi_03_lookaheadIndex = __limi_03_lookaheadIndex;
    this->limi_03_last = __limi_03_last;
}

void p_01_perform(SampleValue * out1, Index n) {
    // subpatcher: Random,Noise
    SampleArray<1> outs = {out1};

    this->p_01->process(nullptr, 0, outs, 1, n);
}

void dspexpr_28_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void limi_04_perform(const SampleValue * input1, SampleValue * output1, Index n) {
    RNBO_UNUSED(output1);
    RNBO_UNUSED(input1);
    auto __limi_04_lookaheadInv = this->limi_04_lookaheadInv;
    auto __limi_04_threshold = this->limi_04_threshold;
    auto __limi_04_lookahead = this->limi_04_lookahead;
    auto __limi_04_recover = this->limi_04_recover;
    auto __limi_04_last = this->limi_04_last;
    auto __limi_04_postamp = this->limi_04_postamp;
    auto __limi_04_lookaheadIndex = this->limi_04_lookaheadIndex;
    auto __limi_04_preamp = this->limi_04_preamp;
    auto __limi_04_dcblock = this->limi_04_dcblock;
    auto __limi_04_bypass = this->limi_04_bypass;
    ConstSampleArray<1> input = {input1};
    SampleArray<1> output = {output1};

    if ((bool)(__limi_04_bypass)) {
        for (Index i = 0; i < n; i++) {
            for (Index j = 0; j < 1; j++) {
                output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
            }
        }
    } else {
        number v;

        for (Index i = 0; i < n; i++) {
            number hotSample = 0;

            for (Index j = 0; j < 1; j++) {
                auto smps = input[(Index)j];
                v = ((bool)(__limi_04_dcblock) ? this->limi_04_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                v *= __limi_04_preamp;
                this->limi_04_lookaheadBuffers[(Index)j][__limi_04_lookaheadIndex] = v * __limi_04_postamp;
                v = rnbo_fabs(v);

                if (v > hotSample)
                    hotSample = v;
            }

            {
                if (__limi_04_last > 0.01)
                    v = __limi_04_last + __limi_04_recover * __limi_04_last;
                else
                    v = __limi_04_last + __limi_04_recover;
            }

            if (v > 1)
                v = 1;

            this->limi_04_gainBuffer[__limi_04_lookaheadIndex] = v;
            int lookaheadPlayback = (int)(__limi_04_lookaheadIndex - (int)(__limi_04_lookahead));

            if (lookaheadPlayback < 0)
                lookaheadPlayback += (int)(__limi_04_lookahead);

            if (hotSample * v > __limi_04_threshold) {
                number newgain;
                number curgain = __limi_04_threshold / hotSample;
                number inc = __limi_04_threshold - curgain;
                number acc = 0.0;
                number flag = 0;

                for (Index j = 0; flag == 0 && j < (Index)(__limi_04_lookahead); j++) {
                    int k = (int)(__limi_04_lookaheadIndex - (int)(j));

                    if (k < 0)
                        k += (int)(__limi_04_lookahead);

                    {
                        newgain = curgain + inc * (acc * acc);
                    }

                    if (newgain < this->limi_04_gainBuffer[(Index)k])
                        this->limi_04_gainBuffer[(Index)k] = newgain;
                    else
                        flag = 1;

                    acc = acc + __limi_04_lookaheadInv;
                }
            }

            for (Index j = 0; j < 1; j++) {
                output[(Index)j][(Index)i] = this->limi_04_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * this->limi_04_gainBuffer[(Index)lookaheadPlayback];
            }

            __limi_04_last = this->limi_04_gainBuffer[__limi_04_lookaheadIndex];
            __limi_04_lookaheadIndex++;

            if (__limi_04_lookaheadIndex >= __limi_04_lookahead)
                __limi_04_lookaheadIndex = 0;
        }
    }

    this->limi_04_lookaheadIndex = __limi_04_lookaheadIndex;
    this->limi_04_last = __limi_04_last;
}

void dspexpr_33_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void gen_04_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        number float_1_0 = float(0.5);
        number mix_2_1 = in1[(Index)i] + float_1_0 * (in2[(Index)i] - in1[(Index)i]);
        out1[(Index)i] = mix_2_1;
    }
}

void p_04_perform(const SampleValue * in1, SampleValue * out1, SampleValue * out2, Index n) {
    // subpatcher: Compression~
    ConstSampleArray<1> ins = {in1};

    SampleArray<2> outs = {out1, out2};
    this->p_04->process(ins, 1, outs, 2, n);
}

void numbertilde_24_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_24_currentIntervalInSamples = this->numbertilde_24_currentIntervalInSamples;
    auto __numbertilde_24_lastValue = this->numbertilde_24_lastValue;
    auto __numbertilde_24_currentInterval = this->numbertilde_24_currentInterval;
    auto __numbertilde_24_rampInSamples = this->numbertilde_24_rampInSamples;
    auto __numbertilde_24_outValue = this->numbertilde_24_outValue;
    auto __numbertilde_24_currentMode = this->numbertilde_24_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_24_currentMode == 0) {
            output[(Index)i] = this->numbertilde_24_smooth_next(
                __numbertilde_24_outValue,
                __numbertilde_24_rampInSamples,
                __numbertilde_24_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_24_currentInterval -= n;

    if (monitorvalue != __numbertilde_24_lastValue && __numbertilde_24_currentInterval <= 0) {
        __numbertilde_24_currentInterval = __numbertilde_24_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1494586265,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_24_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-221"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_24_currentInterval = __numbertilde_24_currentInterval;
    this->numbertilde_24_lastValue = __numbertilde_24_lastValue;
}

void linetilde_04_perform(SampleValue * out, Index n) {
    auto __linetilde_04_time = this->linetilde_04_time;
    auto __linetilde_04_keepramp = this->linetilde_04_keepramp;
    auto __linetilde_04_currentValue = this->linetilde_04_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_04_activeRamps->length)) {
        while ((bool)(this->linetilde_04_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_04_activeRamps[0];
            number inc = this->linetilde_04_activeRamps[1];
            number rampTimeInSamples = this->linetilde_04_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_04_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_04_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_04_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -62043057,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_04_keepramp))) {
                        __linetilde_04_time = 0;
                    }
                }
            }

            __linetilde_04_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_04_currentValue;
        i++;
    }

    this->linetilde_04_currentValue = __linetilde_04_currentValue;
    this->linetilde_04_time = __linetilde_04_time;
}

void numbertilde_14_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_14_currentIntervalInSamples = this->numbertilde_14_currentIntervalInSamples;
    auto __numbertilde_14_lastValue = this->numbertilde_14_lastValue;
    auto __numbertilde_14_currentInterval = this->numbertilde_14_currentInterval;
    auto __numbertilde_14_rampInSamples = this->numbertilde_14_rampInSamples;
    auto __numbertilde_14_outValue = this->numbertilde_14_outValue;
    auto __numbertilde_14_currentMode = this->numbertilde_14_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_14_currentMode == 0) {
            output[(Index)i] = this->numbertilde_14_smooth_next(
                __numbertilde_14_outValue,
                __numbertilde_14_rampInSamples,
                __numbertilde_14_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_14_currentInterval -= n;

    if (monitorvalue != __numbertilde_14_lastValue && __numbertilde_14_currentInterval <= 0) {
        __numbertilde_14_currentInterval = __numbertilde_14_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1396722025,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_14_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-87"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_14_currentInterval = __numbertilde_14_currentInterval;
    this->numbertilde_14_lastValue = __numbertilde_14_lastValue;
}

void linetilde_05_perform(SampleValue * out, Index n) {
    auto __linetilde_05_time = this->linetilde_05_time;
    auto __linetilde_05_keepramp = this->linetilde_05_keepramp;
    auto __linetilde_05_currentValue = this->linetilde_05_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_05_activeRamps->length)) {
        while ((bool)(this->linetilde_05_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_05_activeRamps[0];
            number inc = this->linetilde_05_activeRamps[1];
            number rampTimeInSamples = this->linetilde_05_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_05_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_05_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_05_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1621164530,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_05_keepramp))) {
                        __linetilde_05_time = 0;
                    }
                }
            }

            __linetilde_05_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_05_currentValue;
        i++;
    }

    this->linetilde_05_currentValue = __linetilde_05_currentValue;
    this->linetilde_05_time = __linetilde_05_time;
}

void p_03_perform(Index n) {
    // subpatcher: DataSwitch
    this->p_03->process(nullptr, 0, nullptr, 0, n);
}

void ip_01_perform(SampleValue * out, Index n) {
    auto __ip_01_lastValue = this->ip_01_lastValue;
    auto __ip_01_lastIndex = this->ip_01_lastIndex;

    for (Index i = 0; i < n; i++) {
        out[(Index)i] = ((SampleIndex)(i) >= __ip_01_lastIndex ? __ip_01_lastValue : this->ip_01_sigbuf[(Index)i]);
    }

    __ip_01_lastIndex = 0;
    this->ip_01_lastIndex = __ip_01_lastIndex;
}

void phasor_01_perform(const Sample * freq, SampleValue * out, Index n) {
    for (Index i = 0; i < n; i++) {
        out[(Index)i] = this->phasor_01_ph_next(freq[(Index)i], -1);
        this->phasor_01_sigbuf[(Index)i] = -1;
    }
}

void rate_tilde_01_perform(const Sample * phase, number multiplier, SampleValue * out1, Index n) {
    RNBO_UNUSED(multiplier);
    auto __rate_tilde_01_currentPhase = this->rate_tilde_01_currentPhase;
    auto __rate_tilde_01_prev = this->rate_tilde_01_prev;
    auto __rate_tilde_01_diff = this->rate_tilde_01_diff;
    auto __rate_tilde_01_wantlock = this->rate_tilde_01_wantlock;
    auto __rate_tilde_01_invmult = this->rate_tilde_01_invmult;
    auto __rate_tilde_01_mult = this->rate_tilde_01_mult;
    Index i;

    for (i = 0; i < n; i++) {
        if (2 != __rate_tilde_01_mult && (bool)(!(bool)(rnbo_isnan(2)))) {
            __rate_tilde_01_mult = 2;
            __rate_tilde_01_invmult = this->safediv(1.0, __rate_tilde_01_mult);
            __rate_tilde_01_wantlock = 1;
        }

        __rate_tilde_01_diff = phase[(Index)i] - __rate_tilde_01_prev;

        if (__rate_tilde_01_diff < -0.5) {
            __rate_tilde_01_diff += 1;
        } else if (__rate_tilde_01_diff > 0.5) {
            __rate_tilde_01_diff -= 1;
        }

        __rate_tilde_01_currentPhase += __rate_tilde_01_diff * __rate_tilde_01_invmult;

        if (__rate_tilde_01_currentPhase > 1.0 || __rate_tilde_01_currentPhase < -0.0) {
            __rate_tilde_01_currentPhase = __rate_tilde_01_currentPhase - rnbo_floor(__rate_tilde_01_currentPhase);
        }

        __rate_tilde_01_prev = phase[(Index)i];
        out1[(Index)i] = __rate_tilde_01_currentPhase;
        continue;
    }

    this->rate_tilde_01_mult = __rate_tilde_01_mult;
    this->rate_tilde_01_invmult = __rate_tilde_01_invmult;
    this->rate_tilde_01_wantlock = __rate_tilde_01_wantlock;
    this->rate_tilde_01_diff = __rate_tilde_01_diff;
    this->rate_tilde_01_prev = __rate_tilde_01_prev;
    this->rate_tilde_01_currentPhase = __rate_tilde_01_currentPhase;
}

void triangle_tilde_01_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
    RNBO_UNUSED(duty);
    Index i;

    for (i = 0; i < n; i++) {
        number p1 = 0.5;
        auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
        p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));

        if (wrappedPhase < p1) {
            out1[(Index)i] = wrappedPhase / p1;
            continue;
        } else {
            out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
            continue;
        }
    }
}

void gen_01_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    number clamp_4_3 = (in2 > 1 ? 1 : (in2 < 0 ? 0 : in2));
    auto scale_5_4 = this->scale(clamp_4_3, 1, 0, 0, 1, 0.884);
    auto int_7_6 = this->intnum(1);
    auto int_8_7 = this->intnum(0);
    number clamp_9_8 = (scale_5_4 > 1 ? 1 : (scale_5_4 < 0 ? 0 : scale_5_4));
    number lt_10_9 = clamp_9_8 < 0.5;
    number not_11_10 = !(bool)(lt_10_9);
    auto scale_12_11 = this->scale(clamp_9_8, 1, 0, 0, 1.57079632679489661923, 1);
    number tan_13_12 = rnbo_tan(scale_12_11);
    number rdiv_14_13 = (tan_13_12 == 0. ? 0. : (number)1 / tan_13_12);
    number switch_15_14 = ((bool)(lt_10_9) ? rdiv_14_13 : tan_13_12);
    number switch_16_15 = ((bool)(lt_10_9) ? tan_13_12 : rdiv_14_13);
    Index i;

    for (i = 0; i < n; i++) {
        number clamp_1_0 = (in1[(Index)i] > 1 ? 1 : (in1[(Index)i] < 0 ? 0 : in1[(Index)i]));
        number round_2_1 = rnbo_fround(clamp_1_0 * 1 / (number)1) * 1;
        auto triangle_3_2 = this->triangle(clamp_1_0, 0.5);
        number clamp_6_5 = (triangle_3_2 > 1 ? 1 : (triangle_3_2 < 0 ? 0 : triangle_3_2));
        auto scale_17_16 = this->scale(clamp_6_5, not_11_10, lt_10_9, int_7_6, int_8_7, switch_16_15);
        auto scale_18_17 = this->scale(scale_17_16, 0, 1, lt_10_9, not_11_10, switch_15_14);
        number gen_19_18 = scale_18_17;
        number mix_20_19 = round_2_1 + gen_19_18 * (clamp_1_0 - round_2_1);
        number gen_21_20 = mix_20_19;
        out1[(Index)i] = gen_21_20;
    }
}

void scale_tilde_01_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    number highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(highout);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - 0);
    number outdiff = 1 - -1;
    Index i;

    for (i = 0; i < n; i++) {
        number value = (x[(Index)i] - 0) * inscale;
        value = value * outdiff + -1;
        out1[(Index)i] = value;
    }
}

void scopetilde_05_perform(const SampleValue * x, const SampleValue * y, Index n) {
    auto __scopetilde_05_ysign = this->scopetilde_05_ysign;
    auto __scopetilde_05_ymonitorvalue = this->scopetilde_05_ymonitorvalue;
    auto __scopetilde_05_xsign = this->scopetilde_05_xsign;
    auto __scopetilde_05_xmonitorvalue = this->scopetilde_05_xmonitorvalue;
    auto __scopetilde_05_mode = this->scopetilde_05_mode;

    for (Index i = 0; i < n; i++) {
        number xval = x[(Index)i];
        number yval = y[(Index)i];

        if (__scopetilde_05_mode == 1) {
            number xabsval = rnbo_abs(xval);

            if (xabsval > __scopetilde_05_xmonitorvalue) {
                __scopetilde_05_xmonitorvalue = xabsval;
                __scopetilde_05_xsign = (xval < 0 ? -1 : 1);
            }

            number yabsval = rnbo_abs(yval);

            if (yabsval > __scopetilde_05_ymonitorvalue) {
                __scopetilde_05_ymonitorvalue = yabsval;
                __scopetilde_05_ysign = (yval < 0 ? -1 : 1);
            }
        } else {
            __scopetilde_05_xmonitorvalue = xval;
            __scopetilde_05_xsign = 1;
            __scopetilde_05_ymonitorvalue = yval;
            __scopetilde_05_ysign = 1;
        }

        this->scopetilde_05_effectiveCount--;

        if (this->scopetilde_05_effectiveCount <= 0) {
            this->scopetilde_05_updateEffectiveCount();
            this->scopetilde_05_monitorbuffer->push(__scopetilde_05_xmonitorvalue * __scopetilde_05_xsign);

            if (__scopetilde_05_mode == 1)
                __scopetilde_05_xmonitorvalue = 0;

            if (this->scopetilde_05_monitorbuffer->length >= 128 * (1 + 0)) {
                this->getEngine()->sendListMessage(
                    TAG("monitor"),
                    TAG("scope~_obj-111"),
                    this->scopetilde_05_monitorbuffer,
                    this->_currentTime
                );;

                this->scopetilde_05_monitorbuffer->length = 0;
            }
        }
    }

    this->scopetilde_05_xmonitorvalue = __scopetilde_05_xmonitorvalue;
    this->scopetilde_05_xsign = __scopetilde_05_xsign;
    this->scopetilde_05_ymonitorvalue = __scopetilde_05_ymonitorvalue;
    this->scopetilde_05_ysign = __scopetilde_05_ysign;
}

void triangle_tilde_02_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
    RNBO_UNUSED(duty);
    Index i;

    for (i = 0; i < n; i++) {
        number p1 = 0.5;
        auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
        p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));

        if (wrappedPhase < p1) {
            out1[(Index)i] = wrappedPhase / p1;
            continue;
        } else {
            out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
            continue;
        }
    }
}

void gen_03_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    number clamp_4_3 = (in2 > 1 ? 1 : (in2 < 0 ? 0 : in2));
    auto scale_5_4 = this->scale(clamp_4_3, 1, 0, 0, 1, 0.884);
    auto int_7_6 = this->intnum(1);
    auto int_8_7 = this->intnum(0);
    number clamp_9_8 = (scale_5_4 > 1 ? 1 : (scale_5_4 < 0 ? 0 : scale_5_4));
    number lt_10_9 = clamp_9_8 < 0.5;
    number not_11_10 = !(bool)(lt_10_9);
    auto scale_12_11 = this->scale(clamp_9_8, 1, 0, 0, 1.57079632679489661923, 1);
    number tan_13_12 = rnbo_tan(scale_12_11);
    number rdiv_14_13 = (tan_13_12 == 0. ? 0. : (number)1 / tan_13_12);
    number switch_15_14 = ((bool)(lt_10_9) ? rdiv_14_13 : tan_13_12);
    number switch_16_15 = ((bool)(lt_10_9) ? tan_13_12 : rdiv_14_13);
    Index i;

    for (i = 0; i < n; i++) {
        number clamp_1_0 = (in1[(Index)i] > 1 ? 1 : (in1[(Index)i] < 0 ? 0 : in1[(Index)i]));
        number round_2_1 = rnbo_fround(clamp_1_0 * 1 / (number)1) * 1;
        auto triangle_3_2 = this->triangle(clamp_1_0, 0.5);
        number clamp_6_5 = (triangle_3_2 > 1 ? 1 : (triangle_3_2 < 0 ? 0 : triangle_3_2));
        auto scale_17_16 = this->scale(clamp_6_5, not_11_10, lt_10_9, int_7_6, int_8_7, switch_16_15);
        auto scale_18_17 = this->scale(scale_17_16, 0, 1, lt_10_9, not_11_10, switch_15_14);
        number gen_19_18 = scale_18_17;
        number mix_20_19 = round_2_1 + gen_19_18 * (clamp_1_0 - round_2_1);
        number gen_21_20 = mix_20_19;
        out1[(Index)i] = gen_21_20;
    }
}

void numbertilde_15_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_15_currentIntervalInSamples = this->numbertilde_15_currentIntervalInSamples;
    auto __numbertilde_15_lastValue = this->numbertilde_15_lastValue;
    auto __numbertilde_15_currentInterval = this->numbertilde_15_currentInterval;
    auto __numbertilde_15_rampInSamples = this->numbertilde_15_rampInSamples;
    auto __numbertilde_15_outValue = this->numbertilde_15_outValue;
    auto __numbertilde_15_currentMode = this->numbertilde_15_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_15_currentMode == 0) {
            output[(Index)i] = this->numbertilde_15_smooth_next(
                __numbertilde_15_outValue,
                __numbertilde_15_rampInSamples,
                __numbertilde_15_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_15_currentInterval -= n;

    if (monitorvalue != __numbertilde_15_lastValue && __numbertilde_15_currentInterval <= 0) {
        __numbertilde_15_currentInterval = __numbertilde_15_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            2098551528,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_15_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-85"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_15_currentInterval = __numbertilde_15_currentInterval;
    this->numbertilde_15_lastValue = __numbertilde_15_lastValue;
}

void dspexpr_50_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
    }
}

void numbertilde_28_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_28_currentIntervalInSamples = this->numbertilde_28_currentIntervalInSamples;
    auto __numbertilde_28_lastValue = this->numbertilde_28_lastValue;
    auto __numbertilde_28_currentInterval = this->numbertilde_28_currentInterval;
    auto __numbertilde_28_rampInSamples = this->numbertilde_28_rampInSamples;
    auto __numbertilde_28_outValue = this->numbertilde_28_outValue;
    auto __numbertilde_28_currentMode = this->numbertilde_28_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_28_currentMode == 0) {
            output[(Index)i] = this->numbertilde_28_smooth_next(
                __numbertilde_28_outValue,
                __numbertilde_28_rampInSamples,
                __numbertilde_28_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_28_currentInterval -= n;

    if (monitorvalue != __numbertilde_28_lastValue && __numbertilde_28_currentInterval <= 0) {
        __numbertilde_28_currentInterval = __numbertilde_28_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1169787369,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_28_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-102"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_28_currentInterval = __numbertilde_28_currentInterval;
    this->numbertilde_28_lastValue = __numbertilde_28_lastValue;
}

void slide_tilde_05_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
    RNBO_UNUSED(down);
    RNBO_UNUSED(up);
    auto __slide_tilde_05_prev = this->slide_tilde_05_prev;
    auto iup = this->safediv(1., this->maximum(1., rnbo_abs(500)));
    auto idown = this->safediv(1., this->maximum(1., rnbo_abs(500)));
    Index i;

    for (i = 0; i < n; i++) {
        number temp = x[(Index)i] - __slide_tilde_05_prev;
        __slide_tilde_05_prev = __slide_tilde_05_prev + ((x[(Index)i] > __slide_tilde_05_prev ? iup : idown)) * temp;
        out1[(Index)i] = __slide_tilde_05_prev;
    }

    this->slide_tilde_05_prev = __slide_tilde_05_prev;
}

void scale_tilde_02_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    number highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(highout);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - 0);
    number outdiff = 1 - -1;
    Index i;

    for (i = 0; i < n; i++) {
        number value = (x[(Index)i] - 0) * inscale;
        value = value * outdiff + -1;
        out1[(Index)i] = value;
    }
}

void scopetilde_06_perform(const SampleValue * x, const SampleValue * y, Index n) {
    auto __scopetilde_06_ysign = this->scopetilde_06_ysign;
    auto __scopetilde_06_ymonitorvalue = this->scopetilde_06_ymonitorvalue;
    auto __scopetilde_06_xsign = this->scopetilde_06_xsign;
    auto __scopetilde_06_xmonitorvalue = this->scopetilde_06_xmonitorvalue;
    auto __scopetilde_06_mode = this->scopetilde_06_mode;

    for (Index i = 0; i < n; i++) {
        number xval = x[(Index)i];
        number yval = y[(Index)i];

        if (__scopetilde_06_mode == 1) {
            number xabsval = rnbo_abs(xval);

            if (xabsval > __scopetilde_06_xmonitorvalue) {
                __scopetilde_06_xmonitorvalue = xabsval;
                __scopetilde_06_xsign = (xval < 0 ? -1 : 1);
            }

            number yabsval = rnbo_abs(yval);

            if (yabsval > __scopetilde_06_ymonitorvalue) {
                __scopetilde_06_ymonitorvalue = yabsval;
                __scopetilde_06_ysign = (yval < 0 ? -1 : 1);
            }
        } else {
            __scopetilde_06_xmonitorvalue = xval;
            __scopetilde_06_xsign = 1;
            __scopetilde_06_ymonitorvalue = yval;
            __scopetilde_06_ysign = 1;
        }

        this->scopetilde_06_effectiveCount--;

        if (this->scopetilde_06_effectiveCount <= 0) {
            this->scopetilde_06_updateEffectiveCount();
            this->scopetilde_06_monitorbuffer->push(__scopetilde_06_xmonitorvalue * __scopetilde_06_xsign);

            if (__scopetilde_06_mode == 1)
                __scopetilde_06_xmonitorvalue = 0;

            if (this->scopetilde_06_monitorbuffer->length >= 128 * (1 + 0)) {
                this->getEngine()->sendListMessage(
                    TAG("monitor"),
                    TAG("scope~_obj-162"),
                    this->scopetilde_06_monitorbuffer,
                    this->_currentTime
                );;

                this->scopetilde_06_monitorbuffer->length = 0;
            }
        }
    }

    this->scopetilde_06_xmonitorvalue = __scopetilde_06_xmonitorvalue;
    this->scopetilde_06_xsign = __scopetilde_06_xsign;
    this->scopetilde_06_ymonitorvalue = __scopetilde_06_ymonitorvalue;
    this->scopetilde_06_ysign = __scopetilde_06_ysign;
}

void ip_02_perform(SampleValue * out, Index n) {
    auto __ip_02_lastValue = this->ip_02_lastValue;
    auto __ip_02_lastIndex = this->ip_02_lastIndex;

    for (Index i = 0; i < n; i++) {
        out[(Index)i] = ((SampleIndex)(i) >= __ip_02_lastIndex ? __ip_02_lastValue : this->ip_02_sigbuf[(Index)i]);
    }

    __ip_02_lastIndex = 0;
    this->ip_02_lastIndex = __ip_02_lastIndex;
}

void dspexpr_37_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_36_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + 1;//#map:_###_obj_###_:1
    }
}

void slide_tilde_03_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
    RNBO_UNUSED(down);
    RNBO_UNUSED(up);
    auto __slide_tilde_03_prev = this->slide_tilde_03_prev;
    auto iup = this->safediv(1., this->maximum(1., rnbo_abs(10)));
    auto idown = this->safediv(1., this->maximum(1., rnbo_abs(10)));
    Index i;

    for (i = 0; i < n; i++) {
        number temp = x[(Index)i] - __slide_tilde_03_prev;
        __slide_tilde_03_prev = __slide_tilde_03_prev + ((x[(Index)i] > __slide_tilde_03_prev ? iup : idown)) * temp;
        out1[(Index)i] = __slide_tilde_03_prev;
    }

    this->slide_tilde_03_prev = __slide_tilde_03_prev;
}

void numbertilde_17_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_17_currentIntervalInSamples = this->numbertilde_17_currentIntervalInSamples;
    auto __numbertilde_17_lastValue = this->numbertilde_17_lastValue;
    auto __numbertilde_17_currentInterval = this->numbertilde_17_currentInterval;
    auto __numbertilde_17_rampInSamples = this->numbertilde_17_rampInSamples;
    auto __numbertilde_17_outValue = this->numbertilde_17_outValue;
    auto __numbertilde_17_currentMode = this->numbertilde_17_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_17_currentMode == 0) {
            output[(Index)i] = this->numbertilde_17_smooth_next(
                __numbertilde_17_outValue,
                __numbertilde_17_rampInSamples,
                __numbertilde_17_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_17_currentInterval -= n;

    if (monitorvalue != __numbertilde_17_lastValue && __numbertilde_17_currentInterval <= 0) {
        __numbertilde_17_currentInterval = __numbertilde_17_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            157032932,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_17_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-33"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_17_currentInterval = __numbertilde_17_currentInterval;
    this->numbertilde_17_lastValue = __numbertilde_17_lastValue;
}

void ip_03_perform(SampleValue * out, Index n) {
    auto __ip_03_lastValue = this->ip_03_lastValue;
    auto __ip_03_lastIndex = this->ip_03_lastIndex;

    for (Index i = 0; i < n; i++) {
        out[(Index)i] = ((SampleIndex)(i) >= __ip_03_lastIndex ? __ip_03_lastValue : this->ip_03_sigbuf[(Index)i]);
    }

    __ip_03_lastIndex = 0;
    this->ip_03_lastIndex = __ip_03_lastIndex;
}

void dspexpr_34_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_35_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + 1;//#map:_###_obj_###_:1
    }
}

void slide_tilde_04_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
    RNBO_UNUSED(down);
    RNBO_UNUSED(up);
    auto __slide_tilde_04_prev = this->slide_tilde_04_prev;
    auto iup = this->safediv(1., this->maximum(1., rnbo_abs(10)));
    auto idown = this->safediv(1., this->maximum(1., rnbo_abs(10)));
    Index i;

    for (i = 0; i < n; i++) {
        number temp = x[(Index)i] - __slide_tilde_04_prev;
        __slide_tilde_04_prev = __slide_tilde_04_prev + ((x[(Index)i] > __slide_tilde_04_prev ? iup : idown)) * temp;
        out1[(Index)i] = __slide_tilde_04_prev;
    }

    this->slide_tilde_04_prev = __slide_tilde_04_prev;
}

void numbertilde_16_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_16_currentIntervalInSamples = this->numbertilde_16_currentIntervalInSamples;
    auto __numbertilde_16_lastValue = this->numbertilde_16_lastValue;
    auto __numbertilde_16_currentInterval = this->numbertilde_16_currentInterval;
    auto __numbertilde_16_rampInSamples = this->numbertilde_16_rampInSamples;
    auto __numbertilde_16_outValue = this->numbertilde_16_outValue;
    auto __numbertilde_16_currentMode = this->numbertilde_16_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_16_currentMode == 0) {
            output[(Index)i] = this->numbertilde_16_smooth_next(
                __numbertilde_16_outValue,
                __numbertilde_16_rampInSamples,
                __numbertilde_16_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_16_currentInterval -= n;

    if (monitorvalue != __numbertilde_16_lastValue && __numbertilde_16_currentInterval <= 0) {
        __numbertilde_16_currentInterval = __numbertilde_16_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1876983388,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_16_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-113"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_16_currentInterval = __numbertilde_16_currentInterval;
    this->numbertilde_16_lastValue = __numbertilde_16_lastValue;
}

void filtercoeff_02_perform(
    number frequency,
    number gain,
    number q,
    SampleValue * a0,
    SampleValue * a1,
    SampleValue * a2,
    SampleValue * b1,
    SampleValue * b2,
    Index n
) {
    RNBO_UNUSED(gain);
    auto __filtercoeff_02_activeResamp = this->filtercoeff_02_activeResamp;
    auto __filtercoeff_02_resamp_counter = this->filtercoeff_02_resamp_counter;
    auto __filtercoeff_02_K_EPSILON = this->filtercoeff_02_K_EPSILON;

    for (Index i = 0; i < n; i++) {
        number local_q = q;
        number local_gain = 1;

        if (local_gain < 0)
            local_gain = 0;

        number local_frequency = frequency;

        if (local_q < __filtercoeff_02_K_EPSILON)
            local_q = __filtercoeff_02_K_EPSILON;

        local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
        __filtercoeff_02_resamp_counter--;

        if (__filtercoeff_02_resamp_counter <= 0) {
            __filtercoeff_02_resamp_counter = __filtercoeff_02_activeResamp;
            this->filtercoeff_02_updateTerms(local_frequency, local_gain, local_q);
        }

        a0[(Index)i] = this->filtercoeff_02_la0;
        a1[(Index)i] = this->filtercoeff_02_la1;
        a2[(Index)i] = this->filtercoeff_02_la2;
        b1[(Index)i] = this->filtercoeff_02_lb1;
        b2[(Index)i] = this->filtercoeff_02_lb2;
    }

    this->filtercoeff_02_resamp_counter = __filtercoeff_02_resamp_counter;
}

void numbertilde_18_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_18_currentIntervalInSamples = this->numbertilde_18_currentIntervalInSamples;
    auto __numbertilde_18_lastValue = this->numbertilde_18_lastValue;
    auto __numbertilde_18_currentInterval = this->numbertilde_18_currentInterval;
    auto __numbertilde_18_rampInSamples = this->numbertilde_18_rampInSamples;
    auto __numbertilde_18_outValue = this->numbertilde_18_outValue;
    auto __numbertilde_18_currentMode = this->numbertilde_18_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_18_currentMode == 0) {
            output[(Index)i] = this->numbertilde_18_smooth_next(
                __numbertilde_18_outValue,
                __numbertilde_18_rampInSamples,
                __numbertilde_18_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_18_currentInterval -= n;

    if (monitorvalue != __numbertilde_18_lastValue && __numbertilde_18_currentInterval <= 0) {
        __numbertilde_18_currentInterval = __numbertilde_18_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -935701140,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_18_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-126"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_18_currentInterval = __numbertilde_18_currentInterval;
    this->numbertilde_18_lastValue = __numbertilde_18_lastValue;
}

void numbertilde_20_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_20_currentIntervalInSamples = this->numbertilde_20_currentIntervalInSamples;
    auto __numbertilde_20_lastValue = this->numbertilde_20_lastValue;
    auto __numbertilde_20_currentInterval = this->numbertilde_20_currentInterval;
    auto __numbertilde_20_rampInSamples = this->numbertilde_20_rampInSamples;
    auto __numbertilde_20_outValue = this->numbertilde_20_outValue;
    auto __numbertilde_20_currentMode = this->numbertilde_20_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_20_currentMode == 0) {
            output[(Index)i] = this->numbertilde_20_smooth_next(
                __numbertilde_20_outValue,
                __numbertilde_20_rampInSamples,
                __numbertilde_20_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_20_currentInterval -= n;

    if (monitorvalue != __numbertilde_20_lastValue && __numbertilde_20_currentInterval <= 0) {
        __numbertilde_20_currentInterval = __numbertilde_20_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1637530643,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_20_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-127"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_20_currentInterval = __numbertilde_20_currentInterval;
    this->numbertilde_20_lastValue = __numbertilde_20_lastValue;
}

void numbertilde_22_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_22_currentIntervalInSamples = this->numbertilde_22_currentIntervalInSamples;
    auto __numbertilde_22_lastValue = this->numbertilde_22_lastValue;
    auto __numbertilde_22_currentInterval = this->numbertilde_22_currentInterval;
    auto __numbertilde_22_rampInSamples = this->numbertilde_22_rampInSamples;
    auto __numbertilde_22_outValue = this->numbertilde_22_outValue;
    auto __numbertilde_22_currentMode = this->numbertilde_22_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_22_currentMode == 0) {
            output[(Index)i] = this->numbertilde_22_smooth_next(
                __numbertilde_22_outValue,
                __numbertilde_22_rampInSamples,
                __numbertilde_22_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_22_currentInterval -= n;

    if (monitorvalue != __numbertilde_22_lastValue && __numbertilde_22_currentInterval <= 0) {
        __numbertilde_22_currentInterval = __numbertilde_22_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1175153885,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_22_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-128"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_22_currentInterval = __numbertilde_22_currentInterval;
    this->numbertilde_22_lastValue = __numbertilde_22_lastValue;
}

void numbertilde_23_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_23_currentIntervalInSamples = this->numbertilde_23_currentIntervalInSamples;
    auto __numbertilde_23_lastValue = this->numbertilde_23_lastValue;
    auto __numbertilde_23_currentInterval = this->numbertilde_23_currentInterval;
    auto __numbertilde_23_rampInSamples = this->numbertilde_23_rampInSamples;
    auto __numbertilde_23_outValue = this->numbertilde_23_outValue;
    auto __numbertilde_23_currentMode = this->numbertilde_23_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_23_currentMode == 0) {
            output[(Index)i] = this->numbertilde_23_smooth_next(
                __numbertilde_23_outValue,
                __numbertilde_23_rampInSamples,
                __numbertilde_23_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_23_currentInterval -= n;

    if (monitorvalue != __numbertilde_23_lastValue && __numbertilde_23_currentInterval <= 0) {
        __numbertilde_23_currentInterval = __numbertilde_23_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -233871637,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_23_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-124"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_23_currentInterval = __numbertilde_23_currentInterval;
    this->numbertilde_23_lastValue = __numbertilde_23_lastValue;
}

void numbertilde_25_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_25_currentIntervalInSamples = this->numbertilde_25_currentIntervalInSamples;
    auto __numbertilde_25_lastValue = this->numbertilde_25_lastValue;
    auto __numbertilde_25_currentInterval = this->numbertilde_25_currentInterval;
    auto __numbertilde_25_rampInSamples = this->numbertilde_25_rampInSamples;
    auto __numbertilde_25_outValue = this->numbertilde_25_outValue;
    auto __numbertilde_25_currentMode = this->numbertilde_25_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_25_currentMode == 0) {
            output[(Index)i] = this->numbertilde_25_smooth_next(
                __numbertilde_25_outValue,
                __numbertilde_25_rampInSamples,
                __numbertilde_25_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_25_currentInterval -= n;

    if (monitorvalue != __numbertilde_25_lastValue && __numbertilde_25_currentInterval <= 0) {
        __numbertilde_25_currentInterval = __numbertilde_25_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            467957866,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_25_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-123"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_25_currentInterval = __numbertilde_25_currentInterval;
    this->numbertilde_25_lastValue = __numbertilde_25_lastValue;
}

void linetilde_06_perform(SampleValue * out, Index n) {
    auto __linetilde_06_time = this->linetilde_06_time;
    auto __linetilde_06_keepramp = this->linetilde_06_keepramp;
    auto __linetilde_06_currentValue = this->linetilde_06_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_06_activeRamps->length)) {
        while ((bool)(this->linetilde_06_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_06_activeRamps[0];
            number inc = this->linetilde_06_activeRamps[1];
            number rampTimeInSamples = this->linetilde_06_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_06_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_06_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_06_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        743790737,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_06_keepramp))) {
                        __linetilde_06_time = 0;
                    }
                }
            }

            __linetilde_06_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_06_currentValue;
        i++;
    }

    this->linetilde_06_currentValue = __linetilde_06_currentValue;
    this->linetilde_06_time = __linetilde_06_time;
}

void dspexpr_41_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void linetilde_07_perform(SampleValue * out, Index n) {
    auto __linetilde_07_time = this->linetilde_07_time;
    auto __linetilde_07_keepramp = this->linetilde_07_keepramp;
    auto __linetilde_07_currentValue = this->linetilde_07_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_07_activeRamps->length)) {
        while ((bool)(this->linetilde_07_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_07_activeRamps[0];
            number inc = this->linetilde_07_activeRamps[1];
            number rampTimeInSamples = this->linetilde_07_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_07_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_07_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_07_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -815330736,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_07_keepramp))) {
                        __linetilde_07_time = 0;
                    }
                }
            }

            __linetilde_07_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_07_currentValue;
        i++;
    }

    this->linetilde_07_currentValue = __linetilde_07_currentValue;
    this->linetilde_07_time = __linetilde_07_time;
}

void dspexpr_45_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_44_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void linetilde_08_perform(SampleValue * out, Index n) {
    auto __linetilde_08_time = this->linetilde_08_time;
    auto __linetilde_08_keepramp = this->linetilde_08_keepramp;
    auto __linetilde_08_currentValue = this->linetilde_08_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_08_activeRamps->length)) {
        while ((bool)(this->linetilde_08_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_08_activeRamps[0];
            number inc = this->linetilde_08_activeRamps[1];
            number rampTimeInSamples = this->linetilde_08_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_08_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_08_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_08_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        349887047,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_08_keepramp))) {
                        __linetilde_08_time = 0;
                    }
                }
            }

            __linetilde_08_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_08_currentValue;
        i++;
    }

    this->linetilde_08_currentValue = __linetilde_08_currentValue;
    this->linetilde_08_time = __linetilde_08_time;
}

void linetilde_09_perform(SampleValue * out, Index n) {
    auto __linetilde_09_time = this->linetilde_09_time;
    auto __linetilde_09_keepramp = this->linetilde_09_keepramp;
    auto __linetilde_09_currentValue = this->linetilde_09_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_09_activeRamps->length)) {
        while ((bool)(this->linetilde_09_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_09_activeRamps[0];
            number inc = this->linetilde_09_activeRamps[1];
            number rampTimeInSamples = this->linetilde_09_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_09_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_09_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_09_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        361393614,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_09_keepramp))) {
                        __linetilde_09_time = 0;
                    }
                }
            }

            __linetilde_09_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_09_currentValue;
        i++;
    }

    this->linetilde_09_currentValue = __linetilde_09_currentValue;
    this->linetilde_09_time = __linetilde_09_time;
}

void dspexpr_47_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void scale_tilde_04_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    const Sample * highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - -1);
    Index i;

    for (i = 0; i < n; i++) {
        number outdiff = highout[(Index)i] - 0;
        number value = (x[(Index)i] - -1) * inscale;
        value = value * outdiff + 0;
        out1[(Index)i] = value;
    }
}

void linetilde_10_perform(SampleValue * out, Index n) {
    auto __linetilde_10_time = this->linetilde_10_time;
    auto __linetilde_10_keepramp = this->linetilde_10_keepramp;
    auto __linetilde_10_currentValue = this->linetilde_10_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_10_activeRamps->length)) {
        while ((bool)(this->linetilde_10_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_10_activeRamps[0];
            number inc = this->linetilde_10_activeRamps[1];
            number rampTimeInSamples = this->linetilde_10_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_10_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_10_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_10_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1920515087,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_10_keepramp))) {
                        __linetilde_10_time = 0;
                    }
                }
            }

            __linetilde_10_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_10_currentValue;
        i++;
    }

    this->linetilde_10_currentValue = __linetilde_10_currentValue;
    this->linetilde_10_time = __linetilde_10_time;
}

void dspexpr_49_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_46_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_43_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_42_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void numbertilde_21_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_21_currentIntervalInSamples = this->numbertilde_21_currentIntervalInSamples;
    auto __numbertilde_21_lastValue = this->numbertilde_21_lastValue;
    auto __numbertilde_21_currentInterval = this->numbertilde_21_currentInterval;
    auto __numbertilde_21_rampInSamples = this->numbertilde_21_rampInSamples;
    auto __numbertilde_21_outValue = this->numbertilde_21_outValue;
    auto __numbertilde_21_currentMode = this->numbertilde_21_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_21_currentMode == 0) {
            output[(Index)i] = this->numbertilde_21_smooth_next(
                __numbertilde_21_outValue,
                __numbertilde_21_rampInSamples,
                __numbertilde_21_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_21_currentInterval -= n;

    if (monitorvalue != __numbertilde_21_lastValue && __numbertilde_21_currentInterval <= 0) {
        __numbertilde_21_currentInterval = __numbertilde_21_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -544796571,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_21_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-12"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_21_currentInterval = __numbertilde_21_currentInterval;
    this->numbertilde_21_lastValue = __numbertilde_21_lastValue;
}

void ip_04_perform(SampleValue * out, Index n) {
    auto __ip_04_lastValue = this->ip_04_lastValue;
    auto __ip_04_lastIndex = this->ip_04_lastIndex;

    for (Index i = 0; i < n; i++) {
        out[(Index)i] = ((SampleIndex)(i) >= __ip_04_lastIndex ? __ip_04_lastValue : this->ip_04_sigbuf[(Index)i]);
    }

    __ip_04_lastIndex = 0;
    this->ip_04_lastIndex = __ip_04_lastIndex;
}

void selector_03_perform(
    number onoff,
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        if (onoff >= 1 && onoff < 2)
            out[(Index)i] = in1[(Index)i];
        else if (onoff >= 2 && onoff < 3)
            out[(Index)i] = in2[(Index)i];
        else
            out[(Index)i] = 0;
    }
}

void scale_tilde_03_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    number highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(highout);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - 0);
    number outdiff = 2.34 - 1;
    Index i;

    for (i = 0; i < n; i++) {
        number value = (x[(Index)i] - 0) * inscale;
        value = value * outdiff + 1;
        out1[(Index)i] = value;
    }
}

void numbertilde_19_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_19_currentIntervalInSamples = this->numbertilde_19_currentIntervalInSamples;
    auto __numbertilde_19_lastValue = this->numbertilde_19_lastValue;
    auto __numbertilde_19_currentInterval = this->numbertilde_19_currentInterval;
    auto __numbertilde_19_rampInSamples = this->numbertilde_19_rampInSamples;
    auto __numbertilde_19_outValue = this->numbertilde_19_outValue;
    auto __numbertilde_19_currentMode = this->numbertilde_19_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_19_currentMode == 0) {
            output[(Index)i] = this->numbertilde_19_smooth_next(
                __numbertilde_19_outValue,
                __numbertilde_19_rampInSamples,
                __numbertilde_19_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_19_currentInterval -= n;

    if (monitorvalue != __numbertilde_19_lastValue && __numbertilde_19_currentInterval <= 0) {
        __numbertilde_19_currentInterval = __numbertilde_19_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1871616872,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_19_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-106"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_19_currentInterval = __numbertilde_19_currentInterval;
    this->numbertilde_19_lastValue = __numbertilde_19_lastValue;
}

void filtercoeff_03_perform(
    number frequency,
    number gain,
    number q,
    SampleValue * a0,
    SampleValue * a1,
    SampleValue * a2,
    SampleValue * b1,
    SampleValue * b2,
    Index n
) {
    RNBO_UNUSED(gain);
    auto __filtercoeff_03_activeResamp = this->filtercoeff_03_activeResamp;
    auto __filtercoeff_03_resamp_counter = this->filtercoeff_03_resamp_counter;
    auto __filtercoeff_03_K_EPSILON = this->filtercoeff_03_K_EPSILON;

    for (Index i = 0; i < n; i++) {
        number local_q = q;
        number local_gain = 1;

        if (local_gain < 0)
            local_gain = 0;

        number local_frequency = frequency;

        if (local_q < __filtercoeff_03_K_EPSILON)
            local_q = __filtercoeff_03_K_EPSILON;

        local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
        __filtercoeff_03_resamp_counter--;

        if (__filtercoeff_03_resamp_counter <= 0) {
            __filtercoeff_03_resamp_counter = __filtercoeff_03_activeResamp;
            this->filtercoeff_03_updateTerms(local_frequency, local_gain, local_q);
        }

        a0[(Index)i] = this->filtercoeff_03_la0;
        a1[(Index)i] = this->filtercoeff_03_la1;
        a2[(Index)i] = this->filtercoeff_03_la2;
        b1[(Index)i] = this->filtercoeff_03_lb1;
        b2[(Index)i] = this->filtercoeff_03_lb2;
    }

    this->filtercoeff_03_resamp_counter = __filtercoeff_03_resamp_counter;
}

void numbertilde_26_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_26_currentIntervalInSamples = this->numbertilde_26_currentIntervalInSamples;
    auto __numbertilde_26_lastValue = this->numbertilde_26_lastValue;
    auto __numbertilde_26_currentInterval = this->numbertilde_26_currentInterval;
    auto __numbertilde_26_rampInSamples = this->numbertilde_26_rampInSamples;
    auto __numbertilde_26_outValue = this->numbertilde_26_outValue;
    auto __numbertilde_26_currentMode = this->numbertilde_26_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_26_currentMode == 0) {
            output[(Index)i] = this->numbertilde_26_smooth_next(
                __numbertilde_26_outValue,
                __numbertilde_26_rampInSamples,
                __numbertilde_26_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_26_currentInterval -= n;

    if (monitorvalue != __numbertilde_26_lastValue && __numbertilde_26_currentInterval <= 0) {
        __numbertilde_26_currentInterval = __numbertilde_26_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            312495399,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_26_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-92"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_26_currentInterval = __numbertilde_26_currentInterval;
    this->numbertilde_26_lastValue = __numbertilde_26_lastValue;
}

void numbertilde_29_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_29_currentIntervalInSamples = this->numbertilde_29_currentIntervalInSamples;
    auto __numbertilde_29_lastValue = this->numbertilde_29_lastValue;
    auto __numbertilde_29_currentInterval = this->numbertilde_29_currentInterval;
    auto __numbertilde_29_rampInSamples = this->numbertilde_29_rampInSamples;
    auto __numbertilde_29_outValue = this->numbertilde_29_outValue;
    auto __numbertilde_29_currentMode = this->numbertilde_29_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_29_currentMode == 0) {
            output[(Index)i] = this->numbertilde_29_smooth_next(
                __numbertilde_29_outValue,
                __numbertilde_29_rampInSamples,
                __numbertilde_29_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_29_currentInterval -= n;

    if (monitorvalue != __numbertilde_29_lastValue && __numbertilde_29_currentInterval <= 0) {
        __numbertilde_29_currentInterval = __numbertilde_29_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -389334104,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_29_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-93"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_29_currentInterval = __numbertilde_29_currentInterval;
    this->numbertilde_29_lastValue = __numbertilde_29_lastValue;
}

void numbertilde_31_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_31_currentIntervalInSamples = this->numbertilde_31_currentIntervalInSamples;
    auto __numbertilde_31_lastValue = this->numbertilde_31_lastValue;
    auto __numbertilde_31_currentInterval = this->numbertilde_31_currentInterval;
    auto __numbertilde_31_rampInSamples = this->numbertilde_31_rampInSamples;
    auto __numbertilde_31_outValue = this->numbertilde_31_outValue;
    auto __numbertilde_31_currentMode = this->numbertilde_31_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_31_currentMode == 0) {
            output[(Index)i] = this->numbertilde_31_smooth_next(
                __numbertilde_31_outValue,
                __numbertilde_31_rampInSamples,
                __numbertilde_31_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_31_currentInterval -= n;

    if (monitorvalue != __numbertilde_31_lastValue && __numbertilde_31_currentInterval <= 0) {
        __numbertilde_31_currentInterval = __numbertilde_31_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1091163607,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_31_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-99"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_31_currentInterval = __numbertilde_31_currentInterval;
    this->numbertilde_31_lastValue = __numbertilde_31_lastValue;
}

void numbertilde_33_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_33_currentIntervalInSamples = this->numbertilde_33_currentIntervalInSamples;
    auto __numbertilde_33_lastValue = this->numbertilde_33_lastValue;
    auto __numbertilde_33_currentInterval = this->numbertilde_33_currentInterval;
    auto __numbertilde_33_rampInSamples = this->numbertilde_33_rampInSamples;
    auto __numbertilde_33_outValue = this->numbertilde_33_outValue;
    auto __numbertilde_33_currentMode = this->numbertilde_33_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_33_currentMode == 0) {
            output[(Index)i] = this->numbertilde_33_smooth_next(
                __numbertilde_33_outValue,
                __numbertilde_33_rampInSamples,
                __numbertilde_33_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_33_currentInterval -= n;

    if (monitorvalue != __numbertilde_33_lastValue && __numbertilde_33_currentInterval <= 0) {
        __numbertilde_33_currentInterval = __numbertilde_33_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1014324902,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_33_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-91"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_33_currentInterval = __numbertilde_33_currentInterval;
    this->numbertilde_33_lastValue = __numbertilde_33_lastValue;
}

void numbertilde_35_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_35_currentIntervalInSamples = this->numbertilde_35_currentIntervalInSamples;
    auto __numbertilde_35_lastValue = this->numbertilde_35_lastValue;
    auto __numbertilde_35_currentInterval = this->numbertilde_35_currentInterval;
    auto __numbertilde_35_rampInSamples = this->numbertilde_35_rampInSamples;
    auto __numbertilde_35_outValue = this->numbertilde_35_outValue;
    auto __numbertilde_35_currentMode = this->numbertilde_35_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_35_currentMode == 0) {
            output[(Index)i] = this->numbertilde_35_smooth_next(
                __numbertilde_35_outValue,
                __numbertilde_35_rampInSamples,
                __numbertilde_35_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_35_currentInterval -= n;

    if (monitorvalue != __numbertilde_35_lastValue && __numbertilde_35_currentInterval <= 0) {
        __numbertilde_35_currentInterval = __numbertilde_35_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1716154405,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_35_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-90"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_35_currentInterval = __numbertilde_35_currentInterval;
    this->numbertilde_35_lastValue = __numbertilde_35_lastValue;
}

void filtercoeff_04_perform(
    number frequency,
    number gain,
    number q,
    SampleValue * a0,
    SampleValue * a1,
    SampleValue * a2,
    SampleValue * b1,
    SampleValue * b2,
    Index n
) {
    RNBO_UNUSED(gain);
    auto __filtercoeff_04_activeResamp = this->filtercoeff_04_activeResamp;
    auto __filtercoeff_04_resamp_counter = this->filtercoeff_04_resamp_counter;
    auto __filtercoeff_04_K_EPSILON = this->filtercoeff_04_K_EPSILON;

    for (Index i = 0; i < n; i++) {
        number local_q = q;
        number local_gain = 1;

        if (local_gain < 0)
            local_gain = 0;

        number local_frequency = frequency;

        if (local_q < __filtercoeff_04_K_EPSILON)
            local_q = __filtercoeff_04_K_EPSILON;

        local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
        __filtercoeff_04_resamp_counter--;

        if (__filtercoeff_04_resamp_counter <= 0) {
            __filtercoeff_04_resamp_counter = __filtercoeff_04_activeResamp;
            this->filtercoeff_04_updateTerms(local_frequency, local_gain, local_q);
        }

        a0[(Index)i] = this->filtercoeff_04_la0;
        a1[(Index)i] = this->filtercoeff_04_la1;
        a2[(Index)i] = this->filtercoeff_04_la2;
        b1[(Index)i] = this->filtercoeff_04_lb1;
        b2[(Index)i] = this->filtercoeff_04_lb2;
    }

    this->filtercoeff_04_resamp_counter = __filtercoeff_04_resamp_counter;
}

void biquad_tilde_03_perform(
    const Sample * x,
    const Sample * a0,
    const Sample * a1,
    const Sample * a2,
    const Sample * b1,
    const Sample * b2,
    SampleValue * out1,
    Index n
) {
    auto __biquad_tilde_03_y2 = this->biquad_tilde_03_y2;
    auto __biquad_tilde_03_y1 = this->biquad_tilde_03_y1;
    auto __biquad_tilde_03_x2 = this->biquad_tilde_03_x2;
    auto __biquad_tilde_03_x1 = this->biquad_tilde_03_x1;
    Index i;

    for (i = 0; i < n; i++) {
        number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_03_x1 * a1[(Index)i] + __biquad_tilde_03_x2 * a2[(Index)i] - (__biquad_tilde_03_y1 * b1[(Index)i] + __biquad_tilde_03_y2 * b2[(Index)i]);
        __biquad_tilde_03_x2 = __biquad_tilde_03_x1;
        __biquad_tilde_03_x1 = x[(Index)i];
        __biquad_tilde_03_y2 = __biquad_tilde_03_y1;
        __biquad_tilde_03_y1 = tmp;
        out1[(Index)i] = tmp;
    }

    this->biquad_tilde_03_x1 = __biquad_tilde_03_x1;
    this->biquad_tilde_03_x2 = __biquad_tilde_03_x2;
    this->biquad_tilde_03_y1 = __biquad_tilde_03_y1;
    this->biquad_tilde_03_y2 = __biquad_tilde_03_y2;
}

void biquad_tilde_02_perform(
    const Sample * x,
    const Sample * a0,
    const Sample * a1,
    const Sample * a2,
    const Sample * b1,
    const Sample * b2,
    SampleValue * out1,
    Index n
) {
    auto __biquad_tilde_02_y2 = this->biquad_tilde_02_y2;
    auto __biquad_tilde_02_y1 = this->biquad_tilde_02_y1;
    auto __biquad_tilde_02_x2 = this->biquad_tilde_02_x2;
    auto __biquad_tilde_02_x1 = this->biquad_tilde_02_x1;
    Index i;

    for (i = 0; i < n; i++) {
        number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_02_x1 * a1[(Index)i] + __biquad_tilde_02_x2 * a2[(Index)i] - (__biquad_tilde_02_y1 * b1[(Index)i] + __biquad_tilde_02_y2 * b2[(Index)i]);
        __biquad_tilde_02_x2 = __biquad_tilde_02_x1;
        __biquad_tilde_02_x1 = x[(Index)i];
        __biquad_tilde_02_y2 = __biquad_tilde_02_y1;
        __biquad_tilde_02_y1 = tmp;
        out1[(Index)i] = tmp;
    }

    this->biquad_tilde_02_x1 = __biquad_tilde_02_x1;
    this->biquad_tilde_02_x2 = __biquad_tilde_02_x2;
    this->biquad_tilde_02_y1 = __biquad_tilde_02_y1;
    this->biquad_tilde_02_y2 = __biquad_tilde_02_y2;
}

void gen_02_perform(
    const Sample * in1,
    const Sample * in2,
    number in3,
    const Sample * in4,
    const Sample * in5,
    const Sample * in6,
    const Sample * in7,
    const Sample * in8,
    const Sample * in9,
    SampleValue * out1,
    Index n
) {
    auto __gen_02_history_3_value = this->gen_02_history_3_value;
    auto __gen_02_history_5_value = this->gen_02_history_5_value;
    auto __gen_02_history_4_value = this->gen_02_history_4_value;
    auto __gen_02_history_2_value = this->gen_02_history_2_value;
    number clamp_10_4 = (in3 > 0.99 ? 0.99 : (in3 < -0.99 ? -0.99 : in3));
    Index i;

    for (i = 0; i < n; i++) {
        number mul_6_0 = __gen_02_history_2_value * in6[(Index)i];
        number mul_7_1 = __gen_02_history_4_value * in5[(Index)i];
        number mul_8_2 = __gen_02_history_5_value * in7[(Index)i];
        number mul_9_3 = __gen_02_history_3_value * in8[(Index)i];
        auto mstosamps_11_5 = this->mstosamps(in2[(Index)i]);
        number slide_12_7 = this->gen_02_slide_6_next(mstosamps_11_5, 5000, 100);
        number tap_13_8 = this->gen_02_delay_1_read(slide_12_7, 0);
        out1[(Index)i] = tap_13_8;
        number mul_14_9 = tap_13_8 * in4[(Index)i];
        number sub_15_10 = mul_14_9 + mul_7_1 + mul_6_0 - (mul_9_3 + mul_8_2);
        number slide_16_12 = this->gen_02_slide_11_next(in9[(Index)i], 5000, 100);
        number mix_17_13 = tap_13_8 + slide_16_12 * (sub_15_10 - tap_13_8);
        number mul_18_14 = mix_17_13 * clamp_10_4;
        number history_2_next_19_15 = fixdenorm(__gen_02_history_4_value);
        number history_3_next_20_16 = fixdenorm(__gen_02_history_5_value);
        number history_4_next_21_17 = fixdenorm(tap_13_8);
        number history_5_next_22_18 = fixdenorm(sub_15_10);
        this->gen_02_delay_1_write(in1[(Index)i] + mul_18_14);
        __gen_02_history_5_value = history_5_next_22_18;
        __gen_02_history_4_value = history_4_next_21_17;
        __gen_02_history_3_value = history_3_next_20_16;
        __gen_02_history_2_value = history_2_next_19_15;
        this->gen_02_delay_1_step();
    }

    this->gen_02_history_2_value = __gen_02_history_2_value;
    this->gen_02_history_4_value = __gen_02_history_4_value;
    this->gen_02_history_5_value = __gen_02_history_5_value;
    this->gen_02_history_3_value = __gen_02_history_3_value;
}

void dspexpr_39_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void scopetilde_10_perform(const SampleValue * x, const SampleValue * y, Index n) {
    auto __scopetilde_10_ysign = this->scopetilde_10_ysign;
    auto __scopetilde_10_ymonitorvalue = this->scopetilde_10_ymonitorvalue;
    auto __scopetilde_10_xsign = this->scopetilde_10_xsign;
    auto __scopetilde_10_xmonitorvalue = this->scopetilde_10_xmonitorvalue;
    auto __scopetilde_10_mode = this->scopetilde_10_mode;

    for (Index i = 0; i < n; i++) {
        number xval = x[(Index)i];
        number yval = y[(Index)i];

        if (__scopetilde_10_mode == 1) {
            number xabsval = rnbo_abs(xval);

            if (xabsval > __scopetilde_10_xmonitorvalue) {
                __scopetilde_10_xmonitorvalue = xabsval;
                __scopetilde_10_xsign = (xval < 0 ? -1 : 1);
            }

            number yabsval = rnbo_abs(yval);

            if (yabsval > __scopetilde_10_ymonitorvalue) {
                __scopetilde_10_ymonitorvalue = yabsval;
                __scopetilde_10_ysign = (yval < 0 ? -1 : 1);
            }
        } else {
            __scopetilde_10_xmonitorvalue = xval;
            __scopetilde_10_xsign = 1;
            __scopetilde_10_ymonitorvalue = yval;
            __scopetilde_10_ysign = 1;
        }

        this->scopetilde_10_effectiveCount--;

        if (this->scopetilde_10_effectiveCount <= 0) {
            this->scopetilde_10_updateEffectiveCount();
            this->scopetilde_10_monitorbuffer->push(__scopetilde_10_xmonitorvalue * __scopetilde_10_xsign);

            if (__scopetilde_10_mode == 1)
                __scopetilde_10_xmonitorvalue = 0;

            if (this->scopetilde_10_monitorbuffer->length >= 128 * (1 + 0)) {
                this->getEngine()->sendListMessage(
                    TAG("monitor"),
                    TAG("scope~_obj-205"),
                    this->scopetilde_10_monitorbuffer,
                    this->_currentTime
                );;

                this->scopetilde_10_monitorbuffer->length = 0;
            }
        }
    }

    this->scopetilde_10_xmonitorvalue = __scopetilde_10_xmonitorvalue;
    this->scopetilde_10_xsign = __scopetilde_10_xsign;
    this->scopetilde_10_ymonitorvalue = __scopetilde_10_ymonitorvalue;
    this->scopetilde_10_ysign = __scopetilde_10_ysign;
}

void dspexpr_38_perform(const Sample * in1, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = rnbo_atan(in1[(Index)i]);//#map:_###_obj_###_:1
    }
}

void scopetilde_09_perform(const SampleValue * x, const SampleValue * y, Index n) {
    auto __scopetilde_09_ysign = this->scopetilde_09_ysign;
    auto __scopetilde_09_ymonitorvalue = this->scopetilde_09_ymonitorvalue;
    auto __scopetilde_09_xsign = this->scopetilde_09_xsign;
    auto __scopetilde_09_xmonitorvalue = this->scopetilde_09_xmonitorvalue;
    auto __scopetilde_09_mode = this->scopetilde_09_mode;

    for (Index i = 0; i < n; i++) {
        number xval = x[(Index)i];
        number yval = y[(Index)i];

        if (__scopetilde_09_mode == 1) {
            number xabsval = rnbo_abs(xval);

            if (xabsval > __scopetilde_09_xmonitorvalue) {
                __scopetilde_09_xmonitorvalue = xabsval;
                __scopetilde_09_xsign = (xval < 0 ? -1 : 1);
            }

            number yabsval = rnbo_abs(yval);

            if (yabsval > __scopetilde_09_ymonitorvalue) {
                __scopetilde_09_ymonitorvalue = yabsval;
                __scopetilde_09_ysign = (yval < 0 ? -1 : 1);
            }
        } else {
            __scopetilde_09_xmonitorvalue = xval;
            __scopetilde_09_xsign = 1;
            __scopetilde_09_ymonitorvalue = yval;
            __scopetilde_09_ysign = 1;
        }

        this->scopetilde_09_effectiveCount--;

        if (this->scopetilde_09_effectiveCount <= 0) {
            this->scopetilde_09_updateEffectiveCount();
            this->scopetilde_09_monitorbuffer->push(__scopetilde_09_xmonitorvalue * __scopetilde_09_xsign);

            if (__scopetilde_09_mode == 1)
                __scopetilde_09_xmonitorvalue = 0;

            if (this->scopetilde_09_monitorbuffer->length >= 128 * (1 + 0)) {
                this->getEngine()->sendListMessage(
                    TAG("monitor"),
                    TAG("scope~_obj-208"),
                    this->scopetilde_09_monitorbuffer,
                    this->_currentTime
                );;

                this->scopetilde_09_monitorbuffer->length = 0;
            }
        }
    }

    this->scopetilde_09_xmonitorvalue = __scopetilde_09_xmonitorvalue;
    this->scopetilde_09_xsign = __scopetilde_09_xsign;
    this->scopetilde_09_ymonitorvalue = __scopetilde_09_ymonitorvalue;
    this->scopetilde_09_ysign = __scopetilde_09_ysign;
}

void dspexpr_40_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void scopetilde_08_perform(const SampleValue * x, const SampleValue * y, Index n) {
    auto __scopetilde_08_ysign = this->scopetilde_08_ysign;
    auto __scopetilde_08_ymonitorvalue = this->scopetilde_08_ymonitorvalue;
    auto __scopetilde_08_xsign = this->scopetilde_08_xsign;
    auto __scopetilde_08_xmonitorvalue = this->scopetilde_08_xmonitorvalue;
    auto __scopetilde_08_mode = this->scopetilde_08_mode;

    for (Index i = 0; i < n; i++) {
        number xval = x[(Index)i];
        number yval = y[(Index)i];

        if (__scopetilde_08_mode == 1) {
            number xabsval = rnbo_abs(xval);

            if (xabsval > __scopetilde_08_xmonitorvalue) {
                __scopetilde_08_xmonitorvalue = xabsval;
                __scopetilde_08_xsign = (xval < 0 ? -1 : 1);
            }

            number yabsval = rnbo_abs(yval);

            if (yabsval > __scopetilde_08_ymonitorvalue) {
                __scopetilde_08_ymonitorvalue = yabsval;
                __scopetilde_08_ysign = (yval < 0 ? -1 : 1);
            }
        } else {
            __scopetilde_08_xmonitorvalue = xval;
            __scopetilde_08_xsign = 1;
            __scopetilde_08_ymonitorvalue = yval;
            __scopetilde_08_ysign = 1;
        }

        this->scopetilde_08_effectiveCount--;

        if (this->scopetilde_08_effectiveCount <= 0) {
            this->scopetilde_08_updateEffectiveCount();
            this->scopetilde_08_monitorbuffer->push(__scopetilde_08_xmonitorvalue * __scopetilde_08_xsign);

            if (__scopetilde_08_mode == 1)
                __scopetilde_08_xmonitorvalue = 0;

            if (this->scopetilde_08_monitorbuffer->length >= 128 * (1 + 0)) {
                this->getEngine()->sendListMessage(
                    TAG("monitor"),
                    TAG("scope~_obj-153"),
                    this->scopetilde_08_monitorbuffer,
                    this->_currentTime
                );;

                this->scopetilde_08_monitorbuffer->length = 0;
            }
        }
    }

    this->scopetilde_08_xmonitorvalue = __scopetilde_08_xmonitorvalue;
    this->scopetilde_08_xsign = __scopetilde_08_xsign;
    this->scopetilde_08_ymonitorvalue = __scopetilde_08_ymonitorvalue;
    this->scopetilde_08_ysign = __scopetilde_08_ysign;
}

void scopetilde_11_perform(const SampleValue * x, const SampleValue * y, Index n) {
    auto __scopetilde_11_ysign = this->scopetilde_11_ysign;
    auto __scopetilde_11_ymonitorvalue = this->scopetilde_11_ymonitorvalue;
    auto __scopetilde_11_xsign = this->scopetilde_11_xsign;
    auto __scopetilde_11_xmonitorvalue = this->scopetilde_11_xmonitorvalue;
    auto __scopetilde_11_mode = this->scopetilde_11_mode;

    for (Index i = 0; i < n; i++) {
        number xval = x[(Index)i];
        number yval = y[(Index)i];

        if (__scopetilde_11_mode == 1) {
            number xabsval = rnbo_abs(xval);

            if (xabsval > __scopetilde_11_xmonitorvalue) {
                __scopetilde_11_xmonitorvalue = xabsval;
                __scopetilde_11_xsign = (xval < 0 ? -1 : 1);
            }

            number yabsval = rnbo_abs(yval);

            if (yabsval > __scopetilde_11_ymonitorvalue) {
                __scopetilde_11_ymonitorvalue = yabsval;
                __scopetilde_11_ysign = (yval < 0 ? -1 : 1);
            }
        } else {
            __scopetilde_11_xmonitorvalue = xval;
            __scopetilde_11_xsign = 1;
            __scopetilde_11_ymonitorvalue = yval;
            __scopetilde_11_ysign = 1;
        }

        this->scopetilde_11_effectiveCount--;

        if (this->scopetilde_11_effectiveCount <= 0) {
            this->scopetilde_11_updateEffectiveCount();
            this->scopetilde_11_monitorbuffer->push(__scopetilde_11_xmonitorvalue * __scopetilde_11_xsign);

            if (__scopetilde_11_mode == 1)
                __scopetilde_11_xmonitorvalue = 0;

            if (this->scopetilde_11_monitorbuffer->length >= 128 * (1 + 0)) {
                this->getEngine()->sendListMessage(
                    TAG("monitor"),
                    TAG("scope~_obj-108"),
                    this->scopetilde_11_monitorbuffer,
                    this->_currentTime
                );;

                this->scopetilde_11_monitorbuffer->length = 0;
            }
        }
    }

    this->scopetilde_11_xmonitorvalue = __scopetilde_11_xmonitorvalue;
    this->scopetilde_11_xsign = __scopetilde_11_xsign;
    this->scopetilde_11_ymonitorvalue = __scopetilde_11_ymonitorvalue;
    this->scopetilde_11_ysign = __scopetilde_11_ysign;
}

void numbertilde_27_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_27_currentIntervalInSamples = this->numbertilde_27_currentIntervalInSamples;
    auto __numbertilde_27_lastValue = this->numbertilde_27_lastValue;
    auto __numbertilde_27_currentInterval = this->numbertilde_27_currentInterval;
    auto __numbertilde_27_rampInSamples = this->numbertilde_27_rampInSamples;
    auto __numbertilde_27_outValue = this->numbertilde_27_outValue;
    auto __numbertilde_27_currentMode = this->numbertilde_27_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_27_currentMode == 0) {
            output[(Index)i] = this->numbertilde_27_smooth_next(
                __numbertilde_27_outValue,
                __numbertilde_27_rampInSamples,
                __numbertilde_27_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_27_currentInterval -= n;

    if (monitorvalue != __numbertilde_27_lastValue && __numbertilde_27_currentInterval <= 0) {
        __numbertilde_27_currentInterval = __numbertilde_27_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1098315180,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_27_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-73"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_27_currentInterval = __numbertilde_27_currentInterval;
    this->numbertilde_27_lastValue = __numbertilde_27_lastValue;
}

void numbertilde_30_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_30_currentIntervalInSamples = this->numbertilde_30_currentIntervalInSamples;
    auto __numbertilde_30_lastValue = this->numbertilde_30_lastValue;
    auto __numbertilde_30_currentInterval = this->numbertilde_30_currentInterval;
    auto __numbertilde_30_rampInSamples = this->numbertilde_30_rampInSamples;
    auto __numbertilde_30_outValue = this->numbertilde_30_outValue;
    auto __numbertilde_30_currentMode = this->numbertilde_30_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_30_currentMode == 0) {
            output[(Index)i] = this->numbertilde_30_smooth_next(
                __numbertilde_30_outValue,
                __numbertilde_30_rampInSamples,
                __numbertilde_30_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_30_currentInterval -= n;

    if (monitorvalue != __numbertilde_30_lastValue && __numbertilde_30_currentInterval <= 0) {
        __numbertilde_30_currentInterval = __numbertilde_30_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1560691938,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_30_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-74"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_30_currentInterval = __numbertilde_30_currentInterval;
    this->numbertilde_30_lastValue = __numbertilde_30_lastValue;
}

void numbertilde_32_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_32_currentIntervalInSamples = this->numbertilde_32_currentIntervalInSamples;
    auto __numbertilde_32_lastValue = this->numbertilde_32_lastValue;
    auto __numbertilde_32_currentInterval = this->numbertilde_32_currentInterval;
    auto __numbertilde_32_rampInSamples = this->numbertilde_32_rampInSamples;
    auto __numbertilde_32_outValue = this->numbertilde_32_outValue;
    auto __numbertilde_32_currentMode = this->numbertilde_32_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_32_currentMode == 0) {
            output[(Index)i] = this->numbertilde_32_smooth_next(
                __numbertilde_32_outValue,
                __numbertilde_32_rampInSamples,
                __numbertilde_32_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_32_currentInterval -= n;

    if (monitorvalue != __numbertilde_32_lastValue && __numbertilde_32_currentInterval <= 0) {
        __numbertilde_32_currentInterval = __numbertilde_32_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            858862435,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_32_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-80"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_32_currentInterval = __numbertilde_32_currentInterval;
    this->numbertilde_32_lastValue = __numbertilde_32_lastValue;
}

void numbertilde_34_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_34_currentIntervalInSamples = this->numbertilde_34_currentIntervalInSamples;
    auto __numbertilde_34_lastValue = this->numbertilde_34_lastValue;
    auto __numbertilde_34_currentInterval = this->numbertilde_34_currentInterval;
    auto __numbertilde_34_rampInSamples = this->numbertilde_34_rampInSamples;
    auto __numbertilde_34_outValue = this->numbertilde_34_outValue;
    auto __numbertilde_34_currentMode = this->numbertilde_34_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_34_currentMode == 0) {
            output[(Index)i] = this->numbertilde_34_smooth_next(
                __numbertilde_34_outValue,
                __numbertilde_34_rampInSamples,
                __numbertilde_34_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_34_currentInterval -= n;

    if (monitorvalue != __numbertilde_34_lastValue && __numbertilde_34_currentInterval <= 0) {
        __numbertilde_34_currentInterval = __numbertilde_34_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1800144683,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_34_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-72"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_34_currentInterval = __numbertilde_34_currentInterval;
    this->numbertilde_34_lastValue = __numbertilde_34_lastValue;
}

void numbertilde_36_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_36_currentIntervalInSamples = this->numbertilde_36_currentIntervalInSamples;
    auto __numbertilde_36_lastValue = this->numbertilde_36_lastValue;
    auto __numbertilde_36_currentInterval = this->numbertilde_36_currentInterval;
    auto __numbertilde_36_rampInSamples = this->numbertilde_36_rampInSamples;
    auto __numbertilde_36_outValue = this->numbertilde_36_outValue;
    auto __numbertilde_36_currentMode = this->numbertilde_36_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_36_currentMode == 0) {
            output[(Index)i] = this->numbertilde_36_smooth_next(
                __numbertilde_36_outValue,
                __numbertilde_36_rampInSamples,
                __numbertilde_36_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_36_currentInterval -= n;

    if (monitorvalue != __numbertilde_36_lastValue && __numbertilde_36_currentInterval <= 0) {
        __numbertilde_36_currentInterval = __numbertilde_36_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1792993110,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_36_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-67"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_36_currentInterval = __numbertilde_36_currentInterval;
    this->numbertilde_36_lastValue = __numbertilde_36_lastValue;
}

void p_05_perform(Index n) {
    // subpatcher: Tempo,to,HZ
    this->p_05->process(nullptr, 0, nullptr, 0, n);
}

void linetilde_11_perform(SampleValue * out, Index n) {
    auto __linetilde_11_time = this->linetilde_11_time;
    auto __linetilde_11_keepramp = this->linetilde_11_keepramp;
    auto __linetilde_11_currentValue = this->linetilde_11_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_11_activeRamps->length)) {
        while ((bool)(this->linetilde_11_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_11_activeRamps[0];
            number inc = this->linetilde_11_activeRamps[1];
            number rampTimeInSamples = this->linetilde_11_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_11_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_11_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_11_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1114681293,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_11_keepramp))) {
                        __linetilde_11_time = 0;
                    }
                }
            }

            __linetilde_11_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_11_currentValue;
        i++;
    }

    this->linetilde_11_currentValue = __linetilde_11_currentValue;
    this->linetilde_11_time = __linetilde_11_time;
}

void dspexpr_51_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void triangle_tilde_03_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
    RNBO_UNUSED(duty);
    Index i;

    for (i = 0; i < n; i++) {
        number p1 = 0.5;
        auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
        p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));

        if (wrappedPhase < p1) {
            out1[(Index)i] = wrappedPhase / p1;
            continue;
        } else {
            out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
            continue;
        }
    }
}

void gen_05_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    number clamp_4_3 = (in2 > 1 ? 1 : (in2 < 0 ? 0 : in2));
    auto scale_5_4 = this->scale(clamp_4_3, 1, 0, 0, 1, 0.884);
    auto int_7_6 = this->intnum(1);
    auto int_8_7 = this->intnum(0);
    number clamp_9_8 = (scale_5_4 > 1 ? 1 : (scale_5_4 < 0 ? 0 : scale_5_4));
    number lt_10_9 = clamp_9_8 < 0.5;
    number not_11_10 = !(bool)(lt_10_9);
    auto scale_12_11 = this->scale(clamp_9_8, 1, 0, 0, 1.57079632679489661923, 1);
    number tan_13_12 = rnbo_tan(scale_12_11);
    number rdiv_14_13 = (tan_13_12 == 0. ? 0. : (number)1 / tan_13_12);
    number switch_15_14 = ((bool)(lt_10_9) ? rdiv_14_13 : tan_13_12);
    number switch_16_15 = ((bool)(lt_10_9) ? tan_13_12 : rdiv_14_13);
    Index i;

    for (i = 0; i < n; i++) {
        number clamp_1_0 = (in1[(Index)i] > 1 ? 1 : (in1[(Index)i] < 0 ? 0 : in1[(Index)i]));
        number round_2_1 = rnbo_fround(clamp_1_0 * 1 / (number)1) * 1;
        auto triangle_3_2 = this->triangle(clamp_1_0, 0.5);
        number clamp_6_5 = (triangle_3_2 > 1 ? 1 : (triangle_3_2 < 0 ? 0 : triangle_3_2));
        auto scale_17_16 = this->scale(clamp_6_5, not_11_10, lt_10_9, int_7_6, int_8_7, switch_16_15);
        auto scale_18_17 = this->scale(scale_17_16, 0, 1, lt_10_9, not_11_10, switch_15_14);
        number gen_19_18 = scale_18_17;
        number mix_20_19 = round_2_1 + gen_19_18 * (clamp_1_0 - round_2_1);
        number gen_21_20 = mix_20_19;
        out1[(Index)i] = gen_21_20;
    }
}

void scopetilde_13_perform(const SampleValue * x, const SampleValue * y, Index n) {
    auto __scopetilde_13_ysign = this->scopetilde_13_ysign;
    auto __scopetilde_13_ymonitorvalue = this->scopetilde_13_ymonitorvalue;
    auto __scopetilde_13_xsign = this->scopetilde_13_xsign;
    auto __scopetilde_13_xmonitorvalue = this->scopetilde_13_xmonitorvalue;
    auto __scopetilde_13_mode = this->scopetilde_13_mode;

    for (Index i = 0; i < n; i++) {
        number xval = x[(Index)i];
        number yval = y[(Index)i];

        if (__scopetilde_13_mode == 1) {
            number xabsval = rnbo_abs(xval);

            if (xabsval > __scopetilde_13_xmonitorvalue) {
                __scopetilde_13_xmonitorvalue = xabsval;
                __scopetilde_13_xsign = (xval < 0 ? -1 : 1);
            }

            number yabsval = rnbo_abs(yval);

            if (yabsval > __scopetilde_13_ymonitorvalue) {
                __scopetilde_13_ymonitorvalue = yabsval;
                __scopetilde_13_ysign = (yval < 0 ? -1 : 1);
            }
        } else {
            __scopetilde_13_xmonitorvalue = xval;
            __scopetilde_13_xsign = 1;
            __scopetilde_13_ymonitorvalue = yval;
            __scopetilde_13_ysign = 1;
        }

        this->scopetilde_13_effectiveCount--;

        if (this->scopetilde_13_effectiveCount <= 0) {
            this->scopetilde_13_updateEffectiveCount();
            this->scopetilde_13_monitorbuffer->push(__scopetilde_13_xmonitorvalue * __scopetilde_13_xsign);

            if (__scopetilde_13_mode == 1)
                __scopetilde_13_xmonitorvalue = 0;

            if (this->scopetilde_13_monitorbuffer->length >= 128 * (1 + 0)) {
                this->getEngine()->sendListMessage(
                    TAG("monitor"),
                    TAG("scope~_obj-477"),
                    this->scopetilde_13_monitorbuffer,
                    this->_currentTime
                );;

                this->scopetilde_13_monitorbuffer->length = 0;
            }
        }
    }

    this->scopetilde_13_xmonitorvalue = __scopetilde_13_xmonitorvalue;
    this->scopetilde_13_xsign = __scopetilde_13_xsign;
    this->scopetilde_13_ymonitorvalue = __scopetilde_13_ymonitorvalue;
    this->scopetilde_13_ysign = __scopetilde_13_ysign;
}

void scale_tilde_06_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    number highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(highout);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - 0);
    number outdiff = 1 - -1;
    Index i;

    for (i = 0; i < n; i++) {
        number value = (x[(Index)i] - 0) * inscale;
        value = value * outdiff + -1;
        out1[(Index)i] = value;
    }
}

void dspexpr_66_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
    }
}

void numbertilde_48_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_48_currentIntervalInSamples = this->numbertilde_48_currentIntervalInSamples;
    auto __numbertilde_48_lastValue = this->numbertilde_48_lastValue;
    auto __numbertilde_48_currentInterval = this->numbertilde_48_currentInterval;
    auto __numbertilde_48_rampInSamples = this->numbertilde_48_rampInSamples;
    auto __numbertilde_48_outValue = this->numbertilde_48_outValue;
    auto __numbertilde_48_currentMode = this->numbertilde_48_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_48_currentMode == 0) {
            output[(Index)i] = this->numbertilde_48_smooth_next(
                __numbertilde_48_outValue,
                __numbertilde_48_rampInSamples,
                __numbertilde_48_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_48_currentInterval -= n;

    if (monitorvalue != __numbertilde_48_lastValue && __numbertilde_48_currentInterval <= 0) {
        __numbertilde_48_currentInterval = __numbertilde_48_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -6936981,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_48_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-371"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_48_currentInterval = __numbertilde_48_currentInterval;
    this->numbertilde_48_lastValue = __numbertilde_48_lastValue;
}

void slide_tilde_08_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
    RNBO_UNUSED(down);
    RNBO_UNUSED(up);
    auto __slide_tilde_08_prev = this->slide_tilde_08_prev;
    auto iup = this->safediv(1., this->maximum(1., rnbo_abs(500)));
    auto idown = this->safediv(1., this->maximum(1., rnbo_abs(500)));
    Index i;

    for (i = 0; i < n; i++) {
        number temp = x[(Index)i] - __slide_tilde_08_prev;
        __slide_tilde_08_prev = __slide_tilde_08_prev + ((x[(Index)i] > __slide_tilde_08_prev ? iup : idown)) * temp;
        out1[(Index)i] = __slide_tilde_08_prev;
    }

    this->slide_tilde_08_prev = __slide_tilde_08_prev;
}

void rate_tilde_02_perform(const Sample * phase, number multiplier, SampleValue * out1, Index n) {
    RNBO_UNUSED(multiplier);
    auto __rate_tilde_02_currentPhase = this->rate_tilde_02_currentPhase;
    auto __rate_tilde_02_prev = this->rate_tilde_02_prev;
    auto __rate_tilde_02_diff = this->rate_tilde_02_diff;
    auto __rate_tilde_02_wantlock = this->rate_tilde_02_wantlock;
    auto __rate_tilde_02_invmult = this->rate_tilde_02_invmult;
    auto __rate_tilde_02_mult = this->rate_tilde_02_mult;
    Index i;

    for (i = 0; i < n; i++) {
        if (2 != __rate_tilde_02_mult && (bool)(!(bool)(rnbo_isnan(2)))) {
            __rate_tilde_02_mult = 2;
            __rate_tilde_02_invmult = this->safediv(1.0, __rate_tilde_02_mult);
            __rate_tilde_02_wantlock = 1;
        }

        __rate_tilde_02_diff = phase[(Index)i] - __rate_tilde_02_prev;

        if (__rate_tilde_02_diff < -0.5) {
            __rate_tilde_02_diff += 1;
        } else if (__rate_tilde_02_diff > 0.5) {
            __rate_tilde_02_diff -= 1;
        }

        __rate_tilde_02_currentPhase += __rate_tilde_02_diff * __rate_tilde_02_invmult;

        if (__rate_tilde_02_currentPhase > 1.0 || __rate_tilde_02_currentPhase < -0.0) {
            __rate_tilde_02_currentPhase = __rate_tilde_02_currentPhase - rnbo_floor(__rate_tilde_02_currentPhase);
        }

        __rate_tilde_02_prev = phase[(Index)i];
        out1[(Index)i] = __rate_tilde_02_currentPhase;
        continue;
    }

    this->rate_tilde_02_mult = __rate_tilde_02_mult;
    this->rate_tilde_02_invmult = __rate_tilde_02_invmult;
    this->rate_tilde_02_wantlock = __rate_tilde_02_wantlock;
    this->rate_tilde_02_diff = __rate_tilde_02_diff;
    this->rate_tilde_02_prev = __rate_tilde_02_prev;
    this->rate_tilde_02_currentPhase = __rate_tilde_02_currentPhase;
}

void triangle_tilde_04_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
    RNBO_UNUSED(duty);
    Index i;

    for (i = 0; i < n; i++) {
        number p1 = 0.5;
        auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
        p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));

        if (wrappedPhase < p1) {
            out1[(Index)i] = wrappedPhase / p1;
            continue;
        } else {
            out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
            continue;
        }
    }
}

void gen_06_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    number clamp_4_3 = (in2 > 1 ? 1 : (in2 < 0 ? 0 : in2));
    auto scale_5_4 = this->scale(clamp_4_3, 1, 0, 0, 1, 0.884);
    auto int_7_6 = this->intnum(1);
    auto int_8_7 = this->intnum(0);
    number clamp_9_8 = (scale_5_4 > 1 ? 1 : (scale_5_4 < 0 ? 0 : scale_5_4));
    number lt_10_9 = clamp_9_8 < 0.5;
    number not_11_10 = !(bool)(lt_10_9);
    auto scale_12_11 = this->scale(clamp_9_8, 1, 0, 0, 1.57079632679489661923, 1);
    number tan_13_12 = rnbo_tan(scale_12_11);
    number rdiv_14_13 = (tan_13_12 == 0. ? 0. : (number)1 / tan_13_12);
    number switch_15_14 = ((bool)(lt_10_9) ? rdiv_14_13 : tan_13_12);
    number switch_16_15 = ((bool)(lt_10_9) ? tan_13_12 : rdiv_14_13);
    Index i;

    for (i = 0; i < n; i++) {
        number clamp_1_0 = (in1[(Index)i] > 1 ? 1 : (in1[(Index)i] < 0 ? 0 : in1[(Index)i]));
        number round_2_1 = rnbo_fround(clamp_1_0 * 1 / (number)1) * 1;
        auto triangle_3_2 = this->triangle(clamp_1_0, 0.5);
        number clamp_6_5 = (triangle_3_2 > 1 ? 1 : (triangle_3_2 < 0 ? 0 : triangle_3_2));
        auto scale_17_16 = this->scale(clamp_6_5, not_11_10, lt_10_9, int_7_6, int_8_7, switch_16_15);
        auto scale_18_17 = this->scale(scale_17_16, 0, 1, lt_10_9, not_11_10, switch_15_14);
        number gen_19_18 = scale_18_17;
        number mix_20_19 = round_2_1 + gen_19_18 * (clamp_1_0 - round_2_1);
        number gen_21_20 = mix_20_19;
        out1[(Index)i] = gen_21_20;
    }
}

void scale_tilde_05_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    number highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(highout);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - 0);
    number outdiff = 1 - -1;
    Index i;

    for (i = 0; i < n; i++) {
        number value = (x[(Index)i] - 0) * inscale;
        value = value * outdiff + -1;
        out1[(Index)i] = value;
    }
}

void scopetilde_12_perform(const SampleValue * x, const SampleValue * y, Index n) {
    auto __scopetilde_12_ysign = this->scopetilde_12_ysign;
    auto __scopetilde_12_ymonitorvalue = this->scopetilde_12_ymonitorvalue;
    auto __scopetilde_12_xsign = this->scopetilde_12_xsign;
    auto __scopetilde_12_xmonitorvalue = this->scopetilde_12_xmonitorvalue;
    auto __scopetilde_12_mode = this->scopetilde_12_mode;

    for (Index i = 0; i < n; i++) {
        number xval = x[(Index)i];
        number yval = y[(Index)i];

        if (__scopetilde_12_mode == 1) {
            number xabsval = rnbo_abs(xval);

            if (xabsval > __scopetilde_12_xmonitorvalue) {
                __scopetilde_12_xmonitorvalue = xabsval;
                __scopetilde_12_xsign = (xval < 0 ? -1 : 1);
            }

            number yabsval = rnbo_abs(yval);

            if (yabsval > __scopetilde_12_ymonitorvalue) {
                __scopetilde_12_ymonitorvalue = yabsval;
                __scopetilde_12_ysign = (yval < 0 ? -1 : 1);
            }
        } else {
            __scopetilde_12_xmonitorvalue = xval;
            __scopetilde_12_xsign = 1;
            __scopetilde_12_ymonitorvalue = yval;
            __scopetilde_12_ysign = 1;
        }

        this->scopetilde_12_effectiveCount--;

        if (this->scopetilde_12_effectiveCount <= 0) {
            this->scopetilde_12_updateEffectiveCount();
            this->scopetilde_12_monitorbuffer->push(__scopetilde_12_xmonitorvalue * __scopetilde_12_xsign);

            if (__scopetilde_12_mode == 1)
                __scopetilde_12_xmonitorvalue = 0;

            if (this->scopetilde_12_monitorbuffer->length >= 128 * (1 + 0)) {
                this->getEngine()->sendListMessage(
                    TAG("monitor"),
                    TAG("scope~_obj-114"),
                    this->scopetilde_12_monitorbuffer,
                    this->_currentTime
                );;

                this->scopetilde_12_monitorbuffer->length = 0;
            }
        }
    }

    this->scopetilde_12_xmonitorvalue = __scopetilde_12_xmonitorvalue;
    this->scopetilde_12_xsign = __scopetilde_12_xsign;
    this->scopetilde_12_ymonitorvalue = __scopetilde_12_ymonitorvalue;
    this->scopetilde_12_ysign = __scopetilde_12_ysign;
}

void ip_05_perform(SampleValue * out, Index n) {
    auto __ip_05_lastValue = this->ip_05_lastValue;
    auto __ip_05_lastIndex = this->ip_05_lastIndex;

    for (Index i = 0; i < n; i++) {
        out[(Index)i] = ((SampleIndex)(i) >= __ip_05_lastIndex ? __ip_05_lastValue : this->ip_05_sigbuf[(Index)i]);
    }

    __ip_05_lastIndex = 0;
    this->ip_05_lastIndex = __ip_05_lastIndex;
}

void dspexpr_57_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_56_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + 1;//#map:_###_obj_###_:1
    }
}

void numbertilde_38_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_38_currentIntervalInSamples = this->numbertilde_38_currentIntervalInSamples;
    auto __numbertilde_38_lastValue = this->numbertilde_38_lastValue;
    auto __numbertilde_38_currentInterval = this->numbertilde_38_currentInterval;
    auto __numbertilde_38_rampInSamples = this->numbertilde_38_rampInSamples;
    auto __numbertilde_38_outValue = this->numbertilde_38_outValue;
    auto __numbertilde_38_currentMode = this->numbertilde_38_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_38_currentMode == 0) {
            output[(Index)i] = this->numbertilde_38_smooth_next(
                __numbertilde_38_outValue,
                __numbertilde_38_rampInSamples,
                __numbertilde_38_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_38_currentInterval -= n;

    if (monitorvalue != __numbertilde_38_lastValue && __numbertilde_38_currentInterval <= 0) {
        __numbertilde_38_currentInterval = __numbertilde_38_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1019691418,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_38_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-448"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_38_currentInterval = __numbertilde_38_currentInterval;
    this->numbertilde_38_lastValue = __numbertilde_38_lastValue;
}

void slide_tilde_06_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
    RNBO_UNUSED(down);
    RNBO_UNUSED(up);
    auto __slide_tilde_06_prev = this->slide_tilde_06_prev;
    auto iup = this->safediv(1., this->maximum(1., rnbo_abs(10)));
    auto idown = this->safediv(1., this->maximum(1., rnbo_abs(10)));
    Index i;

    for (i = 0; i < n; i++) {
        number temp = x[(Index)i] - __slide_tilde_06_prev;
        __slide_tilde_06_prev = __slide_tilde_06_prev + ((x[(Index)i] > __slide_tilde_06_prev ? iup : idown)) * temp;
        out1[(Index)i] = __slide_tilde_06_prev;
    }

    this->slide_tilde_06_prev = __slide_tilde_06_prev;
}

void ip_06_perform(SampleValue * out, Index n) {
    auto __ip_06_lastValue = this->ip_06_lastValue;
    auto __ip_06_lastIndex = this->ip_06_lastIndex;

    for (Index i = 0; i < n; i++) {
        out[(Index)i] = ((SampleIndex)(i) >= __ip_06_lastIndex ? __ip_06_lastValue : this->ip_06_sigbuf[(Index)i]);
    }

    __ip_06_lastIndex = 0;
    this->ip_06_lastIndex = __ip_06_lastIndex;
}

void dspexpr_52_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_53_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + 1;//#map:_###_obj_###_:1
    }
}

void numbertilde_37_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_37_currentIntervalInSamples = this->numbertilde_37_currentIntervalInSamples;
    auto __numbertilde_37_lastValue = this->numbertilde_37_lastValue;
    auto __numbertilde_37_currentInterval = this->numbertilde_37_currentInterval;
    auto __numbertilde_37_rampInSamples = this->numbertilde_37_rampInSamples;
    auto __numbertilde_37_outValue = this->numbertilde_37_outValue;
    auto __numbertilde_37_currentMode = this->numbertilde_37_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_37_currentMode == 0) {
            output[(Index)i] = this->numbertilde_37_smooth_next(
                __numbertilde_37_outValue,
                __numbertilde_37_rampInSamples,
                __numbertilde_37_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_37_currentInterval -= n;

    if (monitorvalue != __numbertilde_37_lastValue && __numbertilde_37_currentInterval <= 0) {
        __numbertilde_37_currentInterval = __numbertilde_37_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1241259558,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_37_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-393"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_37_currentInterval = __numbertilde_37_currentInterval;
    this->numbertilde_37_lastValue = __numbertilde_37_lastValue;
}

void slide_tilde_07_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
    RNBO_UNUSED(down);
    RNBO_UNUSED(up);
    auto __slide_tilde_07_prev = this->slide_tilde_07_prev;
    auto iup = this->safediv(1., this->maximum(1., rnbo_abs(10)));
    auto idown = this->safediv(1., this->maximum(1., rnbo_abs(10)));
    Index i;

    for (i = 0; i < n; i++) {
        number temp = x[(Index)i] - __slide_tilde_07_prev;
        __slide_tilde_07_prev = __slide_tilde_07_prev + ((x[(Index)i] > __slide_tilde_07_prev ? iup : idown)) * temp;
        out1[(Index)i] = __slide_tilde_07_prev;
    }

    this->slide_tilde_07_prev = __slide_tilde_07_prev;
}

void filtercoeff_05_perform(
    number frequency,
    number gain,
    number q,
    SampleValue * a0,
    SampleValue * a1,
    SampleValue * a2,
    SampleValue * b1,
    SampleValue * b2,
    Index n
) {
    RNBO_UNUSED(gain);
    auto __filtercoeff_05_activeResamp = this->filtercoeff_05_activeResamp;
    auto __filtercoeff_05_resamp_counter = this->filtercoeff_05_resamp_counter;
    auto __filtercoeff_05_K_EPSILON = this->filtercoeff_05_K_EPSILON;

    for (Index i = 0; i < n; i++) {
        number local_q = q;
        number local_gain = 1;

        if (local_gain < 0)
            local_gain = 0;

        number local_frequency = frequency;

        if (local_q < __filtercoeff_05_K_EPSILON)
            local_q = __filtercoeff_05_K_EPSILON;

        local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
        __filtercoeff_05_resamp_counter--;

        if (__filtercoeff_05_resamp_counter <= 0) {
            __filtercoeff_05_resamp_counter = __filtercoeff_05_activeResamp;
            this->filtercoeff_05_updateTerms(local_frequency, local_gain, local_q);
        }

        a0[(Index)i] = this->filtercoeff_05_la0;
        a1[(Index)i] = this->filtercoeff_05_la1;
        a2[(Index)i] = this->filtercoeff_05_la2;
        b1[(Index)i] = this->filtercoeff_05_lb1;
        b2[(Index)i] = this->filtercoeff_05_lb2;
    }

    this->filtercoeff_05_resamp_counter = __filtercoeff_05_resamp_counter;
}

void numbertilde_40_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_40_currentIntervalInSamples = this->numbertilde_40_currentIntervalInSamples;
    auto __numbertilde_40_lastValue = this->numbertilde_40_lastValue;
    auto __numbertilde_40_currentInterval = this->numbertilde_40_currentInterval;
    auto __numbertilde_40_rampInSamples = this->numbertilde_40_rampInSamples;
    auto __numbertilde_40_outValue = this->numbertilde_40_outValue;
    auto __numbertilde_40_currentMode = this->numbertilde_40_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_40_currentMode == 0) {
            output[(Index)i] = this->numbertilde_40_smooth_next(
                __numbertilde_40_outValue,
                __numbertilde_40_rampInSamples,
                __numbertilde_40_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_40_currentInterval -= n;

    if (monitorvalue != __numbertilde_40_lastValue && __numbertilde_40_currentInterval <= 0) {
        __numbertilde_40_currentInterval = __numbertilde_40_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -2112425490,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_40_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-382"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_40_currentInterval = __numbertilde_40_currentInterval;
    this->numbertilde_40_lastValue = __numbertilde_40_lastValue;
}

void numbertilde_41_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_41_currentIntervalInSamples = this->numbertilde_41_currentIntervalInSamples;
    auto __numbertilde_41_lastValue = this->numbertilde_41_lastValue;
    auto __numbertilde_41_currentInterval = this->numbertilde_41_currentInterval;
    auto __numbertilde_41_rampInSamples = this->numbertilde_41_rampInSamples;
    auto __numbertilde_41_outValue = this->numbertilde_41_outValue;
    auto __numbertilde_41_currentMode = this->numbertilde_41_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_41_currentMode == 0) {
            output[(Index)i] = this->numbertilde_41_smooth_next(
                __numbertilde_41_outValue,
                __numbertilde_41_rampInSamples,
                __numbertilde_41_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_41_currentInterval -= n;

    if (monitorvalue != __numbertilde_41_lastValue && __numbertilde_41_currentInterval <= 0) {
        __numbertilde_41_currentInterval = __numbertilde_41_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1480712303,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_41_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-383"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_41_currentInterval = __numbertilde_41_currentInterval;
    this->numbertilde_41_lastValue = __numbertilde_41_lastValue;
}

void numbertilde_43_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_43_currentIntervalInSamples = this->numbertilde_43_currentIntervalInSamples;
    auto __numbertilde_43_lastValue = this->numbertilde_43_lastValue;
    auto __numbertilde_43_currentInterval = this->numbertilde_43_currentInterval;
    auto __numbertilde_43_rampInSamples = this->numbertilde_43_rampInSamples;
    auto __numbertilde_43_outValue = this->numbertilde_43_outValue;
    auto __numbertilde_43_currentMode = this->numbertilde_43_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_43_currentMode == 0) {
            output[(Index)i] = this->numbertilde_43_smooth_next(
                __numbertilde_43_outValue,
                __numbertilde_43_rampInSamples,
                __numbertilde_43_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_43_currentInterval -= n;

    if (monitorvalue != __numbertilde_43_lastValue && __numbertilde_43_currentInterval <= 0) {
        __numbertilde_43_currentInterval = __numbertilde_43_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1943089061,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_43_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-384"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_43_currentInterval = __numbertilde_43_currentInterval;
    this->numbertilde_43_lastValue = __numbertilde_43_lastValue;
}

void numbertilde_44_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_44_currentIntervalInSamples = this->numbertilde_44_currentIntervalInSamples;
    auto __numbertilde_44_lastValue = this->numbertilde_44_lastValue;
    auto __numbertilde_44_currentInterval = this->numbertilde_44_currentInterval;
    auto __numbertilde_44_rampInSamples = this->numbertilde_44_rampInSamples;
    auto __numbertilde_44_outValue = this->numbertilde_44_outValue;
    auto __numbertilde_44_currentMode = this->numbertilde_44_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_44_currentMode == 0) {
            output[(Index)i] = this->numbertilde_44_smooth_next(
                __numbertilde_44_outValue,
                __numbertilde_44_rampInSamples,
                __numbertilde_44_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_44_currentInterval -= n;

    if (monitorvalue != __numbertilde_44_lastValue && __numbertilde_44_currentInterval <= 0) {
        __numbertilde_44_currentInterval = __numbertilde_44_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1410595987,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_44_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-381"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_44_currentInterval = __numbertilde_44_currentInterval;
    this->numbertilde_44_lastValue = __numbertilde_44_lastValue;
}

void numbertilde_45_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_45_currentIntervalInSamples = this->numbertilde_45_currentIntervalInSamples;
    auto __numbertilde_45_lastValue = this->numbertilde_45_lastValue;
    auto __numbertilde_45_currentInterval = this->numbertilde_45_currentInterval;
    auto __numbertilde_45_rampInSamples = this->numbertilde_45_rampInSamples;
    auto __numbertilde_45_outValue = this->numbertilde_45_outValue;
    auto __numbertilde_45_currentMode = this->numbertilde_45_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_45_currentMode == 0) {
            output[(Index)i] = this->numbertilde_45_smooth_next(
                __numbertilde_45_outValue,
                __numbertilde_45_rampInSamples,
                __numbertilde_45_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_45_currentInterval -= n;

    if (monitorvalue != __numbertilde_45_lastValue && __numbertilde_45_currentInterval <= 0) {
        __numbertilde_45_currentInterval = __numbertilde_45_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -708766484,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_45_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-380"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_45_currentInterval = __numbertilde_45_currentInterval;
    this->numbertilde_45_lastValue = __numbertilde_45_lastValue;
}

void linetilde_12_perform(SampleValue * out, Index n) {
    auto __linetilde_12_time = this->linetilde_12_time;
    auto __linetilde_12_keepramp = this->linetilde_12_keepramp;
    auto __linetilde_12_currentValue = this->linetilde_12_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_12_activeRamps->length)) {
        while ((bool)(this->linetilde_12_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_12_activeRamps[0];
            number inc = this->linetilde_12_activeRamps[1];
            number rampTimeInSamples = this->linetilde_12_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_12_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_12_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_12_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -2003561653,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_12_keepramp))) {
                        __linetilde_12_time = 0;
                    }
                }
            }

            __linetilde_12_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_12_currentValue;
        i++;
    }

    this->linetilde_12_currentValue = __linetilde_12_currentValue;
    this->linetilde_12_time = __linetilde_12_time;
}

void dspexpr_58_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void linetilde_13_perform(SampleValue * out, Index n) {
    auto __linetilde_13_time = this->linetilde_13_time;
    auto __linetilde_13_keepramp = this->linetilde_13_keepramp;
    auto __linetilde_13_currentValue = this->linetilde_13_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_13_activeRamps->length)) {
        while ((bool)(this->linetilde_13_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_13_activeRamps[0];
            number inc = this->linetilde_13_activeRamps[1];
            number rampTimeInSamples = this->linetilde_13_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_13_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_13_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_13_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        732284170,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_13_keepramp))) {
                        __linetilde_13_time = 0;
                    }
                }
            }

            __linetilde_13_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_13_currentValue;
        i++;
    }

    this->linetilde_13_currentValue = __linetilde_13_currentValue;
    this->linetilde_13_time = __linetilde_13_time;
}

void dspexpr_62_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_61_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void linetilde_14_perform(SampleValue * out, Index n) {
    auto __linetilde_14_time = this->linetilde_14_time;
    auto __linetilde_14_keepramp = this->linetilde_14_keepramp;
    auto __linetilde_14_currentValue = this->linetilde_14_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_14_activeRamps->length)) {
        while ((bool)(this->linetilde_14_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_14_activeRamps[0];
            number inc = this->linetilde_14_activeRamps[1];
            number rampTimeInSamples = this->linetilde_14_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_14_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_14_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_14_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -444440180,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_14_keepramp))) {
                        __linetilde_14_time = 0;
                    }
                }
            }

            __linetilde_14_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_14_currentValue;
        i++;
    }

    this->linetilde_14_currentValue = __linetilde_14_currentValue;
    this->linetilde_14_time = __linetilde_14_time;
}

void linetilde_15_perform(SampleValue * out, Index n) {
    auto __linetilde_15_time = this->linetilde_15_time;
    auto __linetilde_15_keepramp = this->linetilde_15_keepramp;
    auto __linetilde_15_currentValue = this->linetilde_15_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_15_activeRamps->length)) {
        while ((bool)(this->linetilde_15_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_15_activeRamps[0];
            number inc = this->linetilde_15_activeRamps[1];
            number rampTimeInSamples = this->linetilde_15_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_15_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_15_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_15_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1909008520,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_15_keepramp))) {
                        __linetilde_15_time = 0;
                    }
                }
            }

            __linetilde_15_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_15_currentValue;
        i++;
    }

    this->linetilde_15_currentValue = __linetilde_15_currentValue;
    this->linetilde_15_time = __linetilde_15_time;
}

void dspexpr_64_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void scale_tilde_08_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    const Sample * highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - -1);
    Index i;

    for (i = 0; i < n; i++) {
        number outdiff = highout[(Index)i] - 0;
        number value = (x[(Index)i] - -1) * inscale;
        value = value * outdiff + 0;
        out1[(Index)i] = value;
    }
}

void linetilde_16_perform(SampleValue * out, Index n) {
    auto __linetilde_16_time = this->linetilde_16_time;
    auto __linetilde_16_keepramp = this->linetilde_16_keepramp;
    auto __linetilde_16_currentValue = this->linetilde_16_currentValue;
    Index i = 0;

    if ((bool)(this->linetilde_16_activeRamps->length)) {
        while ((bool)(this->linetilde_16_activeRamps->length) && i < n) {
            number destinationValue = this->linetilde_16_activeRamps[0];
            number inc = this->linetilde_16_activeRamps[1];
            number rampTimeInSamples = this->linetilde_16_activeRamps[2] - this->audioProcessSampleCount - i;
            number val = __linetilde_16_currentValue;

            while (rampTimeInSamples > 0 && i < n) {
                out[(Index)i] = val;
                val += inc;
                i++;
                rampTimeInSamples--;
            }

            if (rampTimeInSamples <= 0) {
                val = destinationValue;
                this->linetilde_16_activeRamps->splice(0, 3);

                if ((bool)(!(bool)(this->linetilde_16_activeRamps->length))) {
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -826837303,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        0
                    );;

                    if ((bool)(!(bool)(__linetilde_16_keepramp))) {
                        __linetilde_16_time = 0;
                    }
                }
            }

            __linetilde_16_currentValue = val;
        }
    }

    while (i < n) {
        out[(Index)i] = __linetilde_16_currentValue;
        i++;
    }

    this->linetilde_16_currentValue = __linetilde_16_currentValue;
    this->linetilde_16_time = __linetilde_16_time;
}

void dspexpr_65_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_63_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_60_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_59_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void numbertilde_42_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_42_currentIntervalInSamples = this->numbertilde_42_currentIntervalInSamples;
    auto __numbertilde_42_lastValue = this->numbertilde_42_lastValue;
    auto __numbertilde_42_currentInterval = this->numbertilde_42_currentInterval;
    auto __numbertilde_42_rampInSamples = this->numbertilde_42_rampInSamples;
    auto __numbertilde_42_outValue = this->numbertilde_42_outValue;
    auto __numbertilde_42_currentMode = this->numbertilde_42_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_42_currentMode == 0) {
            output[(Index)i] = this->numbertilde_42_smooth_next(
                __numbertilde_42_outValue,
                __numbertilde_42_rampInSamples,
                __numbertilde_42_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_42_currentInterval -= n;

    if (monitorvalue != __numbertilde_42_lastValue && __numbertilde_42_currentInterval <= 0) {
        __numbertilde_42_currentInterval = __numbertilde_42_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1721520921,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_42_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-450"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_42_currentInterval = __numbertilde_42_currentInterval;
    this->numbertilde_42_lastValue = __numbertilde_42_lastValue;
}

void ip_07_perform(SampleValue * out, Index n) {
    auto __ip_07_lastValue = this->ip_07_lastValue;
    auto __ip_07_lastIndex = this->ip_07_lastIndex;

    for (Index i = 0; i < n; i++) {
        out[(Index)i] = ((SampleIndex)(i) >= __ip_07_lastIndex ? __ip_07_lastValue : this->ip_07_sigbuf[(Index)i]);
    }

    __ip_07_lastIndex = 0;
    this->ip_07_lastIndex = __ip_07_lastIndex;
}

void selector_04_perform(
    number onoff,
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        if (onoff >= 1 && onoff < 2)
            out[(Index)i] = in1[(Index)i];
        else if (onoff >= 2 && onoff < 3)
            out[(Index)i] = in2[(Index)i];
        else
            out[(Index)i] = 0;
    }
}

void scale_tilde_07_perform(
    const Sample * x,
    number lowin,
    number hiin,
    number lowout,
    number highout,
    number pow,
    SampleValue * out1,
    Index n
) {
    RNBO_UNUSED(pow);
    RNBO_UNUSED(highout);
    RNBO_UNUSED(lowout);
    RNBO_UNUSED(hiin);
    RNBO_UNUSED(lowin);
    auto inscale = this->safediv(1., 1 - 0);
    number outdiff = 2.34 - 1;
    Index i;

    for (i = 0; i < n; i++) {
        number value = (x[(Index)i] - 0) * inscale;
        value = value * outdiff + 1;
        out1[(Index)i] = value;
    }
}

void numbertilde_39_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_39_currentIntervalInSamples = this->numbertilde_39_currentIntervalInSamples;
    auto __numbertilde_39_lastValue = this->numbertilde_39_lastValue;
    auto __numbertilde_39_currentInterval = this->numbertilde_39_currentInterval;
    auto __numbertilde_39_rampInSamples = this->numbertilde_39_rampInSamples;
    auto __numbertilde_39_outValue = this->numbertilde_39_outValue;
    auto __numbertilde_39_currentMode = this->numbertilde_39_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_39_currentMode == 0) {
            output[(Index)i] = this->numbertilde_39_smooth_next(
                __numbertilde_39_outValue,
                __numbertilde_39_rampInSamples,
                __numbertilde_39_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_39_currentInterval -= n;

    if (monitorvalue != __numbertilde_39_lastValue && __numbertilde_39_currentInterval <= 0) {
        __numbertilde_39_currentInterval = __numbertilde_39_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            694892522,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_39_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-359"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_39_currentInterval = __numbertilde_39_currentInterval;
    this->numbertilde_39_lastValue = __numbertilde_39_lastValue;
}

void filtercoeff_06_perform(
    number frequency,
    number gain,
    number q,
    SampleValue * a0,
    SampleValue * a1,
    SampleValue * a2,
    SampleValue * b1,
    SampleValue * b2,
    Index n
) {
    RNBO_UNUSED(gain);
    auto __filtercoeff_06_activeResamp = this->filtercoeff_06_activeResamp;
    auto __filtercoeff_06_resamp_counter = this->filtercoeff_06_resamp_counter;
    auto __filtercoeff_06_K_EPSILON = this->filtercoeff_06_K_EPSILON;

    for (Index i = 0; i < n; i++) {
        number local_q = q;
        number local_gain = 1;

        if (local_gain < 0)
            local_gain = 0;

        number local_frequency = frequency;

        if (local_q < __filtercoeff_06_K_EPSILON)
            local_q = __filtercoeff_06_K_EPSILON;

        local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
        __filtercoeff_06_resamp_counter--;

        if (__filtercoeff_06_resamp_counter <= 0) {
            __filtercoeff_06_resamp_counter = __filtercoeff_06_activeResamp;
            this->filtercoeff_06_updateTerms(local_frequency, local_gain, local_q);
        }

        a0[(Index)i] = this->filtercoeff_06_la0;
        a1[(Index)i] = this->filtercoeff_06_la1;
        a2[(Index)i] = this->filtercoeff_06_la2;
        b1[(Index)i] = this->filtercoeff_06_lb1;
        b2[(Index)i] = this->filtercoeff_06_lb2;
    }

    this->filtercoeff_06_resamp_counter = __filtercoeff_06_resamp_counter;
}

void numbertilde_46_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_46_currentIntervalInSamples = this->numbertilde_46_currentIntervalInSamples;
    auto __numbertilde_46_lastValue = this->numbertilde_46_lastValue;
    auto __numbertilde_46_currentInterval = this->numbertilde_46_currentInterval;
    auto __numbertilde_46_rampInSamples = this->numbertilde_46_rampInSamples;
    auto __numbertilde_46_outValue = this->numbertilde_46_outValue;
    auto __numbertilde_46_currentMode = this->numbertilde_46_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_46_currentMode == 0) {
            output[(Index)i] = this->numbertilde_46_smooth_next(
                __numbertilde_46_outValue,
                __numbertilde_46_rampInSamples,
                __numbertilde_46_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_46_currentInterval -= n;

    if (monitorvalue != __numbertilde_46_lastValue && __numbertilde_46_currentInterval <= 0) {
        __numbertilde_46_currentInterval = __numbertilde_46_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -864228951,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_46_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-408"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_46_currentInterval = __numbertilde_46_currentInterval;
    this->numbertilde_46_lastValue = __numbertilde_46_lastValue;
}

void numbertilde_49_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_49_currentIntervalInSamples = this->numbertilde_49_currentIntervalInSamples;
    auto __numbertilde_49_lastValue = this->numbertilde_49_lastValue;
    auto __numbertilde_49_currentInterval = this->numbertilde_49_currentInterval;
    auto __numbertilde_49_rampInSamples = this->numbertilde_49_rampInSamples;
    auto __numbertilde_49_outValue = this->numbertilde_49_outValue;
    auto __numbertilde_49_currentMode = this->numbertilde_49_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_49_currentMode == 0) {
            output[(Index)i] = this->numbertilde_49_smooth_next(
                __numbertilde_49_outValue,
                __numbertilde_49_rampInSamples,
                __numbertilde_49_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_49_currentInterval -= n;

    if (monitorvalue != __numbertilde_49_lastValue && __numbertilde_49_currentInterval <= 0) {
        __numbertilde_49_currentInterval = __numbertilde_49_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1566058454,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_49_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-409"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_49_currentInterval = __numbertilde_49_currentInterval;
    this->numbertilde_49_lastValue = __numbertilde_49_lastValue;
}

void numbertilde_51_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_51_currentIntervalInSamples = this->numbertilde_51_currentIntervalInSamples;
    auto __numbertilde_51_lastValue = this->numbertilde_51_lastValue;
    auto __numbertilde_51_currentInterval = this->numbertilde_51_currentInterval;
    auto __numbertilde_51_rampInSamples = this->numbertilde_51_rampInSamples;
    auto __numbertilde_51_outValue = this->numbertilde_51_outValue;
    auto __numbertilde_51_currentMode = this->numbertilde_51_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_51_currentMode == 0) {
            output[(Index)i] = this->numbertilde_51_smooth_next(
                __numbertilde_51_outValue,
                __numbertilde_51_rampInSamples,
                __numbertilde_51_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_51_currentInterval -= n;

    if (monitorvalue != __numbertilde_51_lastValue && __numbertilde_51_currentInterval <= 0) {
        __numbertilde_51_currentInterval = __numbertilde_51_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            2027079339,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_51_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-415"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_51_currentInterval = __numbertilde_51_currentInterval;
    this->numbertilde_51_lastValue = __numbertilde_51_lastValue;
}

void numbertilde_53_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_53_currentIntervalInSamples = this->numbertilde_53_currentIntervalInSamples;
    auto __numbertilde_53_lastValue = this->numbertilde_53_lastValue;
    auto __numbertilde_53_currentInterval = this->numbertilde_53_currentInterval;
    auto __numbertilde_53_rampInSamples = this->numbertilde_53_rampInSamples;
    auto __numbertilde_53_outValue = this->numbertilde_53_outValue;
    auto __numbertilde_53_currentMode = this->numbertilde_53_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_53_currentMode == 0) {
            output[(Index)i] = this->numbertilde_53_smooth_next(
                __numbertilde_53_outValue,
                __numbertilde_53_rampInSamples,
                __numbertilde_53_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_53_currentInterval -= n;

    if (monitorvalue != __numbertilde_53_lastValue && __numbertilde_53_currentInterval <= 0) {
        __numbertilde_53_currentInterval = __numbertilde_53_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -162399448,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_53_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-407"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_53_currentInterval = __numbertilde_53_currentInterval;
    this->numbertilde_53_lastValue = __numbertilde_53_lastValue;
}

void numbertilde_55_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_55_currentIntervalInSamples = this->numbertilde_55_currentIntervalInSamples;
    auto __numbertilde_55_lastValue = this->numbertilde_55_lastValue;
    auto __numbertilde_55_currentInterval = this->numbertilde_55_currentInterval;
    auto __numbertilde_55_rampInSamples = this->numbertilde_55_rampInSamples;
    auto __numbertilde_55_outValue = this->numbertilde_55_outValue;
    auto __numbertilde_55_currentMode = this->numbertilde_55_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_55_currentMode == 0) {
            output[(Index)i] = this->numbertilde_55_smooth_next(
                __numbertilde_55_outValue,
                __numbertilde_55_rampInSamples,
                __numbertilde_55_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_55_currentInterval -= n;

    if (monitorvalue != __numbertilde_55_lastValue && __numbertilde_55_currentInterval <= 0) {
        __numbertilde_55_currentInterval = __numbertilde_55_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            539430055,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_55_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-406"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_55_currentInterval = __numbertilde_55_currentInterval;
    this->numbertilde_55_lastValue = __numbertilde_55_lastValue;
}

void filtercoeff_07_perform(
    number frequency,
    number gain,
    number q,
    SampleValue * a0,
    SampleValue * a1,
    SampleValue * a2,
    SampleValue * b1,
    SampleValue * b2,
    Index n
) {
    RNBO_UNUSED(gain);
    auto __filtercoeff_07_activeResamp = this->filtercoeff_07_activeResamp;
    auto __filtercoeff_07_resamp_counter = this->filtercoeff_07_resamp_counter;
    auto __filtercoeff_07_K_EPSILON = this->filtercoeff_07_K_EPSILON;

    for (Index i = 0; i < n; i++) {
        number local_q = q;
        number local_gain = 1;

        if (local_gain < 0)
            local_gain = 0;

        number local_frequency = frequency;

        if (local_q < __filtercoeff_07_K_EPSILON)
            local_q = __filtercoeff_07_K_EPSILON;

        local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
        __filtercoeff_07_resamp_counter--;

        if (__filtercoeff_07_resamp_counter <= 0) {
            __filtercoeff_07_resamp_counter = __filtercoeff_07_activeResamp;
            this->filtercoeff_07_updateTerms(local_frequency, local_gain, local_q);
        }

        a0[(Index)i] = this->filtercoeff_07_la0;
        a1[(Index)i] = this->filtercoeff_07_la1;
        a2[(Index)i] = this->filtercoeff_07_la2;
        b1[(Index)i] = this->filtercoeff_07_lb1;
        b2[(Index)i] = this->filtercoeff_07_lb2;
    }

    this->filtercoeff_07_resamp_counter = __filtercoeff_07_resamp_counter;
}

void biquad_tilde_05_perform(
    const Sample * x,
    const Sample * a0,
    const Sample * a1,
    const Sample * a2,
    const Sample * b1,
    const Sample * b2,
    SampleValue * out1,
    Index n
) {
    auto __biquad_tilde_05_y2 = this->biquad_tilde_05_y2;
    auto __biquad_tilde_05_y1 = this->biquad_tilde_05_y1;
    auto __biquad_tilde_05_x2 = this->biquad_tilde_05_x2;
    auto __biquad_tilde_05_x1 = this->biquad_tilde_05_x1;
    Index i;

    for (i = 0; i < n; i++) {
        number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_05_x1 * a1[(Index)i] + __biquad_tilde_05_x2 * a2[(Index)i] - (__biquad_tilde_05_y1 * b1[(Index)i] + __biquad_tilde_05_y2 * b2[(Index)i]);
        __biquad_tilde_05_x2 = __biquad_tilde_05_x1;
        __biquad_tilde_05_x1 = x[(Index)i];
        __biquad_tilde_05_y2 = __biquad_tilde_05_y1;
        __biquad_tilde_05_y1 = tmp;
        out1[(Index)i] = tmp;
    }

    this->biquad_tilde_05_x1 = __biquad_tilde_05_x1;
    this->biquad_tilde_05_x2 = __biquad_tilde_05_x2;
    this->biquad_tilde_05_y1 = __biquad_tilde_05_y1;
    this->biquad_tilde_05_y2 = __biquad_tilde_05_y2;
}

void biquad_tilde_04_perform(
    const Sample * x,
    const Sample * a0,
    const Sample * a1,
    const Sample * a2,
    const Sample * b1,
    const Sample * b2,
    SampleValue * out1,
    Index n
) {
    auto __biquad_tilde_04_y2 = this->biquad_tilde_04_y2;
    auto __biquad_tilde_04_y1 = this->biquad_tilde_04_y1;
    auto __biquad_tilde_04_x2 = this->biquad_tilde_04_x2;
    auto __biquad_tilde_04_x1 = this->biquad_tilde_04_x1;
    Index i;

    for (i = 0; i < n; i++) {
        number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_04_x1 * a1[(Index)i] + __biquad_tilde_04_x2 * a2[(Index)i] - (__biquad_tilde_04_y1 * b1[(Index)i] + __biquad_tilde_04_y2 * b2[(Index)i]);
        __biquad_tilde_04_x2 = __biquad_tilde_04_x1;
        __biquad_tilde_04_x1 = x[(Index)i];
        __biquad_tilde_04_y2 = __biquad_tilde_04_y1;
        __biquad_tilde_04_y1 = tmp;
        out1[(Index)i] = tmp;
    }

    this->biquad_tilde_04_x1 = __biquad_tilde_04_x1;
    this->biquad_tilde_04_x2 = __biquad_tilde_04_x2;
    this->biquad_tilde_04_y1 = __biquad_tilde_04_y1;
    this->biquad_tilde_04_y2 = __biquad_tilde_04_y2;
}

void gen_07_perform(
    const Sample * in1,
    const Sample * in2,
    number in3,
    const Sample * in4,
    const Sample * in5,
    const Sample * in6,
    const Sample * in7,
    const Sample * in8,
    const Sample * in9,
    SampleValue * out1,
    Index n
) {
    auto __gen_07_history_5_value = this->gen_07_history_5_value;
    auto __gen_07_history_3_value = this->gen_07_history_3_value;
    auto __gen_07_history_2_value = this->gen_07_history_2_value;
    auto __gen_07_history_4_value = this->gen_07_history_4_value;
    number clamp_10_4 = (in3 > 0.99 ? 0.99 : (in3 < -0.99 ? -0.99 : in3));
    Index i;

    for (i = 0; i < n; i++) {
        number mul_6_0 = __gen_07_history_4_value * in5[(Index)i];
        number mul_7_1 = __gen_07_history_2_value * in6[(Index)i];
        number mul_8_2 = __gen_07_history_3_value * in8[(Index)i];
        number mul_9_3 = __gen_07_history_5_value * in7[(Index)i];
        auto mstosamps_11_5 = this->mstosamps(in2[(Index)i]);
        number slide_12_7 = this->gen_07_slide_6_next(mstosamps_11_5, 5000, 100);
        number tap_13_8 = this->gen_07_delay_1_read(slide_12_7, 0);
        out1[(Index)i] = tap_13_8;
        number mul_14_9 = tap_13_8 * in4[(Index)i];
        number sub_15_10 = mul_7_1 + mul_6_0 + mul_14_9 - (mul_9_3 + mul_8_2);
        number slide_16_12 = this->gen_07_slide_11_next(in9[(Index)i], 5000, 100);
        number mix_17_13 = tap_13_8 + slide_16_12 * (sub_15_10 - tap_13_8);
        number mul_18_14 = mix_17_13 * clamp_10_4;
        number history_2_next_19_15 = fixdenorm(__gen_07_history_4_value);
        number history_3_next_20_16 = fixdenorm(__gen_07_history_5_value);
        number history_4_next_21_17 = fixdenorm(tap_13_8);
        number history_5_next_22_18 = fixdenorm(sub_15_10);
        this->gen_07_delay_1_write(in1[(Index)i] + mul_18_14);
        __gen_07_history_5_value = history_5_next_22_18;
        __gen_07_history_4_value = history_4_next_21_17;
        __gen_07_history_3_value = history_3_next_20_16;
        __gen_07_history_2_value = history_2_next_19_15;
        this->gen_07_delay_1_step();
    }

    this->gen_07_history_4_value = __gen_07_history_4_value;
    this->gen_07_history_2_value = __gen_07_history_2_value;
    this->gen_07_history_3_value = __gen_07_history_3_value;
    this->gen_07_history_5_value = __gen_07_history_5_value;
}

void dspexpr_55_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_54_perform(const Sample * in1, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = rnbo_atan(in1[(Index)i]);//#map:_###_obj_###_:1
    }
}

void dspexpr_48_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void p_02_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: Volume&Clip~
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<2> outs = {out1, out2};
    this->p_02->process(ins, 2, outs, 2, n);
}

void dspexpr_29_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_27_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_26_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void selector_01_perform(
    number onoff,
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        if (onoff >= 1 && onoff < 2)
            out[(Index)i] = in1[(Index)i];
        else if (onoff >= 2 && onoff < 3)
            out[(Index)i] = in2[(Index)i];
        else
            out[(Index)i] = 0;
    }
}

void dspexpr_32_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_31_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void dspexpr_30_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void selector_02_perform(
    number onoff,
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        if (onoff >= 1 && onoff < 2)
            out[(Index)i] = in1[(Index)i];
        else if (onoff >= 2 && onoff < 3)
            out[(Index)i] = in2[(Index)i];
        else
            out[(Index)i] = 0;
    }
}

void scopetilde_07_perform(const SampleValue * x, const SampleValue * y, Index n) {
    auto __scopetilde_07_ysign = this->scopetilde_07_ysign;
    auto __scopetilde_07_ymonitorvalue = this->scopetilde_07_ymonitorvalue;
    auto __scopetilde_07_xsign = this->scopetilde_07_xsign;
    auto __scopetilde_07_xmonitorvalue = this->scopetilde_07_xmonitorvalue;
    auto __scopetilde_07_mode = this->scopetilde_07_mode;

    for (Index i = 0; i < n; i++) {
        number xval = x[(Index)i];
        number yval = y[(Index)i];

        if (__scopetilde_07_mode == 1) {
            number xabsval = rnbo_abs(xval);

            if (xabsval > __scopetilde_07_xmonitorvalue) {
                __scopetilde_07_xmonitorvalue = xabsval;
                __scopetilde_07_xsign = (xval < 0 ? -1 : 1);
            }

            number yabsval = rnbo_abs(yval);

            if (yabsval > __scopetilde_07_ymonitorvalue) {
                __scopetilde_07_ymonitorvalue = yabsval;
                __scopetilde_07_ysign = (yval < 0 ? -1 : 1);
            }
        } else {
            __scopetilde_07_xmonitorvalue = xval;
            __scopetilde_07_xsign = 1;
            __scopetilde_07_ymonitorvalue = yval;
            __scopetilde_07_ysign = 1;
        }

        this->scopetilde_07_effectiveCount--;

        if (this->scopetilde_07_effectiveCount <= 0) {
            this->scopetilde_07_updateEffectiveCount();
            this->scopetilde_07_monitorbuffer->push(__scopetilde_07_xmonitorvalue * __scopetilde_07_xsign);

            if (__scopetilde_07_mode == 1)
                __scopetilde_07_xmonitorvalue = 0;

            if (this->scopetilde_07_monitorbuffer->length >= 128 * (1 + 0)) {
                this->getEngine()->sendListMessage(
                    TAG("monitor"),
                    TAG("scope~_obj-211"),
                    this->scopetilde_07_monitorbuffer,
                    this->_currentTime
                );;

                this->scopetilde_07_monitorbuffer->length = 0;
            }
        }
    }

    this->scopetilde_07_xmonitorvalue = __scopetilde_07_xmonitorvalue;
    this->scopetilde_07_xsign = __scopetilde_07_xsign;
    this->scopetilde_07_ymonitorvalue = __scopetilde_07_ymonitorvalue;
    this->scopetilde_07_ysign = __scopetilde_07_ysign;
}

void numbertilde_47_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_47_currentIntervalInSamples = this->numbertilde_47_currentIntervalInSamples;
    auto __numbertilde_47_lastValue = this->numbertilde_47_lastValue;
    auto __numbertilde_47_currentInterval = this->numbertilde_47_currentInterval;
    auto __numbertilde_47_rampInSamples = this->numbertilde_47_rampInSamples;
    auto __numbertilde_47_outValue = this->numbertilde_47_outValue;
    auto __numbertilde_47_currentMode = this->numbertilde_47_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_47_currentMode == 0) {
            output[(Index)i] = this->numbertilde_47_smooth_next(
                __numbertilde_47_outValue,
                __numbertilde_47_rampInSamples,
                __numbertilde_47_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_47_currentInterval -= n;

    if (monitorvalue != __numbertilde_47_lastValue && __numbertilde_47_currentInterval <= 0) {
        __numbertilde_47_currentInterval = __numbertilde_47_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -78409170,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_47_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-426"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_47_currentInterval = __numbertilde_47_currentInterval;
    this->numbertilde_47_lastValue = __numbertilde_47_lastValue;
}

void numbertilde_50_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_50_currentIntervalInSamples = this->numbertilde_50_currentIntervalInSamples;
    auto __numbertilde_50_lastValue = this->numbertilde_50_lastValue;
    auto __numbertilde_50_currentInterval = this->numbertilde_50_currentInterval;
    auto __numbertilde_50_rampInSamples = this->numbertilde_50_rampInSamples;
    auto __numbertilde_50_outValue = this->numbertilde_50_outValue;
    auto __numbertilde_50_currentMode = this->numbertilde_50_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_50_currentMode == 0) {
            output[(Index)i] = this->numbertilde_50_smooth_next(
                __numbertilde_50_outValue,
                __numbertilde_50_rampInSamples,
                __numbertilde_50_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_50_currentInterval -= n;

    if (monitorvalue != __numbertilde_50_lastValue && __numbertilde_50_currentInterval <= 0) {
        __numbertilde_50_currentInterval = __numbertilde_50_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            383967588,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_50_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-427"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_50_currentInterval = __numbertilde_50_currentInterval;
    this->numbertilde_50_lastValue = __numbertilde_50_lastValue;
}

void numbertilde_52_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_52_currentIntervalInSamples = this->numbertilde_52_currentIntervalInSamples;
    auto __numbertilde_52_lastValue = this->numbertilde_52_lastValue;
    auto __numbertilde_52_currentInterval = this->numbertilde_52_currentInterval;
    auto __numbertilde_52_rampInSamples = this->numbertilde_52_rampInSamples;
    auto __numbertilde_52_outValue = this->numbertilde_52_outValue;
    auto __numbertilde_52_currentMode = this->numbertilde_52_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_52_currentMode == 0) {
            output[(Index)i] = this->numbertilde_52_smooth_next(
                __numbertilde_52_outValue,
                __numbertilde_52_rampInSamples,
                __numbertilde_52_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_52_currentInterval -= n;

    if (monitorvalue != __numbertilde_52_lastValue && __numbertilde_52_currentInterval <= 0) {
        __numbertilde_52_currentInterval = __numbertilde_52_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -317861915,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_52_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-433"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_52_currentInterval = __numbertilde_52_currentInterval;
    this->numbertilde_52_lastValue = __numbertilde_52_lastValue;
}

void numbertilde_54_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_54_currentIntervalInSamples = this->numbertilde_54_currentIntervalInSamples;
    auto __numbertilde_54_lastValue = this->numbertilde_54_lastValue;
    auto __numbertilde_54_currentInterval = this->numbertilde_54_currentInterval;
    auto __numbertilde_54_rampInSamples = this->numbertilde_54_rampInSamples;
    auto __numbertilde_54_outValue = this->numbertilde_54_outValue;
    auto __numbertilde_54_currentMode = this->numbertilde_54_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_54_currentMode == 0) {
            output[(Index)i] = this->numbertilde_54_smooth_next(
                __numbertilde_54_outValue,
                __numbertilde_54_rampInSamples,
                __numbertilde_54_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_54_currentInterval -= n;

    if (monitorvalue != __numbertilde_54_lastValue && __numbertilde_54_currentInterval <= 0) {
        __numbertilde_54_currentInterval = __numbertilde_54_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            623420333,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_54_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-425"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_54_currentInterval = __numbertilde_54_currentInterval;
    this->numbertilde_54_lastValue = __numbertilde_54_lastValue;
}

void numbertilde_56_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_56_currentIntervalInSamples = this->numbertilde_56_currentIntervalInSamples;
    auto __numbertilde_56_lastValue = this->numbertilde_56_lastValue;
    auto __numbertilde_56_currentInterval = this->numbertilde_56_currentInterval;
    auto __numbertilde_56_rampInSamples = this->numbertilde_56_rampInSamples;
    auto __numbertilde_56_outValue = this->numbertilde_56_outValue;
    auto __numbertilde_56_currentMode = this->numbertilde_56_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_56_currentMode == 0) {
            output[(Index)i] = this->numbertilde_56_smooth_next(
                __numbertilde_56_outValue,
                __numbertilde_56_rampInSamples,
                __numbertilde_56_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_56_currentInterval -= n;

    if (monitorvalue != __numbertilde_56_lastValue && __numbertilde_56_currentInterval <= 0) {
        __numbertilde_56_currentInterval = __numbertilde_56_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            1325249836,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_56_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-424"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_56_currentInterval = __numbertilde_56_currentInterval;
    this->numbertilde_56_lastValue = __numbertilde_56_lastValue;
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void limi_03_lookahead_setter(number v) {
    this->limi_03_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
    this->limi_03_lookaheadInv = (number)1 / this->limi_03_lookahead;
}

void limi_03_preamp_setter(number v) {
    this->limi_03_preamp = rnbo_pow(10., v * 0.05);
}

void limi_03_postamp_setter(number v) {
    this->limi_03_postamp = rnbo_pow(10., v * 0.05);
}

void limi_03_threshold_setter(number v) {
    this->limi_03_threshold = rnbo_pow(10., v * 0.05);
}

void numberobj_12_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_12_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_12_value = localvalue;
}

void numberobj_13_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_13_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_13_value = localvalue;
}

void numberobj_14_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_14_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_14_value = localvalue;
}

void limi_04_lookahead_setter(number v) {
    this->limi_04_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
    this->limi_04_lookaheadInv = (number)1 / this->limi_04_lookahead;
}

void limi_04_preamp_setter(number v) {
    this->limi_04_preamp = rnbo_pow(10., v * 0.05);
}

void limi_04_postamp_setter(number v) {
    this->limi_04_postamp = rnbo_pow(10., v * 0.05);
}

void limi_04_threshold_setter(number v) {
    this->limi_04_threshold = rnbo_pow(10., v * 0.05);
}

void toggle_01_value_number_setter(number v) {
    this->toggle_01_value_number = (v != 0 ? 1 : 0);
}

void numberobj_15_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_15_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_15_value = localvalue;
}

void numberobj_16_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_16_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_16_value = localvalue;
}

void numberobj_17_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_17_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_17_value = localvalue;
}

void numberobj_18_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_18_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_18_value = localvalue;
}

void numberobj_19_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_19_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_19_value = localvalue;
}

void numberobj_20_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_20_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_20_value = localvalue;
}

void numberobj_21_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_21_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_21_value = localvalue;
}

void numberobj_22_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_22_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_22_value = localvalue;
}

void toggle_02_value_number_setter(number v) {
    this->toggle_02_value_number = (v != 0 ? 1 : 0);
}

void numberobj_23_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_23_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_23_value = localvalue;
}

void numberobj_24_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_24_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_24_value = localvalue;
}

void numberobj_25_value_setter(number v) {
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 100) {
        localvalue = 100;
    }

    if (this->numberobj_25_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_25_value = localvalue;
}

void numberobj_26_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_26_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_26_value = localvalue;
}

void numberobj_27_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_27_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_27_value = localvalue;
}

void numberobj_28_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_28_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_28_value = localvalue;
}

void numberobj_29_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_29_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_29_value = localvalue;
}

void numberobj_30_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_30_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_30_value = localvalue;
}

void numberobj_31_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_31_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_31_value = localvalue;
}

void toggle_03_value_number_setter(number v) {
    this->toggle_03_value_number = (v != 0 ? 1 : 0);
}

void numberobj_32_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_32_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_32_value = localvalue;
}

void numberobj_33_value_setter(number v) {
    number localvalue = v;

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_33_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_33_value = localvalue;
}

void numberobj_34_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_34_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_34_value = localvalue;
}

void numberobj_35_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_35_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_35_value = localvalue;
}

void numberobj_36_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_36_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_36_value = localvalue;
}

void metro_01_interval_setter(number v) {
    this->metro_01_interval = (v > 0 ? v : 0);
}

void numberobj_37_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_37_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_37_value = localvalue;
}

void numberobj_38_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_38_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_38_value = localvalue;
}

void numberobj_39_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_39_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_39_value = localvalue;
}

void numberobj_40_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_40_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_40_value = localvalue;
}

void numberobj_41_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_41_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_41_value = localvalue;
}

void numberobj_42_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_42_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_42_value = localvalue;
}

void numberobj_43_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_43_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_43_value = localvalue;
}

void numberobj_44_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_44_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_44_value = localvalue;
}

void numberobj_45_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_45_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_45_value = localvalue;
}

void numberobj_46_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_46_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_46_value = localvalue;
}

void numberobj_47_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_47_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_47_value = localvalue;
}

void numberobj_48_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_48_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_48_value = localvalue;
}

void toggle_04_value_number_setter(number v) {
    this->toggle_04_value_number = (v != 0 ? 1 : 0);
}

void numberobj_49_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_49_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_49_value = localvalue;
}

void numberobj_50_value_setter(number v) {
    number localvalue = v;

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_50_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_50_value = localvalue;
}

void param_01_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_01_value;
}

void param_01_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_01_value_set(preset["value"]);
}

number limi_03_dc1_next(number x, number gain) {
    number y = x - this->limi_03_dc1_xm1 + this->limi_03_dc1_ym1 * gain;
    this->limi_03_dc1_xm1 = x;
    this->limi_03_dc1_ym1 = y;
    return y;
}

void limi_03_dc1_reset() {
    this->limi_03_dc1_xm1 = 0;
    this->limi_03_dc1_ym1 = 0;
}

void limi_03_dc1_dspsetup() {
    this->limi_03_dc1_reset();
}

number limi_03_dc_next(Index i, number x, number gain) {
    switch ((int)i) {
    default:
        {
        return this->limi_03_dc1_next(x, gain);
        }
    }

    return 0;
}

void limi_03_dc_reset(Index i) {
    switch ((int)i) {
    default:
        {
        return this->limi_03_dc1_reset();
        }
    }
}

void limi_03_dc_dspsetup(Index i) {
    switch ((int)i) {
    default:
        {
        return this->limi_03_dc1_dspsetup();
        }
    }
}

void limi_03_reset() {
    this->limi_03_recover = (number)1000 / (this->limi_03_release * this->samplerate());

    {
        this->limi_03_recover *= 0.707;
    }
}

void limi_03_dspsetup(bool force) {
    if ((bool)(this->limi_03_setupDone) && (bool)(!(bool)(force)))
        return;

    this->limi_03_reset();
    this->limi_03_setupDone = true;
    this->limi_03_dc1_dspsetup();
}

void message_09_init() {
    this->message_09_set_set({0});
}

void numberobj_12_init() {
    this->numberobj_12_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-190"), 1, this->_currentTime);
}

void numberobj_12_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_12_value;
}

void numberobj_12_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_12_value_set(preset["value"]);
}

void numberobj_13_init() {
    this->numberobj_13_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-252"), 1, this->_currentTime);
}

void numberobj_13_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_13_value;
}

void numberobj_13_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_13_value_set(preset["value"]);
}

void numberobj_14_init() {
    this->numberobj_14_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-238"), 1, this->_currentTime);
}

void numberobj_14_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_14_value;
}

void numberobj_14_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_14_value_set(preset["value"]);
}

number limi_04_dc1_next(number x, number gain) {
    number y = x - this->limi_04_dc1_xm1 + this->limi_04_dc1_ym1 * gain;
    this->limi_04_dc1_xm1 = x;
    this->limi_04_dc1_ym1 = y;
    return y;
}

void limi_04_dc1_reset() {
    this->limi_04_dc1_xm1 = 0;
    this->limi_04_dc1_ym1 = 0;
}

void limi_04_dc1_dspsetup() {
    this->limi_04_dc1_reset();
}

number limi_04_dc_next(Index i, number x, number gain) {
    switch ((int)i) {
    default:
        {
        return this->limi_04_dc1_next(x, gain);
        }
    }

    return 0;
}

void limi_04_dc_reset(Index i) {
    switch ((int)i) {
    default:
        {
        return this->limi_04_dc1_reset();
        }
    }
}

void limi_04_dc_dspsetup(Index i) {
    switch ((int)i) {
    default:
        {
        return this->limi_04_dc1_dspsetup();
        }
    }
}

void limi_04_reset() {
    this->limi_04_recover = (number)1000 / (this->limi_04_release * this->samplerate());

    {
        this->limi_04_recover *= 0.707;
    }
}

void limi_04_dspsetup(bool force) {
    if ((bool)(this->limi_04_setupDone) && (bool)(!(bool)(force)))
        return;

    this->limi_04_reset();
    this->limi_04_setupDone = true;
    this->limi_04_dc1_dspsetup();
}

number numbertilde_14_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_14_smooth_d_prev);
    this->numbertilde_14_smooth_d_prev = x;
    return temp;
}

void numbertilde_14_smooth_d_dspsetup() {
    this->numbertilde_14_smooth_d_reset();
}

void numbertilde_14_smooth_d_reset() {
    this->numbertilde_14_smooth_d_prev = 0;
}

number numbertilde_14_smooth_next(number x, number up, number down) {
    if (this->numbertilde_14_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_14_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_14_smooth_index = _up;
            this->numbertilde_14_smooth_increment = (x - this->numbertilde_14_smooth_prev) / _up;
        } else if (x < this->numbertilde_14_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_14_smooth_index = _down;
            this->numbertilde_14_smooth_increment = (x - this->numbertilde_14_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_14_smooth_index > 0) {
        this->numbertilde_14_smooth_prev += this->numbertilde_14_smooth_increment;
        this->numbertilde_14_smooth_index -= 1;
    } else {
        this->numbertilde_14_smooth_prev = x;
    }

    return this->numbertilde_14_smooth_prev;
}

void numbertilde_14_smooth_reset() {
    this->numbertilde_14_smooth_prev = 0;
    this->numbertilde_14_smooth_index = 0;
    this->numbertilde_14_smooth_increment = 0;
    this->numbertilde_14_smooth_d_reset();
}

void numbertilde_14_init() {
    this->numbertilde_14_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-87"), 1, this->_currentTime);
}

void numbertilde_14_dspsetup(bool force) {
    if ((bool)(this->numbertilde_14_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_14_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_14_currentInterval = this->numbertilde_14_currentIntervalInSamples;
    this->numbertilde_14_rampInSamples = this->mstosamps(this->numbertilde_14_ramp);
    this->numbertilde_14_setupDone = true;
    this->numbertilde_14_smooth_d_dspsetup();
}

void toggle_01_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_01_value_number;
}

void toggle_01_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_01_value_number_set(preset["value"]);
}

void numberobj_15_init() {
    this->numberobj_15_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-210"), 1, this->_currentTime);
}

void numberobj_15_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_15_value;
}

void numberobj_15_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_15_value_set(preset["value"]);
}

void numberobj_16_init() {
    this->numberobj_16_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-147"), 1, this->_currentTime);
}

void numberobj_16_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_16_value;
}

void numberobj_16_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_16_value_set(preset["value"]);
}

void scopetilde_05_updateEffectiveCount() {
    number effectiveCount = 256 * 1 + 256 * 0;
    this->scopetilde_05_effectiveCount = this->maximum(effectiveCount, 256);
}

void scopetilde_05_dspsetup(bool force) {
    if ((bool)(this->scopetilde_05_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->scopetilde_05_mode = 1;
    }

    this->getEngine()->sendListMessage(
        TAG("setup"),
        TAG("scope~_obj-111"),
        {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_05_mode},
        this->_currentTime
    );;

    this->scopetilde_05_updateEffectiveCount();
    this->scopetilde_05_setupDone = true;
}

void param_02_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_02_value;
}

void param_02_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_02_value_set(preset["value"]);
}

void scopetilde_06_updateEffectiveCount() {
    number effectiveCount = 256 * 1 + 256 * 0;
    this->scopetilde_06_effectiveCount = this->maximum(effectiveCount, 256);
}

void scopetilde_06_dspsetup(bool force) {
    if ((bool)(this->scopetilde_06_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->scopetilde_06_mode = 1;
    }

    this->getEngine()->sendListMessage(
        TAG("setup"),
        TAG("scope~_obj-162"),
        {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_06_mode},
        this->_currentTime
    );;

    this->scopetilde_06_updateEffectiveCount();
    this->scopetilde_06_setupDone = true;
}

void numberobj_17_init() {
    this->numberobj_17_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-39"), 1, this->_currentTime);
}

void numberobj_17_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_17_value;
}

void numberobj_17_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_17_value_set(preset["value"]);
}

number numbertilde_15_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_15_smooth_d_prev);
    this->numbertilde_15_smooth_d_prev = x;
    return temp;
}

void numbertilde_15_smooth_d_dspsetup() {
    this->numbertilde_15_smooth_d_reset();
}

void numbertilde_15_smooth_d_reset() {
    this->numbertilde_15_smooth_d_prev = 0;
}

number numbertilde_15_smooth_next(number x, number up, number down) {
    if (this->numbertilde_15_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_15_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_15_smooth_index = _up;
            this->numbertilde_15_smooth_increment = (x - this->numbertilde_15_smooth_prev) / _up;
        } else if (x < this->numbertilde_15_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_15_smooth_index = _down;
            this->numbertilde_15_smooth_increment = (x - this->numbertilde_15_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_15_smooth_index > 0) {
        this->numbertilde_15_smooth_prev += this->numbertilde_15_smooth_increment;
        this->numbertilde_15_smooth_index -= 1;
    } else {
        this->numbertilde_15_smooth_prev = x;
    }

    return this->numbertilde_15_smooth_prev;
}

void numbertilde_15_smooth_reset() {
    this->numbertilde_15_smooth_prev = 0;
    this->numbertilde_15_smooth_index = 0;
    this->numbertilde_15_smooth_increment = 0;
    this->numbertilde_15_smooth_d_reset();
}

void numbertilde_15_init() {
    this->numbertilde_15_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-85"), 1, this->_currentTime);
}

void numbertilde_15_dspsetup(bool force) {
    if ((bool)(this->numbertilde_15_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_15_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_15_currentInterval = this->numbertilde_15_currentIntervalInSamples;
    this->numbertilde_15_rampInSamples = this->mstosamps(this->numbertilde_15_ramp);
    this->numbertilde_15_setupDone = true;
    this->numbertilde_15_smooth_d_dspsetup();
}

number numbertilde_16_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_16_smooth_d_prev);
    this->numbertilde_16_smooth_d_prev = x;
    return temp;
}

void numbertilde_16_smooth_d_dspsetup() {
    this->numbertilde_16_smooth_d_reset();
}

void numbertilde_16_smooth_d_reset() {
    this->numbertilde_16_smooth_d_prev = 0;
}

number numbertilde_16_smooth_next(number x, number up, number down) {
    if (this->numbertilde_16_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_16_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_16_smooth_index = _up;
            this->numbertilde_16_smooth_increment = (x - this->numbertilde_16_smooth_prev) / _up;
        } else if (x < this->numbertilde_16_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_16_smooth_index = _down;
            this->numbertilde_16_smooth_increment = (x - this->numbertilde_16_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_16_smooth_index > 0) {
        this->numbertilde_16_smooth_prev += this->numbertilde_16_smooth_increment;
        this->numbertilde_16_smooth_index -= 1;
    } else {
        this->numbertilde_16_smooth_prev = x;
    }

    return this->numbertilde_16_smooth_prev;
}

void numbertilde_16_smooth_reset() {
    this->numbertilde_16_smooth_prev = 0;
    this->numbertilde_16_smooth_index = 0;
    this->numbertilde_16_smooth_increment = 0;
    this->numbertilde_16_smooth_d_reset();
}

void numbertilde_16_init() {
    this->numbertilde_16_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-113"), 1, this->_currentTime);
}

void numbertilde_16_dspsetup(bool force) {
    if ((bool)(this->numbertilde_16_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_16_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_16_currentInterval = this->numbertilde_16_currentIntervalInSamples;
    this->numbertilde_16_rampInSamples = this->mstosamps(this->numbertilde_16_ramp);
    this->numbertilde_16_setupDone = true;
    this->numbertilde_16_smooth_d_dspsetup();
}

void rate_tilde_01_reset() {
    this->rate_tilde_01_currentPhase = 0;
    this->rate_tilde_01_diff = 0;
    this->rate_tilde_01_prev = 0;
    this->rate_tilde_01_mult = 1;
    this->rate_tilde_01_invmult = 1;
    this->rate_tilde_01_wantlock = 1;
    this->rate_tilde_01_quant = 1;
}

void rate_tilde_01_dspsetup(bool force) {
    if ((bool)(this->rate_tilde_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->rate_tilde_01_reset();
    this->rate_tilde_01_setupDone = true;
}

void gen_02_delay_1_step() {
    this->gen_02_delay_1_reader++;

    if (this->gen_02_delay_1_reader >= (int)(this->gen_02_delay_1_buffer->getSize()))
        this->gen_02_delay_1_reader = 0;
}

number gen_02_delay_1_read(number size, Int interp) {
    RNBO_UNUSED(interp);

    {
        number r = (int)(this->gen_02_delay_1_buffer->getSize()) + this->gen_02_delay_1_reader - ((size > this->gen_02_delay_1__maxdelay ? this->gen_02_delay_1__maxdelay : (size < (this->gen_02_delay_1_reader != this->gen_02_delay_1_writer) ? this->gen_02_delay_1_reader != this->gen_02_delay_1_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_02_delay_1_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_02_delay_1_wrap))
        ), this->gen_02_delay_1_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_02_delay_1_wrap))
        ));
    }

    number r = (int)(this->gen_02_delay_1_buffer->getSize()) + this->gen_02_delay_1_reader - ((size > this->gen_02_delay_1__maxdelay ? this->gen_02_delay_1__maxdelay : (size < (this->gen_02_delay_1_reader != this->gen_02_delay_1_writer) ? this->gen_02_delay_1_reader != this->gen_02_delay_1_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_02_delay_1_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_02_delay_1_wrap))
    );
}

void gen_02_delay_1_write(number v) {
    this->gen_02_delay_1_writer = this->gen_02_delay_1_reader;
    this->gen_02_delay_1_buffer[(Index)this->gen_02_delay_1_writer] = v;
}

number gen_02_delay_1_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_02_delay_1__maxdelay : size);
    number val = this->gen_02_delay_1_read(effectiveSize, 0);
    this->gen_02_delay_1_write(v);
    this->gen_02_delay_1_step();
    return val;
}

array<Index, 2> gen_02_delay_1_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_02_delay_1_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_02_delay_1_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_02_delay_1_init() {
    auto result = this->gen_02_delay_1_calcSizeInSamples();
    this->gen_02_delay_1__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_02_delay_1_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_02_delay_1_wrap = requestedSizeInSamples - 1;
}

void gen_02_delay_1_clear() {
    this->gen_02_delay_1_buffer->setZero();
}

void gen_02_delay_1_reset() {
    auto result = this->gen_02_delay_1_calcSizeInSamples();
    this->gen_02_delay_1__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_02_delay_1_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_02_delay_1_buffer);
    this->gen_02_delay_1_wrap = this->gen_02_delay_1_buffer->getSize() - 1;
    this->gen_02_delay_1_clear();

    if (this->gen_02_delay_1_reader >= this->gen_02_delay_1__maxdelay || this->gen_02_delay_1_writer >= this->gen_02_delay_1__maxdelay) {
        this->gen_02_delay_1_reader = 0;
        this->gen_02_delay_1_writer = 0;
    }
}

void gen_02_delay_1_dspsetup() {
    this->gen_02_delay_1_reset();
}

number gen_02_delay_1_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 3840;
}

number gen_02_delay_1_size() {
    return this->gen_02_delay_1__maxdelay;
}

number gen_02_history_2_getvalue() {
    return this->gen_02_history_2_value;
}

void gen_02_history_2_setvalue(number val) {
    this->gen_02_history_2_value = val;
}

void gen_02_history_2_reset() {
    this->gen_02_history_2_value = 0;
}

void gen_02_history_2_init() {
    this->gen_02_history_2_value = 0;
}

number gen_02_history_3_getvalue() {
    return this->gen_02_history_3_value;
}

void gen_02_history_3_setvalue(number val) {
    this->gen_02_history_3_value = val;
}

void gen_02_history_3_reset() {
    this->gen_02_history_3_value = 0;
}

void gen_02_history_3_init() {
    this->gen_02_history_3_value = 0;
}

number gen_02_history_4_getvalue() {
    return this->gen_02_history_4_value;
}

void gen_02_history_4_setvalue(number val) {
    this->gen_02_history_4_value = val;
}

void gen_02_history_4_reset() {
    this->gen_02_history_4_value = 0;
}

void gen_02_history_4_init() {
    this->gen_02_history_4_value = 0;
}

number gen_02_history_5_getvalue() {
    return this->gen_02_history_5_value;
}

void gen_02_history_5_setvalue(number val) {
    this->gen_02_history_5_value = val;
}

void gen_02_history_5_reset() {
    this->gen_02_history_5_value = 0;
}

void gen_02_history_5_init() {
    this->gen_02_history_5_value = 0;
}

number gen_02_slide_6_next(number x, number up, number down) {
    RNBO_UNUSED(down);
    RNBO_UNUSED(up);
    number temp = x - this->gen_02_slide_6_prev;
    auto iup = this->safediv(1., this->maximum(1., rnbo_abs(5000)));
    auto idown = this->safediv(1., this->maximum(1., rnbo_abs(100)));
    this->gen_02_slide_6_prev = this->gen_02_slide_6_prev + ((x > this->gen_02_slide_6_prev ? iup : idown)) * temp;
    return this->gen_02_slide_6_prev;
}

void gen_02_slide_6_reset() {
    this->gen_02_slide_6_prev = 0;
}

number gen_02_slide_11_next(number x, number up, number down) {
    RNBO_UNUSED(down);
    RNBO_UNUSED(up);
    number temp = x - this->gen_02_slide_11_prev;
    auto iup = this->safediv(1., this->maximum(1., rnbo_abs(5000)));
    auto idown = this->safediv(1., this->maximum(1., rnbo_abs(100)));
    this->gen_02_slide_11_prev = this->gen_02_slide_11_prev + ((x > this->gen_02_slide_11_prev ? iup : idown)) * temp;
    return this->gen_02_slide_11_prev;
}

void gen_02_slide_11_reset() {
    this->gen_02_slide_11_prev = 0;
}

void gen_02_dspsetup(bool force) {
    if ((bool)(this->gen_02_setupDone) && (bool)(!(bool)(force)))
        return;

    this->gen_02_setupDone = true;
    this->gen_02_delay_1_dspsetup();
}

number numbertilde_17_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_17_smooth_d_prev);
    this->numbertilde_17_smooth_d_prev = x;
    return temp;
}

void numbertilde_17_smooth_d_dspsetup() {
    this->numbertilde_17_smooth_d_reset();
}

void numbertilde_17_smooth_d_reset() {
    this->numbertilde_17_smooth_d_prev = 0;
}

number numbertilde_17_smooth_next(number x, number up, number down) {
    if (this->numbertilde_17_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_17_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_17_smooth_index = _up;
            this->numbertilde_17_smooth_increment = (x - this->numbertilde_17_smooth_prev) / _up;
        } else if (x < this->numbertilde_17_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_17_smooth_index = _down;
            this->numbertilde_17_smooth_increment = (x - this->numbertilde_17_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_17_smooth_index > 0) {
        this->numbertilde_17_smooth_prev += this->numbertilde_17_smooth_increment;
        this->numbertilde_17_smooth_index -= 1;
    } else {
        this->numbertilde_17_smooth_prev = x;
    }

    return this->numbertilde_17_smooth_prev;
}

void numbertilde_17_smooth_reset() {
    this->numbertilde_17_smooth_prev = 0;
    this->numbertilde_17_smooth_index = 0;
    this->numbertilde_17_smooth_increment = 0;
    this->numbertilde_17_smooth_d_reset();
}

void numbertilde_17_init() {
    this->numbertilde_17_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-33"), 1, this->_currentTime);
}

void numbertilde_17_dspsetup(bool force) {
    if ((bool)(this->numbertilde_17_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_17_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_17_currentInterval = this->numbertilde_17_currentIntervalInSamples;
    this->numbertilde_17_rampInSamples = this->mstosamps(this->numbertilde_17_ramp);
    this->numbertilde_17_setupDone = true;
    this->numbertilde_17_smooth_d_dspsetup();
}

void ip_01_init() {
    this->ip_01_lastValue = this->ip_01_value;
}

void ip_01_fillSigBuf() {
    if ((bool)(this->ip_01_sigbuf)) {
        SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);

        if (k >= (SampleIndex)(this->vs))
            k = (SampleIndex)(this->vs) - 1;

        for (SampleIndex i = (SampleIndex)(this->ip_01_lastIndex); i < k; i++) {
            if (this->ip_01_resetCount > 0) {
                this->ip_01_sigbuf[(Index)i] = 1;
                this->ip_01_resetCount--;
            } else {
                this->ip_01_sigbuf[(Index)i] = this->ip_01_lastValue;
            }
        }

        this->ip_01_lastIndex = k;
    }
}

void ip_01_dspsetup(bool force) {
    if ((bool)(this->ip_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->ip_01_lastIndex = 0;
    this->ip_01_setupDone = true;
}

number phasor_01_ph_next(number freq, number reset) {
    RNBO_UNUSED(reset);
    number pincr = freq * this->phasor_01_ph_conv;

    if (this->phasor_01_ph_currentPhase < 0.)
        this->phasor_01_ph_currentPhase = 1. + this->phasor_01_ph_currentPhase;

    if (this->phasor_01_ph_currentPhase > 1.)
        this->phasor_01_ph_currentPhase = this->phasor_01_ph_currentPhase - 1.;

    number tmp = this->phasor_01_ph_currentPhase;
    this->phasor_01_ph_currentPhase += pincr;
    return tmp;
}

void phasor_01_ph_reset() {
    this->phasor_01_ph_currentPhase = 0;
}

void phasor_01_ph_dspsetup() {
    this->phasor_01_ph_conv = (number)1 / this->sr;
}

void phasor_01_dspsetup(bool force) {
    if ((bool)(this->phasor_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->phasor_01_conv = (number)1 / this->samplerate();
    this->phasor_01_setupDone = true;
    this->phasor_01_ph_dspsetup();
}

void numberobj_18_init() {
    this->numberobj_18_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-29"), 1, this->_currentTime);
}

void numberobj_18_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_18_value;
}

void numberobj_18_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_18_value_set(preset["value"]);
}

void numberobj_19_init() {
    this->numberobj_19_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-120"), 1, this->_currentTime);
}

void numberobj_19_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_19_value;
}

void numberobj_19_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_19_value_set(preset["value"]);
}

void scopetilde_07_updateEffectiveCount() {
    number effectiveCount = 256 * 1 + 256 * 0;
    this->scopetilde_07_effectiveCount = this->maximum(effectiveCount, 256);
}

void scopetilde_07_dspsetup(bool force) {
    if ((bool)(this->scopetilde_07_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->scopetilde_07_mode = 1;
    }

    this->getEngine()->sendListMessage(
        TAG("setup"),
        TAG("scope~_obj-211"),
        {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_07_mode},
        this->_currentTime
    );;

    this->scopetilde_07_updateEffectiveCount();
    this->scopetilde_07_setupDone = true;
}

void message_10_init() {
    this->message_10_set_set({0.579});
}

void param_03_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_03_value;
}

void param_03_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_03_value_set(preset["value"]);
}

void ip_02_init() {
    this->ip_02_lastValue = this->ip_02_value;
}

void ip_02_fillSigBuf() {
    if ((bool)(this->ip_02_sigbuf)) {
        SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);

        if (k >= (SampleIndex)(this->vs))
            k = (SampleIndex)(this->vs) - 1;

        for (SampleIndex i = (SampleIndex)(this->ip_02_lastIndex); i < k; i++) {
            if (this->ip_02_resetCount > 0) {
                this->ip_02_sigbuf[(Index)i] = 1;
                this->ip_02_resetCount--;
            } else {
                this->ip_02_sigbuf[(Index)i] = this->ip_02_lastValue;
            }
        }

        this->ip_02_lastIndex = k;
    }
}

void ip_02_dspsetup(bool force) {
    if ((bool)(this->ip_02_setupDone) && (bool)(!(bool)(force)))
        return;

    this->ip_02_lastIndex = 0;
    this->ip_02_setupDone = true;
}

void message_11_init() {
    this->message_11_set_set({0.306});
}

void ip_03_init() {
    this->ip_03_lastValue = this->ip_03_value;
}

void ip_03_fillSigBuf() {
    if ((bool)(this->ip_03_sigbuf)) {
        SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);

        if (k >= (SampleIndex)(this->vs))
            k = (SampleIndex)(this->vs) - 1;

        for (SampleIndex i = (SampleIndex)(this->ip_03_lastIndex); i < k; i++) {
            if (this->ip_03_resetCount > 0) {
                this->ip_03_sigbuf[(Index)i] = 1;
                this->ip_03_resetCount--;
            } else {
                this->ip_03_sigbuf[(Index)i] = this->ip_03_lastValue;
            }
        }

        this->ip_03_lastIndex = k;
    }
}

void ip_03_dspsetup(bool force) {
    if ((bool)(this->ip_03_setupDone) && (bool)(!(bool)(force)))
        return;

    this->ip_03_lastIndex = 0;
    this->ip_03_setupDone = true;
}

void numberobj_20_init() {
    this->numberobj_20_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-198"), 1, this->_currentTime);
}

void numberobj_20_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_20_value;
}

void numberobj_20_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_20_value_set(preset["value"]);
}

void numberobj_21_init() {
    this->numberobj_21_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-61"), 1, this->_currentTime);
}

void numberobj_21_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_21_value;
}

void numberobj_21_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_21_value_set(preset["value"]);
}

void scopetilde_08_updateEffectiveCount() {
    number effectiveCount = 256 * 1 + 256 * 0;
    this->scopetilde_08_effectiveCount = this->maximum(effectiveCount, 256);
}

void scopetilde_08_dspsetup(bool force) {
    if ((bool)(this->scopetilde_08_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->scopetilde_08_mode = 1;
    }

    this->getEngine()->sendListMessage(
        TAG("setup"),
        TAG("scope~_obj-153"),
        {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_08_mode},
        this->_currentTime
    );;

    this->scopetilde_08_updateEffectiveCount();
    this->scopetilde_08_setupDone = true;
}

number numbertilde_18_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_18_smooth_d_prev);
    this->numbertilde_18_smooth_d_prev = x;
    return temp;
}

void numbertilde_18_smooth_d_dspsetup() {
    this->numbertilde_18_smooth_d_reset();
}

void numbertilde_18_smooth_d_reset() {
    this->numbertilde_18_smooth_d_prev = 0;
}

number numbertilde_18_smooth_next(number x, number up, number down) {
    if (this->numbertilde_18_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_18_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_18_smooth_index = _up;
            this->numbertilde_18_smooth_increment = (x - this->numbertilde_18_smooth_prev) / _up;
        } else if (x < this->numbertilde_18_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_18_smooth_index = _down;
            this->numbertilde_18_smooth_increment = (x - this->numbertilde_18_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_18_smooth_index > 0) {
        this->numbertilde_18_smooth_prev += this->numbertilde_18_smooth_increment;
        this->numbertilde_18_smooth_index -= 1;
    } else {
        this->numbertilde_18_smooth_prev = x;
    }

    return this->numbertilde_18_smooth_prev;
}

void numbertilde_18_smooth_reset() {
    this->numbertilde_18_smooth_prev = 0;
    this->numbertilde_18_smooth_index = 0;
    this->numbertilde_18_smooth_increment = 0;
    this->numbertilde_18_smooth_d_reset();
}

void numbertilde_18_init() {
    this->numbertilde_18_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-126"), 1, this->_currentTime);
}

void numbertilde_18_dspsetup(bool force) {
    if ((bool)(this->numbertilde_18_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_18_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_18_currentInterval = this->numbertilde_18_currentIntervalInSamples;
    this->numbertilde_18_rampInSamples = this->mstosamps(this->numbertilde_18_ramp);
    this->numbertilde_18_setupDone = true;
    this->numbertilde_18_smooth_d_dspsetup();
}

void numberobj_22_init() {
    this->numberobj_22_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-285"), 1, this->_currentTime);
}

void numberobj_22_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_22_value;
}

void numberobj_22_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_22_value_set(preset["value"]);
}

void toggle_02_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_02_value_number;
}

void toggle_02_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_02_value_number_set(preset["value"]);
}

number numbertilde_19_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_19_smooth_d_prev);
    this->numbertilde_19_smooth_d_prev = x;
    return temp;
}

void numbertilde_19_smooth_d_dspsetup() {
    this->numbertilde_19_smooth_d_reset();
}

void numbertilde_19_smooth_d_reset() {
    this->numbertilde_19_smooth_d_prev = 0;
}

number numbertilde_19_smooth_next(number x, number up, number down) {
    if (this->numbertilde_19_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_19_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_19_smooth_index = _up;
            this->numbertilde_19_smooth_increment = (x - this->numbertilde_19_smooth_prev) / _up;
        } else if (x < this->numbertilde_19_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_19_smooth_index = _down;
            this->numbertilde_19_smooth_increment = (x - this->numbertilde_19_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_19_smooth_index > 0) {
        this->numbertilde_19_smooth_prev += this->numbertilde_19_smooth_increment;
        this->numbertilde_19_smooth_index -= 1;
    } else {
        this->numbertilde_19_smooth_prev = x;
    }

    return this->numbertilde_19_smooth_prev;
}

void numbertilde_19_smooth_reset() {
    this->numbertilde_19_smooth_prev = 0;
    this->numbertilde_19_smooth_index = 0;
    this->numbertilde_19_smooth_increment = 0;
    this->numbertilde_19_smooth_d_reset();
}

void numbertilde_19_init() {
    this->numbertilde_19_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-106"), 1, this->_currentTime);
}

void numbertilde_19_dspsetup(bool force) {
    if ((bool)(this->numbertilde_19_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_19_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_19_currentInterval = this->numbertilde_19_currentIntervalInSamples;
    this->numbertilde_19_rampInSamples = this->mstosamps(this->numbertilde_19_ramp);
    this->numbertilde_19_setupDone = true;
    this->numbertilde_19_smooth_d_dspsetup();
}

void numberobj_23_init() {
    this->numberobj_23_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-265"), 1, this->_currentTime);
}

void numberobj_23_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_23_value;
}

void numberobj_23_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_23_value_set(preset["value"]);
}

array<number, 5> filtercoeff_02_localop_next(number frequency, number q, number gain, number type) {
    number omega = frequency * this->filtercoeff_02_localop_twopi_over_sr;
    this->filtercoeff_02_localop_cs = rnbo_cos(omega);
    this->filtercoeff_02_localop_sn = rnbo_sin(omega);
    this->filtercoeff_02_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
    this->filtercoeff_02_localop_one_over_q = (number)1 / q;
    this->filtercoeff_02_localop_alpha = this->filtercoeff_02_localop_sn * 0.5 * this->filtercoeff_02_localop_one_over_q;

    switch ((int)type) {
    case 5:
        {
        this->filtercoeff_02_localop_A = this->safesqrt(gain);

        this->filtercoeff_02_localop_beta = this->safesqrt(
            (this->filtercoeff_02_localop_A * this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_one_over_q - (this->filtercoeff_02_localop_A - 1.) * (this->filtercoeff_02_localop_A - 1.)
        );

        this->filtercoeff_02_localop_b0 = (number)1 / (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn);
        break;
        }
    case 6:
        {
        this->filtercoeff_02_localop_A = this->safesqrt(gain);

        this->filtercoeff_02_localop_beta = this->safesqrt(
            (this->filtercoeff_02_localop_A * this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_one_over_q - (this->filtercoeff_02_localop_A - 1.) * (this->filtercoeff_02_localop_A - 1.)
        );

        this->filtercoeff_02_localop_b0 = (number)1 / (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn);
        break;
        }
    case 4:
        {
        this->filtercoeff_02_localop_A = this->safesqrt(gain);
        this->filtercoeff_02_localop_one_over_a = (this->filtercoeff_02_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_02_localop_A);
        this->filtercoeff_02_localop_b0 = (number)1 / (1. + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_a);
        break;
        }
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
        {
        this->filtercoeff_02_localop_b0 = (number)1 / (1. + this->filtercoeff_02_localop_alpha);
        this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
        break;
        }
    default:
        {
        this->filtercoeff_02_localop_b0 = (number)1 / (1. + this->filtercoeff_02_localop_alpha);
        break;
        }
    }

    switch ((int)type) {
    case 0:
        {
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. - this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la1 = (1. - this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 1:
        {
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. + this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la1 = -(1. + this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 2:
        {
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la1 = 0.;
        this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 7:
        {
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * q * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la1 = 0.;
        this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * q * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 3:
        {
        this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_b0;
        break;
        }
    case 8:
        {
        this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = this->filtercoeff_02_localop_la0 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la2 = 1.0;
        break;
        }
    case 4:
        {
        this->filtercoeff_02_localop_la0 = (1. + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_A) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la2 = (1. - this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_A) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_a) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 5:
        {
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la1 = 2. * this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A - 1 - (this->filtercoeff_02_localop_A + 1) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb1 = -2. * (this->filtercoeff_02_localop_A - 1. + (this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 6:
        {
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la1 = -2. * this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A - 1. + (this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb1 = 2. * (this->filtercoeff_02_localop_A - 1. - (this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 9:
        {
        this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. - this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0g;
        this->filtercoeff_02_localop_la1 = (1. - this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0g;
        this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 10:
        {
        this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. + this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0g;
        this->filtercoeff_02_localop_la1 = -(1. + this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0g;
        this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 11:
        {
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * gain * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la1 = 0.;
        this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * gain * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 13:
        {
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * gain * q * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la1 = 0.;
        this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * gain * q * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 12:
        {
        this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
        this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la1 *= this->filtercoeff_02_localop_b0g;
        this->filtercoeff_02_localop_lb1 *= this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_b0g;
        this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_b0g;
        break;
        }
    case 14:
        {
        this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
        this->filtercoeff_02_localop_la0 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0g;
        this->filtercoeff_02_localop_la1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0g;
        this->filtercoeff_02_localop_la2 = gain;
        this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
        this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
        break;
        }
    case 15:
        {
        this->filtercoeff_02_localop_la0 = 1;
        this->filtercoeff_02_localop_la1 = 0;
        this->filtercoeff_02_localop_la2 = 0;
        this->filtercoeff_02_localop_lb1 = 0;
        this->filtercoeff_02_localop_lb2 = 0;
        }
    default:
        {
        break;
        }
    }

    return {
        this->filtercoeff_02_localop_la0,
        this->filtercoeff_02_localop_la1,
        this->filtercoeff_02_localop_la2,
        this->filtercoeff_02_localop_lb1,
        this->filtercoeff_02_localop_lb2
    };
}

void filtercoeff_02_localop_dspsetup() {
    this->filtercoeff_02_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
}

void filtercoeff_02_localop_reset() {
    this->filtercoeff_02_localop_twopi_over_sr = 0;
    this->filtercoeff_02_localop_cs = 0;
    this->filtercoeff_02_localop_sn = 0;
    this->filtercoeff_02_localop_one_over_gain = 0;
    this->filtercoeff_02_localop_one_over_q = 0;
    this->filtercoeff_02_localop_alpha = 0;
    this->filtercoeff_02_localop_beta = 0;
    this->filtercoeff_02_localop_b0 = 0;
    this->filtercoeff_02_localop_b0g = 0;
    this->filtercoeff_02_localop_A = 0;
    this->filtercoeff_02_localop_one_over_a = 0;
    this->filtercoeff_02_localop_la0 = 0;
    this->filtercoeff_02_localop_la1 = 0;
    this->filtercoeff_02_localop_la2 = 0;
    this->filtercoeff_02_localop_lb1 = 0;
    this->filtercoeff_02_localop_lb2 = 0;
}

void filtercoeff_02_updateTerms(number local_frequency, number local_gain, number local_q) {
    if ((bool)(this->filtercoeff_02_force_update) || local_frequency != this->filtercoeff_02_last_frequency || local_q != this->filtercoeff_02_last_q || local_gain != this->filtercoeff_02_last_gain || this->filtercoeff_02_type != this->filtercoeff_02_last_type) {
        array<number, 5> tmp = this->filtercoeff_02_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_02_type);
        this->filtercoeff_02_la0 = tmp[0];
        this->filtercoeff_02_la1 = tmp[1];
        this->filtercoeff_02_la2 = tmp[2];
        this->filtercoeff_02_lb1 = tmp[3];
        this->filtercoeff_02_lb2 = tmp[4];
        this->filtercoeff_02_last_frequency = local_frequency;
        this->filtercoeff_02_last_q = local_q;
        this->filtercoeff_02_last_gain = local_gain;
        this->filtercoeff_02_last_type = this->filtercoeff_02_type;
        this->filtercoeff_02_force_update = false;
    }
}

void filtercoeff_02_dspsetup(bool force) {
    if ((bool)(this->filtercoeff_02_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->filtercoeff_02_activeResamp = this->vectorsize();
    }

    this->filtercoeff_02_resamp_counter = 0;
    this->filtercoeff_02_la0 = 0.;
    this->filtercoeff_02_la1 = 0.;
    this->filtercoeff_02_la2 = 0.;
    this->filtercoeff_02_lb1 = 0.;
    this->filtercoeff_02_lb2 = 0.;
    this->filtercoeff_02_last_frequency = -1.;
    this->filtercoeff_02_last_q = -1.;
    this->filtercoeff_02_last_gain = -1.;
    this->filtercoeff_02_last_type = this->filtercoeff_02_type;
    this->filtercoeff_02_force_update = true;
    this->filtercoeff_02_setupDone = true;
    this->filtercoeff_02_localop_dspsetup();
}

void param_04_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_04_value;
}

void param_04_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_04_value_set(preset["value"]);
}

void numberobj_24_init() {
    this->numberobj_24_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-171"), 1, this->_currentTime);
}

void numberobj_24_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_24_value;
}

void numberobj_24_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_24_value_set(preset["value"]);
}

void numberobj_25_init() {
    this->numberobj_25_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-172"), 1, this->_currentTime);
}

void numberobj_25_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_25_value;
}

void numberobj_25_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_25_value_set(preset["value"]);
}

number numbertilde_20_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_20_smooth_d_prev);
    this->numbertilde_20_smooth_d_prev = x;
    return temp;
}

void numbertilde_20_smooth_d_dspsetup() {
    this->numbertilde_20_smooth_d_reset();
}

void numbertilde_20_smooth_d_reset() {
    this->numbertilde_20_smooth_d_prev = 0;
}

number numbertilde_20_smooth_next(number x, number up, number down) {
    if (this->numbertilde_20_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_20_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_20_smooth_index = _up;
            this->numbertilde_20_smooth_increment = (x - this->numbertilde_20_smooth_prev) / _up;
        } else if (x < this->numbertilde_20_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_20_smooth_index = _down;
            this->numbertilde_20_smooth_increment = (x - this->numbertilde_20_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_20_smooth_index > 0) {
        this->numbertilde_20_smooth_prev += this->numbertilde_20_smooth_increment;
        this->numbertilde_20_smooth_index -= 1;
    } else {
        this->numbertilde_20_smooth_prev = x;
    }

    return this->numbertilde_20_smooth_prev;
}

void numbertilde_20_smooth_reset() {
    this->numbertilde_20_smooth_prev = 0;
    this->numbertilde_20_smooth_index = 0;
    this->numbertilde_20_smooth_increment = 0;
    this->numbertilde_20_smooth_d_reset();
}

void numbertilde_20_init() {
    this->numbertilde_20_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-127"), 1, this->_currentTime);
}

void numbertilde_20_dspsetup(bool force) {
    if ((bool)(this->numbertilde_20_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_20_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_20_currentInterval = this->numbertilde_20_currentIntervalInSamples;
    this->numbertilde_20_rampInSamples = this->mstosamps(this->numbertilde_20_ramp);
    this->numbertilde_20_setupDone = true;
    this->numbertilde_20_smooth_d_dspsetup();
}

number numbertilde_21_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_21_smooth_d_prev);
    this->numbertilde_21_smooth_d_prev = x;
    return temp;
}

void numbertilde_21_smooth_d_dspsetup() {
    this->numbertilde_21_smooth_d_reset();
}

void numbertilde_21_smooth_d_reset() {
    this->numbertilde_21_smooth_d_prev = 0;
}

number numbertilde_21_smooth_next(number x, number up, number down) {
    if (this->numbertilde_21_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_21_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_21_smooth_index = _up;
            this->numbertilde_21_smooth_increment = (x - this->numbertilde_21_smooth_prev) / _up;
        } else if (x < this->numbertilde_21_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_21_smooth_index = _down;
            this->numbertilde_21_smooth_increment = (x - this->numbertilde_21_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_21_smooth_index > 0) {
        this->numbertilde_21_smooth_prev += this->numbertilde_21_smooth_increment;
        this->numbertilde_21_smooth_index -= 1;
    } else {
        this->numbertilde_21_smooth_prev = x;
    }

    return this->numbertilde_21_smooth_prev;
}

void numbertilde_21_smooth_reset() {
    this->numbertilde_21_smooth_prev = 0;
    this->numbertilde_21_smooth_index = 0;
    this->numbertilde_21_smooth_increment = 0;
    this->numbertilde_21_smooth_d_reset();
}

void numbertilde_21_init() {
    this->numbertilde_21_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-12"), 1, this->_currentTime);
}

void numbertilde_21_dspsetup(bool force) {
    if ((bool)(this->numbertilde_21_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_21_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_21_currentInterval = this->numbertilde_21_currentIntervalInSamples;
    this->numbertilde_21_rampInSamples = this->mstosamps(this->numbertilde_21_ramp);
    this->numbertilde_21_setupDone = true;
    this->numbertilde_21_smooth_d_dspsetup();
}

void numberobj_26_init() {
    this->numberobj_26_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-18"), 1, this->_currentTime);
}

void numberobj_26_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_26_value;
}

void numberobj_26_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_26_value_set(preset["value"]);
}

void scopetilde_09_updateEffectiveCount() {
    number effectiveCount = 256 * 1 + 256 * 0;
    this->scopetilde_09_effectiveCount = this->maximum(effectiveCount, 256);
}

void scopetilde_09_dspsetup(bool force) {
    if ((bool)(this->scopetilde_09_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->scopetilde_09_mode = 1;
    }

    this->getEngine()->sendListMessage(
        TAG("setup"),
        TAG("scope~_obj-208"),
        {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_09_mode},
        this->_currentTime
    );;

    this->scopetilde_09_updateEffectiveCount();
    this->scopetilde_09_setupDone = true;
}

void scopetilde_10_updateEffectiveCount() {
    number effectiveCount = 256 * 1 + 256 * 0;
    this->scopetilde_10_effectiveCount = this->maximum(effectiveCount, 256);
}

void scopetilde_10_dspsetup(bool force) {
    if ((bool)(this->scopetilde_10_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->scopetilde_10_mode = 1;
    }

    this->getEngine()->sendListMessage(
        TAG("setup"),
        TAG("scope~_obj-205"),
        {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_10_mode},
        this->_currentTime
    );;

    this->scopetilde_10_updateEffectiveCount();
    this->scopetilde_10_setupDone = true;
}

number numbertilde_22_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_22_smooth_d_prev);
    this->numbertilde_22_smooth_d_prev = x;
    return temp;
}

void numbertilde_22_smooth_d_dspsetup() {
    this->numbertilde_22_smooth_d_reset();
}

void numbertilde_22_smooth_d_reset() {
    this->numbertilde_22_smooth_d_prev = 0;
}

number numbertilde_22_smooth_next(number x, number up, number down) {
    if (this->numbertilde_22_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_22_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_22_smooth_index = _up;
            this->numbertilde_22_smooth_increment = (x - this->numbertilde_22_smooth_prev) / _up;
        } else if (x < this->numbertilde_22_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_22_smooth_index = _down;
            this->numbertilde_22_smooth_increment = (x - this->numbertilde_22_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_22_smooth_index > 0) {
        this->numbertilde_22_smooth_prev += this->numbertilde_22_smooth_increment;
        this->numbertilde_22_smooth_index -= 1;
    } else {
        this->numbertilde_22_smooth_prev = x;
    }

    return this->numbertilde_22_smooth_prev;
}

void numbertilde_22_smooth_reset() {
    this->numbertilde_22_smooth_prev = 0;
    this->numbertilde_22_smooth_index = 0;
    this->numbertilde_22_smooth_increment = 0;
    this->numbertilde_22_smooth_d_reset();
}

void numbertilde_22_init() {
    this->numbertilde_22_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-128"), 1, this->_currentTime);
}

void numbertilde_22_dspsetup(bool force) {
    if ((bool)(this->numbertilde_22_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_22_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_22_currentInterval = this->numbertilde_22_currentIntervalInSamples;
    this->numbertilde_22_rampInSamples = this->mstosamps(this->numbertilde_22_ramp);
    this->numbertilde_22_setupDone = true;
    this->numbertilde_22_smooth_d_dspsetup();
}

void numberobj_27_init() {
    this->numberobj_27_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-6"), 1, this->_currentTime);
}

void numberobj_27_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_27_value;
}

void numberobj_27_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_27_value_set(preset["value"]);
}

void param_05_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_05_value;
}

void param_05_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_05_value_set(preset["value"]);
}

number numbertilde_23_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_23_smooth_d_prev);
    this->numbertilde_23_smooth_d_prev = x;
    return temp;
}

void numbertilde_23_smooth_d_dspsetup() {
    this->numbertilde_23_smooth_d_reset();
}

void numbertilde_23_smooth_d_reset() {
    this->numbertilde_23_smooth_d_prev = 0;
}

number numbertilde_23_smooth_next(number x, number up, number down) {
    if (this->numbertilde_23_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_23_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_23_smooth_index = _up;
            this->numbertilde_23_smooth_increment = (x - this->numbertilde_23_smooth_prev) / _up;
        } else if (x < this->numbertilde_23_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_23_smooth_index = _down;
            this->numbertilde_23_smooth_increment = (x - this->numbertilde_23_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_23_smooth_index > 0) {
        this->numbertilde_23_smooth_prev += this->numbertilde_23_smooth_increment;
        this->numbertilde_23_smooth_index -= 1;
    } else {
        this->numbertilde_23_smooth_prev = x;
    }

    return this->numbertilde_23_smooth_prev;
}

void numbertilde_23_smooth_reset() {
    this->numbertilde_23_smooth_prev = 0;
    this->numbertilde_23_smooth_index = 0;
    this->numbertilde_23_smooth_increment = 0;
    this->numbertilde_23_smooth_d_reset();
}

void numbertilde_23_init() {
    this->numbertilde_23_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-124"), 1, this->_currentTime);
}

void numbertilde_23_dspsetup(bool force) {
    if ((bool)(this->numbertilde_23_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_23_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_23_currentInterval = this->numbertilde_23_currentIntervalInSamples;
    this->numbertilde_23_rampInSamples = this->mstosamps(this->numbertilde_23_ramp);
    this->numbertilde_23_setupDone = true;
    this->numbertilde_23_smooth_d_dspsetup();
}

void numberobj_28_init() {
    this->numberobj_28_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-28"), 1, this->_currentTime);
}

void numberobj_28_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_28_value;
}

void numberobj_28_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_28_value_set(preset["value"]);
}

void numberobj_29_init() {
    this->numberobj_29_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-14"), 1, this->_currentTime);
}

void numberobj_29_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_29_value;
}

void numberobj_29_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_29_value_set(preset["value"]);
}

number numbertilde_24_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_24_smooth_d_prev);
    this->numbertilde_24_smooth_d_prev = x;
    return temp;
}

void numbertilde_24_smooth_d_dspsetup() {
    this->numbertilde_24_smooth_d_reset();
}

void numbertilde_24_smooth_d_reset() {
    this->numbertilde_24_smooth_d_prev = 0;
}

number numbertilde_24_smooth_next(number x, number up, number down) {
    if (this->numbertilde_24_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_24_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_24_smooth_index = _up;
            this->numbertilde_24_smooth_increment = (x - this->numbertilde_24_smooth_prev) / _up;
        } else if (x < this->numbertilde_24_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_24_smooth_index = _down;
            this->numbertilde_24_smooth_increment = (x - this->numbertilde_24_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_24_smooth_index > 0) {
        this->numbertilde_24_smooth_prev += this->numbertilde_24_smooth_increment;
        this->numbertilde_24_smooth_index -= 1;
    } else {
        this->numbertilde_24_smooth_prev = x;
    }

    return this->numbertilde_24_smooth_prev;
}

void numbertilde_24_smooth_reset() {
    this->numbertilde_24_smooth_prev = 0;
    this->numbertilde_24_smooth_index = 0;
    this->numbertilde_24_smooth_increment = 0;
    this->numbertilde_24_smooth_d_reset();
}

void numbertilde_24_init() {
    this->numbertilde_24_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-221"), 1, this->_currentTime);
}

void numbertilde_24_dspsetup(bool force) {
    if ((bool)(this->numbertilde_24_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_24_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_24_currentInterval = this->numbertilde_24_currentIntervalInSamples;
    this->numbertilde_24_rampInSamples = this->mstosamps(this->numbertilde_24_ramp);
    this->numbertilde_24_setupDone = true;
    this->numbertilde_24_smooth_d_dspsetup();
}

void message_12_init() {
    this->message_12_set_set({0.28});
}

number numbertilde_25_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_25_smooth_d_prev);
    this->numbertilde_25_smooth_d_prev = x;
    return temp;
}

void numbertilde_25_smooth_d_dspsetup() {
    this->numbertilde_25_smooth_d_reset();
}

void numbertilde_25_smooth_d_reset() {
    this->numbertilde_25_smooth_d_prev = 0;
}

number numbertilde_25_smooth_next(number x, number up, number down) {
    if (this->numbertilde_25_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_25_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_25_smooth_index = _up;
            this->numbertilde_25_smooth_increment = (x - this->numbertilde_25_smooth_prev) / _up;
        } else if (x < this->numbertilde_25_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_25_smooth_index = _down;
            this->numbertilde_25_smooth_increment = (x - this->numbertilde_25_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_25_smooth_index > 0) {
        this->numbertilde_25_smooth_prev += this->numbertilde_25_smooth_increment;
        this->numbertilde_25_smooth_index -= 1;
    } else {
        this->numbertilde_25_smooth_prev = x;
    }

    return this->numbertilde_25_smooth_prev;
}

void numbertilde_25_smooth_reset() {
    this->numbertilde_25_smooth_prev = 0;
    this->numbertilde_25_smooth_index = 0;
    this->numbertilde_25_smooth_increment = 0;
    this->numbertilde_25_smooth_d_reset();
}

void numbertilde_25_init() {
    this->numbertilde_25_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-123"), 1, this->_currentTime);
}

void numbertilde_25_dspsetup(bool force) {
    if ((bool)(this->numbertilde_25_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_25_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_25_currentInterval = this->numbertilde_25_currentIntervalInSamples;
    this->numbertilde_25_rampInSamples = this->mstosamps(this->numbertilde_25_ramp);
    this->numbertilde_25_setupDone = true;
    this->numbertilde_25_smooth_d_dspsetup();
}

void numberobj_30_init() {
    this->numberobj_30_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-218"), 1, this->_currentTime);
}

void numberobj_30_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_30_value;
}

void numberobj_30_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_30_value_set(preset["value"]);
}

void numberobj_31_init() {
    this->numberobj_31_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-219"), 1, this->_currentTime);
}

void numberobj_31_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_31_value;
}

void numberobj_31_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_31_value_set(preset["value"]);
}

void param_06_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_06_value;
}

void param_06_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_06_value_set(preset["value"]);
}

void param_07_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_07_value;
}

void param_07_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_07_value_set(preset["value"]);
}

void message_13_init() {
    this->message_13_set_set({0});
}

void toggle_03_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_03_value_number;
}

void toggle_03_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_03_value_number_set(preset["value"]);
}

void scopetilde_11_updateEffectiveCount() {
    number effectiveCount = 256 * 1 + 256 * 0;
    this->scopetilde_11_effectiveCount = this->maximum(effectiveCount, 256);
}

void scopetilde_11_dspsetup(bool force) {
    if ((bool)(this->scopetilde_11_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->scopetilde_11_mode = 1;
    }

    this->getEngine()->sendListMessage(
        TAG("setup"),
        TAG("scope~_obj-108"),
        {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_11_mode},
        this->_currentTime
    );;

    this->scopetilde_11_updateEffectiveCount();
    this->scopetilde_11_setupDone = true;
}

void biquad_tilde_02_reset() {
    this->biquad_tilde_02_x1 = 0;
    this->biquad_tilde_02_x2 = 0;
    this->biquad_tilde_02_y1 = 0;
    this->biquad_tilde_02_y2 = 0;
}

void biquad_tilde_02_dspsetup(bool force) {
    if ((bool)(this->biquad_tilde_02_setupDone) && (bool)(!(bool)(force)))
        return;

    this->biquad_tilde_02_reset();
    this->biquad_tilde_02_setupDone = true;
}

void biquad_tilde_03_reset() {
    this->biquad_tilde_03_x1 = 0;
    this->biquad_tilde_03_x2 = 0;
    this->biquad_tilde_03_y1 = 0;
    this->biquad_tilde_03_y2 = 0;
}

void biquad_tilde_03_dspsetup(bool force) {
    if ((bool)(this->biquad_tilde_03_setupDone) && (bool)(!(bool)(force)))
        return;

    this->biquad_tilde_03_reset();
    this->biquad_tilde_03_setupDone = true;
}

void ip_04_init() {
    this->ip_04_lastValue = this->ip_04_value;
}

void ip_04_fillSigBuf() {
    if ((bool)(this->ip_04_sigbuf)) {
        SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);

        if (k >= (SampleIndex)(this->vs))
            k = (SampleIndex)(this->vs) - 1;

        for (SampleIndex i = (SampleIndex)(this->ip_04_lastIndex); i < k; i++) {
            if (this->ip_04_resetCount > 0) {
                this->ip_04_sigbuf[(Index)i] = 1;
                this->ip_04_resetCount--;
            } else {
                this->ip_04_sigbuf[(Index)i] = this->ip_04_lastValue;
            }
        }

        this->ip_04_lastIndex = k;
    }
}

void ip_04_dspsetup(bool force) {
    if ((bool)(this->ip_04_setupDone) && (bool)(!(bool)(force)))
        return;

    this->ip_04_lastIndex = 0;
    this->ip_04_setupDone = true;
}

void numberobj_32_init() {
    this->numberobj_32_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-192"), 1, this->_currentTime);
}

void numberobj_32_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_32_value;
}

void numberobj_32_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_32_value_set(preset["value"]);
}

void message_14_init() {
    this->message_14_set_set({1});
}

array<number, 5> filtercoeff_03_localop_next(number frequency, number q, number gain, number type) {
    number omega = frequency * this->filtercoeff_03_localop_twopi_over_sr;
    this->filtercoeff_03_localop_cs = rnbo_cos(omega);
    this->filtercoeff_03_localop_sn = rnbo_sin(omega);
    this->filtercoeff_03_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
    this->filtercoeff_03_localop_one_over_q = (number)1 / q;
    this->filtercoeff_03_localop_alpha = this->filtercoeff_03_localop_sn * 0.5 * this->filtercoeff_03_localop_one_over_q;

    switch ((int)type) {
    case 5:
        {
        this->filtercoeff_03_localop_A = this->safesqrt(gain);

        this->filtercoeff_03_localop_beta = this->safesqrt(
            (this->filtercoeff_03_localop_A * this->filtercoeff_03_localop_A + 1.) * this->filtercoeff_03_localop_one_over_q - (this->filtercoeff_03_localop_A - 1.) * (this->filtercoeff_03_localop_A - 1.)
        );

        this->filtercoeff_03_localop_b0 = (number)1 / (this->filtercoeff_03_localop_A + 1. + (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs + this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn);
        break;
        }
    case 6:
        {
        this->filtercoeff_03_localop_A = this->safesqrt(gain);

        this->filtercoeff_03_localop_beta = this->safesqrt(
            (this->filtercoeff_03_localop_A * this->filtercoeff_03_localop_A + 1.) * this->filtercoeff_03_localop_one_over_q - (this->filtercoeff_03_localop_A - 1.) * (this->filtercoeff_03_localop_A - 1.)
        );

        this->filtercoeff_03_localop_b0 = (number)1 / (this->filtercoeff_03_localop_A + 1. - (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs + this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn);
        break;
        }
    case 4:
        {
        this->filtercoeff_03_localop_A = this->safesqrt(gain);
        this->filtercoeff_03_localop_one_over_a = (this->filtercoeff_03_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_03_localop_A);
        this->filtercoeff_03_localop_b0 = (number)1 / (1. + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_a);
        break;
        }
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
        {
        this->filtercoeff_03_localop_b0 = (number)1 / (1. + this->filtercoeff_03_localop_alpha);
        this->filtercoeff_03_localop_b0g = (number)1 / (this->filtercoeff_03_localop_one_over_gain + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_gain);
        break;
        }
    default:
        {
        this->filtercoeff_03_localop_b0 = (number)1 / (1. + this->filtercoeff_03_localop_alpha);
        break;
        }
    }

    switch ((int)type) {
    case 0:
        {
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_la2 = (1. - this->filtercoeff_03_localop_cs) * 0.5 * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la1 = (1. - this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 1:
        {
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_la2 = (1. + this->filtercoeff_03_localop_cs) * 0.5 * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la1 = -(1. + this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 2:
        {
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la1 = 0.;
        this->filtercoeff_03_localop_la2 = -this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 7:
        {
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_alpha * q * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la1 = 0.;
        this->filtercoeff_03_localop_la2 = -this->filtercoeff_03_localop_alpha * q * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 3:
        {
        this->filtercoeff_03_localop_la1 = this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_la2 = this->filtercoeff_03_localop_b0;
        break;
        }
    case 8:
        {
        this->filtercoeff_03_localop_la1 = this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = this->filtercoeff_03_localop_la0 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la2 = 1.0;
        break;
        }
    case 4:
        {
        this->filtercoeff_03_localop_la0 = (1. + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_A) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la1 = this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la2 = (1. - this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_A) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_a) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 5:
        {
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A + 1. - (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs + this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la1 = 2. * this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A - 1 - (this->filtercoeff_03_localop_A + 1) * this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la2 = this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A + 1. - (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs - this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb1 = -2. * (this->filtercoeff_03_localop_A - 1. + (this->filtercoeff_03_localop_A + 1.) * this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (this->filtercoeff_03_localop_A + 1. + (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs - this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 6:
        {
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A + 1. + (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs + this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la1 = -2. * this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A - 1. + (this->filtercoeff_03_localop_A + 1.) * this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la2 = this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A + 1. + (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs - this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb1 = 2. * (this->filtercoeff_03_localop_A - 1. - (this->filtercoeff_03_localop_A + 1.) * this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (this->filtercoeff_03_localop_A + 1. - (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs - this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 9:
        {
        this->filtercoeff_03_localop_b0g = (number)1 / (this->filtercoeff_03_localop_one_over_gain + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_gain);
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_la2 = (1. - this->filtercoeff_03_localop_cs) * 0.5 * this->filtercoeff_03_localop_b0g;
        this->filtercoeff_03_localop_la1 = (1. - this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0g;
        this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 10:
        {
        this->filtercoeff_03_localop_b0g = (number)1 / (this->filtercoeff_03_localop_one_over_gain + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_gain);
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_la2 = (1. + this->filtercoeff_03_localop_cs) * 0.5 * this->filtercoeff_03_localop_b0g;
        this->filtercoeff_03_localop_la1 = -(1. + this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0g;
        this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 11:
        {
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_alpha * gain * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la1 = 0.;
        this->filtercoeff_03_localop_la2 = -this->filtercoeff_03_localop_alpha * gain * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 13:
        {
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_alpha * gain * q * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la1 = 0.;
        this->filtercoeff_03_localop_la2 = -this->filtercoeff_03_localop_alpha * gain * q * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 12:
        {
        this->filtercoeff_03_localop_b0g = (number)1 / (this->filtercoeff_03_localop_one_over_gain + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_gain);
        this->filtercoeff_03_localop_la1 = this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la1 *= this->filtercoeff_03_localop_b0g;
        this->filtercoeff_03_localop_lb1 *= this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_b0g;
        this->filtercoeff_03_localop_la2 = this->filtercoeff_03_localop_b0g;
        break;
        }
    case 14:
        {
        this->filtercoeff_03_localop_b0g = (number)1 / (this->filtercoeff_03_localop_one_over_gain + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_gain);
        this->filtercoeff_03_localop_la0 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0g;
        this->filtercoeff_03_localop_la1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0g;
        this->filtercoeff_03_localop_la2 = gain;
        this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
        this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
        break;
        }
    case 15:
        {
        this->filtercoeff_03_localop_la0 = 1;
        this->filtercoeff_03_localop_la1 = 0;
        this->filtercoeff_03_localop_la2 = 0;
        this->filtercoeff_03_localop_lb1 = 0;
        this->filtercoeff_03_localop_lb2 = 0;
        }
    default:
        {
        break;
        }
    }

    return {
        this->filtercoeff_03_localop_la0,
        this->filtercoeff_03_localop_la1,
        this->filtercoeff_03_localop_la2,
        this->filtercoeff_03_localop_lb1,
        this->filtercoeff_03_localop_lb2
    };
}

void filtercoeff_03_localop_dspsetup() {
    this->filtercoeff_03_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
}

void filtercoeff_03_localop_reset() {
    this->filtercoeff_03_localop_twopi_over_sr = 0;
    this->filtercoeff_03_localop_cs = 0;
    this->filtercoeff_03_localop_sn = 0;
    this->filtercoeff_03_localop_one_over_gain = 0;
    this->filtercoeff_03_localop_one_over_q = 0;
    this->filtercoeff_03_localop_alpha = 0;
    this->filtercoeff_03_localop_beta = 0;
    this->filtercoeff_03_localop_b0 = 0;
    this->filtercoeff_03_localop_b0g = 0;
    this->filtercoeff_03_localop_A = 0;
    this->filtercoeff_03_localop_one_over_a = 0;
    this->filtercoeff_03_localop_la0 = 0;
    this->filtercoeff_03_localop_la1 = 0;
    this->filtercoeff_03_localop_la2 = 0;
    this->filtercoeff_03_localop_lb1 = 0;
    this->filtercoeff_03_localop_lb2 = 0;
}

void filtercoeff_03_updateTerms(number local_frequency, number local_gain, number local_q) {
    if ((bool)(this->filtercoeff_03_force_update) || local_frequency != this->filtercoeff_03_last_frequency || local_q != this->filtercoeff_03_last_q || local_gain != this->filtercoeff_03_last_gain || this->filtercoeff_03_type != this->filtercoeff_03_last_type) {
        array<number, 5> tmp = this->filtercoeff_03_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_03_type);
        this->filtercoeff_03_la0 = tmp[0];
        this->filtercoeff_03_la1 = tmp[1];
        this->filtercoeff_03_la2 = tmp[2];
        this->filtercoeff_03_lb1 = tmp[3];
        this->filtercoeff_03_lb2 = tmp[4];
        this->filtercoeff_03_last_frequency = local_frequency;
        this->filtercoeff_03_last_q = local_q;
        this->filtercoeff_03_last_gain = local_gain;
        this->filtercoeff_03_last_type = this->filtercoeff_03_type;
        this->filtercoeff_03_force_update = false;
    }
}

void filtercoeff_03_dspsetup(bool force) {
    if ((bool)(this->filtercoeff_03_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->filtercoeff_03_activeResamp = this->vectorsize();
    }

    this->filtercoeff_03_resamp_counter = 0;
    this->filtercoeff_03_la0 = 0.;
    this->filtercoeff_03_la1 = 0.;
    this->filtercoeff_03_la2 = 0.;
    this->filtercoeff_03_lb1 = 0.;
    this->filtercoeff_03_lb2 = 0.;
    this->filtercoeff_03_last_frequency = -1.;
    this->filtercoeff_03_last_q = -1.;
    this->filtercoeff_03_last_gain = -1.;
    this->filtercoeff_03_last_type = this->filtercoeff_03_type;
    this->filtercoeff_03_force_update = true;
    this->filtercoeff_03_setupDone = true;
    this->filtercoeff_03_localop_dspsetup();
}

array<number, 5> filtercoeff_04_localop_next(number frequency, number q, number gain, number type) {
    number omega = frequency * this->filtercoeff_04_localop_twopi_over_sr;
    this->filtercoeff_04_localop_cs = rnbo_cos(omega);
    this->filtercoeff_04_localop_sn = rnbo_sin(omega);
    this->filtercoeff_04_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
    this->filtercoeff_04_localop_one_over_q = (number)1 / q;
    this->filtercoeff_04_localop_alpha = this->filtercoeff_04_localop_sn * 0.5 * this->filtercoeff_04_localop_one_over_q;

    switch ((int)type) {
    case 5:
        {
        this->filtercoeff_04_localop_A = this->safesqrt(gain);

        this->filtercoeff_04_localop_beta = this->safesqrt(
            (this->filtercoeff_04_localop_A * this->filtercoeff_04_localop_A + 1.) * this->filtercoeff_04_localop_one_over_q - (this->filtercoeff_04_localop_A - 1.) * (this->filtercoeff_04_localop_A - 1.)
        );

        this->filtercoeff_04_localop_b0 = (number)1 / (this->filtercoeff_04_localop_A + 1. + (this->filtercoeff_04_localop_A - 1.) * this->filtercoeff_04_localop_cs + this->filtercoeff_04_localop_beta * this->filtercoeff_04_localop_sn);
        break;
        }
    case 6:
        {
        this->filtercoeff_04_localop_A = this->safesqrt(gain);

        this->filtercoeff_04_localop_beta = this->safesqrt(
            (this->filtercoeff_04_localop_A * this->filtercoeff_04_localop_A + 1.) * this->filtercoeff_04_localop_one_over_q - (this->filtercoeff_04_localop_A - 1.) * (this->filtercoeff_04_localop_A - 1.)
        );

        this->filtercoeff_04_localop_b0 = (number)1 / (this->filtercoeff_04_localop_A + 1. - (this->filtercoeff_04_localop_A - 1.) * this->filtercoeff_04_localop_cs + this->filtercoeff_04_localop_beta * this->filtercoeff_04_localop_sn);
        break;
        }
    case 4:
        {
        this->filtercoeff_04_localop_A = this->safesqrt(gain);
        this->filtercoeff_04_localop_one_over_a = (this->filtercoeff_04_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_04_localop_A);
        this->filtercoeff_04_localop_b0 = (number)1 / (1. + this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_one_over_a);
        break;
        }
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
        {
        this->filtercoeff_04_localop_b0 = (number)1 / (1. + this->filtercoeff_04_localop_alpha);
        this->filtercoeff_04_localop_b0g = (number)1 / (this->filtercoeff_04_localop_one_over_gain + this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_one_over_gain);
        break;
        }
    default:
        {
        this->filtercoeff_04_localop_b0 = (number)1 / (1. + this->filtercoeff_04_localop_alpha);
        break;
        }
    }

    switch ((int)type) {
    case 0:
        {
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_la2 = (1. - this->filtercoeff_04_localop_cs) * 0.5 * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la1 = (1. - this->filtercoeff_04_localop_cs) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 1:
        {
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_la2 = (1. + this->filtercoeff_04_localop_cs) * 0.5 * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la1 = -(1. + this->filtercoeff_04_localop_cs) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 2:
        {
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la1 = 0.;
        this->filtercoeff_04_localop_la2 = -this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 7:
        {
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_alpha * q * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la1 = 0.;
        this->filtercoeff_04_localop_la2 = -this->filtercoeff_04_localop_alpha * q * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 3:
        {
        this->filtercoeff_04_localop_la1 = this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_la2 = this->filtercoeff_04_localop_b0;
        break;
        }
    case 8:
        {
        this->filtercoeff_04_localop_la1 = this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = this->filtercoeff_04_localop_la0 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la2 = 1.0;
        break;
        }
    case 4:
        {
        this->filtercoeff_04_localop_la0 = (1. + this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_A) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la1 = this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la2 = (1. - this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_A) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_one_over_a) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 5:
        {
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_A * (this->filtercoeff_04_localop_A + 1. - (this->filtercoeff_04_localop_A - 1.) * this->filtercoeff_04_localop_cs + this->filtercoeff_04_localop_beta * this->filtercoeff_04_localop_sn) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la1 = 2. * this->filtercoeff_04_localop_A * (this->filtercoeff_04_localop_A - 1 - (this->filtercoeff_04_localop_A + 1) * this->filtercoeff_04_localop_cs) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la2 = this->filtercoeff_04_localop_A * (this->filtercoeff_04_localop_A + 1. - (this->filtercoeff_04_localop_A - 1.) * this->filtercoeff_04_localop_cs - this->filtercoeff_04_localop_beta * this->filtercoeff_04_localop_sn) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb1 = -2. * (this->filtercoeff_04_localop_A - 1. + (this->filtercoeff_04_localop_A + 1.) * this->filtercoeff_04_localop_cs) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (this->filtercoeff_04_localop_A + 1. + (this->filtercoeff_04_localop_A - 1.) * this->filtercoeff_04_localop_cs - this->filtercoeff_04_localop_beta * this->filtercoeff_04_localop_sn) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 6:
        {
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_A * (this->filtercoeff_04_localop_A + 1. + (this->filtercoeff_04_localop_A - 1.) * this->filtercoeff_04_localop_cs + this->filtercoeff_04_localop_beta * this->filtercoeff_04_localop_sn) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la1 = -2. * this->filtercoeff_04_localop_A * (this->filtercoeff_04_localop_A - 1. + (this->filtercoeff_04_localop_A + 1.) * this->filtercoeff_04_localop_cs) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la2 = this->filtercoeff_04_localop_A * (this->filtercoeff_04_localop_A + 1. + (this->filtercoeff_04_localop_A - 1.) * this->filtercoeff_04_localop_cs - this->filtercoeff_04_localop_beta * this->filtercoeff_04_localop_sn) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb1 = 2. * (this->filtercoeff_04_localop_A - 1. - (this->filtercoeff_04_localop_A + 1.) * this->filtercoeff_04_localop_cs) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (this->filtercoeff_04_localop_A + 1. - (this->filtercoeff_04_localop_A - 1.) * this->filtercoeff_04_localop_cs - this->filtercoeff_04_localop_beta * this->filtercoeff_04_localop_sn) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 9:
        {
        this->filtercoeff_04_localop_b0g = (number)1 / (this->filtercoeff_04_localop_one_over_gain + this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_one_over_gain);
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_la2 = (1. - this->filtercoeff_04_localop_cs) * 0.5 * this->filtercoeff_04_localop_b0g;
        this->filtercoeff_04_localop_la1 = (1. - this->filtercoeff_04_localop_cs) * this->filtercoeff_04_localop_b0g;
        this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 10:
        {
        this->filtercoeff_04_localop_b0g = (number)1 / (this->filtercoeff_04_localop_one_over_gain + this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_one_over_gain);
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_la2 = (1. + this->filtercoeff_04_localop_cs) * 0.5 * this->filtercoeff_04_localop_b0g;
        this->filtercoeff_04_localop_la1 = -(1. + this->filtercoeff_04_localop_cs) * this->filtercoeff_04_localop_b0g;
        this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 11:
        {
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_alpha * gain * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la1 = 0.;
        this->filtercoeff_04_localop_la2 = -this->filtercoeff_04_localop_alpha * gain * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 13:
        {
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_alpha * gain * q * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la1 = 0.;
        this->filtercoeff_04_localop_la2 = -this->filtercoeff_04_localop_alpha * gain * q * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 12:
        {
        this->filtercoeff_04_localop_b0g = (number)1 / (this->filtercoeff_04_localop_one_over_gain + this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_one_over_gain);
        this->filtercoeff_04_localop_la1 = this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la1 *= this->filtercoeff_04_localop_b0g;
        this->filtercoeff_04_localop_lb1 *= this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_la0 = this->filtercoeff_04_localop_b0g;
        this->filtercoeff_04_localop_la2 = this->filtercoeff_04_localop_b0g;
        break;
        }
    case 14:
        {
        this->filtercoeff_04_localop_b0g = (number)1 / (this->filtercoeff_04_localop_one_over_gain + this->filtercoeff_04_localop_alpha * this->filtercoeff_04_localop_one_over_gain);
        this->filtercoeff_04_localop_la0 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0g;
        this->filtercoeff_04_localop_la1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0g;
        this->filtercoeff_04_localop_la2 = gain;
        this->filtercoeff_04_localop_lb1 = -2. * this->filtercoeff_04_localop_cs * this->filtercoeff_04_localop_b0;
        this->filtercoeff_04_localop_lb2 = (1. - this->filtercoeff_04_localop_alpha) * this->filtercoeff_04_localop_b0;
        break;
        }
    case 15:
        {
        this->filtercoeff_04_localop_la0 = 1;
        this->filtercoeff_04_localop_la1 = 0;
        this->filtercoeff_04_localop_la2 = 0;
        this->filtercoeff_04_localop_lb1 = 0;
        this->filtercoeff_04_localop_lb2 = 0;
        }
    default:
        {
        break;
        }
    }

    return {
        this->filtercoeff_04_localop_la0,
        this->filtercoeff_04_localop_la1,
        this->filtercoeff_04_localop_la2,
        this->filtercoeff_04_localop_lb1,
        this->filtercoeff_04_localop_lb2
    };
}

void filtercoeff_04_localop_dspsetup() {
    this->filtercoeff_04_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
}

void filtercoeff_04_localop_reset() {
    this->filtercoeff_04_localop_twopi_over_sr = 0;
    this->filtercoeff_04_localop_cs = 0;
    this->filtercoeff_04_localop_sn = 0;
    this->filtercoeff_04_localop_one_over_gain = 0;
    this->filtercoeff_04_localop_one_over_q = 0;
    this->filtercoeff_04_localop_alpha = 0;
    this->filtercoeff_04_localop_beta = 0;
    this->filtercoeff_04_localop_b0 = 0;
    this->filtercoeff_04_localop_b0g = 0;
    this->filtercoeff_04_localop_A = 0;
    this->filtercoeff_04_localop_one_over_a = 0;
    this->filtercoeff_04_localop_la0 = 0;
    this->filtercoeff_04_localop_la1 = 0;
    this->filtercoeff_04_localop_la2 = 0;
    this->filtercoeff_04_localop_lb1 = 0;
    this->filtercoeff_04_localop_lb2 = 0;
}

void filtercoeff_04_updateTerms(number local_frequency, number local_gain, number local_q) {
    if ((bool)(this->filtercoeff_04_force_update) || local_frequency != this->filtercoeff_04_last_frequency || local_q != this->filtercoeff_04_last_q || local_gain != this->filtercoeff_04_last_gain || this->filtercoeff_04_type != this->filtercoeff_04_last_type) {
        array<number, 5> tmp = this->filtercoeff_04_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_04_type);
        this->filtercoeff_04_la0 = tmp[0];
        this->filtercoeff_04_la1 = tmp[1];
        this->filtercoeff_04_la2 = tmp[2];
        this->filtercoeff_04_lb1 = tmp[3];
        this->filtercoeff_04_lb2 = tmp[4];
        this->filtercoeff_04_last_frequency = local_frequency;
        this->filtercoeff_04_last_q = local_q;
        this->filtercoeff_04_last_gain = local_gain;
        this->filtercoeff_04_last_type = this->filtercoeff_04_type;
        this->filtercoeff_04_force_update = false;
    }
}

void filtercoeff_04_dspsetup(bool force) {
    if ((bool)(this->filtercoeff_04_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->filtercoeff_04_activeResamp = this->vectorsize();
    }

    this->filtercoeff_04_resamp_counter = 0;
    this->filtercoeff_04_la0 = 0.;
    this->filtercoeff_04_la1 = 0.;
    this->filtercoeff_04_la2 = 0.;
    this->filtercoeff_04_lb1 = 0.;
    this->filtercoeff_04_lb2 = 0.;
    this->filtercoeff_04_last_frequency = -1.;
    this->filtercoeff_04_last_q = -1.;
    this->filtercoeff_04_last_gain = -1.;
    this->filtercoeff_04_last_type = this->filtercoeff_04_type;
    this->filtercoeff_04_force_update = true;
    this->filtercoeff_04_setupDone = true;
    this->filtercoeff_04_localop_dspsetup();
}

number numbertilde_26_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_26_smooth_d_prev);
    this->numbertilde_26_smooth_d_prev = x;
    return temp;
}

void numbertilde_26_smooth_d_dspsetup() {
    this->numbertilde_26_smooth_d_reset();
}

void numbertilde_26_smooth_d_reset() {
    this->numbertilde_26_smooth_d_prev = 0;
}

number numbertilde_26_smooth_next(number x, number up, number down) {
    if (this->numbertilde_26_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_26_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_26_smooth_index = _up;
            this->numbertilde_26_smooth_increment = (x - this->numbertilde_26_smooth_prev) / _up;
        } else if (x < this->numbertilde_26_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_26_smooth_index = _down;
            this->numbertilde_26_smooth_increment = (x - this->numbertilde_26_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_26_smooth_index > 0) {
        this->numbertilde_26_smooth_prev += this->numbertilde_26_smooth_increment;
        this->numbertilde_26_smooth_index -= 1;
    } else {
        this->numbertilde_26_smooth_prev = x;
    }

    return this->numbertilde_26_smooth_prev;
}

void numbertilde_26_smooth_reset() {
    this->numbertilde_26_smooth_prev = 0;
    this->numbertilde_26_smooth_index = 0;
    this->numbertilde_26_smooth_increment = 0;
    this->numbertilde_26_smooth_d_reset();
}

void numbertilde_26_init() {
    this->numbertilde_26_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-92"), 1, this->_currentTime);
}

void numbertilde_26_dspsetup(bool force) {
    if ((bool)(this->numbertilde_26_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_26_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_26_currentInterval = this->numbertilde_26_currentIntervalInSamples;
    this->numbertilde_26_rampInSamples = this->mstosamps(this->numbertilde_26_ramp);
    this->numbertilde_26_setupDone = true;
    this->numbertilde_26_smooth_d_dspsetup();
}

number numbertilde_27_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_27_smooth_d_prev);
    this->numbertilde_27_smooth_d_prev = x;
    return temp;
}

void numbertilde_27_smooth_d_dspsetup() {
    this->numbertilde_27_smooth_d_reset();
}

void numbertilde_27_smooth_d_reset() {
    this->numbertilde_27_smooth_d_prev = 0;
}

number numbertilde_27_smooth_next(number x, number up, number down) {
    if (this->numbertilde_27_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_27_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_27_smooth_index = _up;
            this->numbertilde_27_smooth_increment = (x - this->numbertilde_27_smooth_prev) / _up;
        } else if (x < this->numbertilde_27_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_27_smooth_index = _down;
            this->numbertilde_27_smooth_increment = (x - this->numbertilde_27_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_27_smooth_index > 0) {
        this->numbertilde_27_smooth_prev += this->numbertilde_27_smooth_increment;
        this->numbertilde_27_smooth_index -= 1;
    } else {
        this->numbertilde_27_smooth_prev = x;
    }

    return this->numbertilde_27_smooth_prev;
}

void numbertilde_27_smooth_reset() {
    this->numbertilde_27_smooth_prev = 0;
    this->numbertilde_27_smooth_index = 0;
    this->numbertilde_27_smooth_increment = 0;
    this->numbertilde_27_smooth_d_reset();
}

void numbertilde_27_init() {
    this->numbertilde_27_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-73"), 1, this->_currentTime);
}

void numbertilde_27_dspsetup(bool force) {
    if ((bool)(this->numbertilde_27_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_27_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_27_currentInterval = this->numbertilde_27_currentIntervalInSamples;
    this->numbertilde_27_rampInSamples = this->mstosamps(this->numbertilde_27_ramp);
    this->numbertilde_27_setupDone = true;
    this->numbertilde_27_smooth_d_dspsetup();
}

number numbertilde_28_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_28_smooth_d_prev);
    this->numbertilde_28_smooth_d_prev = x;
    return temp;
}

void numbertilde_28_smooth_d_dspsetup() {
    this->numbertilde_28_smooth_d_reset();
}

void numbertilde_28_smooth_d_reset() {
    this->numbertilde_28_smooth_d_prev = 0;
}

number numbertilde_28_smooth_next(number x, number up, number down) {
    if (this->numbertilde_28_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_28_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_28_smooth_index = _up;
            this->numbertilde_28_smooth_increment = (x - this->numbertilde_28_smooth_prev) / _up;
        } else if (x < this->numbertilde_28_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_28_smooth_index = _down;
            this->numbertilde_28_smooth_increment = (x - this->numbertilde_28_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_28_smooth_index > 0) {
        this->numbertilde_28_smooth_prev += this->numbertilde_28_smooth_increment;
        this->numbertilde_28_smooth_index -= 1;
    } else {
        this->numbertilde_28_smooth_prev = x;
    }

    return this->numbertilde_28_smooth_prev;
}

void numbertilde_28_smooth_reset() {
    this->numbertilde_28_smooth_prev = 0;
    this->numbertilde_28_smooth_index = 0;
    this->numbertilde_28_smooth_increment = 0;
    this->numbertilde_28_smooth_d_reset();
}

void numbertilde_28_init() {
    this->numbertilde_28_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-102"), 1, this->_currentTime);
}

void numbertilde_28_dspsetup(bool force) {
    if ((bool)(this->numbertilde_28_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_28_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_28_currentInterval = this->numbertilde_28_currentIntervalInSamples;
    this->numbertilde_28_rampInSamples = this->mstosamps(this->numbertilde_28_ramp);
    this->numbertilde_28_setupDone = true;
    this->numbertilde_28_smooth_d_dspsetup();
}

void message_15_init() {
    this->message_15_set_set({270});
}

void message_16_init() {
    this->message_16_set_set({5000});
}

void numberobj_33_init() {
    this->numberobj_33_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-130"), 1, this->_currentTime);
}

void numberobj_33_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_33_value;
}

void numberobj_33_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_33_value_set(preset["value"]);
}

void numberobj_34_init() {
    this->numberobj_34_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-230"), 1, this->_currentTime);
}

void numberobj_34_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_34_value;
}

void numberobj_34_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_34_value_set(preset["value"]);
}

void param_08_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_08_value;
}

void param_08_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_08_value_set(preset["value"]);
}

void numberobj_35_init() {
    this->numberobj_35_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-223"), 1, this->_currentTime);
}

void numberobj_35_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_35_value;
}

void numberobj_35_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_35_value_set(preset["value"]);
}

void numberobj_36_init() {
    this->numberobj_36_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-224"), 1, this->_currentTime);
}

void numberobj_36_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_36_value;
}

void numberobj_36_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_36_value_set(preset["value"]);
}

number numbertilde_29_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_29_smooth_d_prev);
    this->numbertilde_29_smooth_d_prev = x;
    return temp;
}

void numbertilde_29_smooth_d_dspsetup() {
    this->numbertilde_29_smooth_d_reset();
}

void numbertilde_29_smooth_d_reset() {
    this->numbertilde_29_smooth_d_prev = 0;
}

number numbertilde_29_smooth_next(number x, number up, number down) {
    if (this->numbertilde_29_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_29_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_29_smooth_index = _up;
            this->numbertilde_29_smooth_increment = (x - this->numbertilde_29_smooth_prev) / _up;
        } else if (x < this->numbertilde_29_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_29_smooth_index = _down;
            this->numbertilde_29_smooth_increment = (x - this->numbertilde_29_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_29_smooth_index > 0) {
        this->numbertilde_29_smooth_prev += this->numbertilde_29_smooth_increment;
        this->numbertilde_29_smooth_index -= 1;
    } else {
        this->numbertilde_29_smooth_prev = x;
    }

    return this->numbertilde_29_smooth_prev;
}

void numbertilde_29_smooth_reset() {
    this->numbertilde_29_smooth_prev = 0;
    this->numbertilde_29_smooth_index = 0;
    this->numbertilde_29_smooth_increment = 0;
    this->numbertilde_29_smooth_d_reset();
}

void numbertilde_29_init() {
    this->numbertilde_29_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-93"), 1, this->_currentTime);
}

void numbertilde_29_dspsetup(bool force) {
    if ((bool)(this->numbertilde_29_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_29_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_29_currentInterval = this->numbertilde_29_currentIntervalInSamples;
    this->numbertilde_29_rampInSamples = this->mstosamps(this->numbertilde_29_ramp);
    this->numbertilde_29_setupDone = true;
    this->numbertilde_29_smooth_d_dspsetup();
}

number numbertilde_30_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_30_smooth_d_prev);
    this->numbertilde_30_smooth_d_prev = x;
    return temp;
}

void numbertilde_30_smooth_d_dspsetup() {
    this->numbertilde_30_smooth_d_reset();
}

void numbertilde_30_smooth_d_reset() {
    this->numbertilde_30_smooth_d_prev = 0;
}

number numbertilde_30_smooth_next(number x, number up, number down) {
    if (this->numbertilde_30_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_30_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_30_smooth_index = _up;
            this->numbertilde_30_smooth_increment = (x - this->numbertilde_30_smooth_prev) / _up;
        } else if (x < this->numbertilde_30_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_30_smooth_index = _down;
            this->numbertilde_30_smooth_increment = (x - this->numbertilde_30_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_30_smooth_index > 0) {
        this->numbertilde_30_smooth_prev += this->numbertilde_30_smooth_increment;
        this->numbertilde_30_smooth_index -= 1;
    } else {
        this->numbertilde_30_smooth_prev = x;
    }

    return this->numbertilde_30_smooth_prev;
}

void numbertilde_30_smooth_reset() {
    this->numbertilde_30_smooth_prev = 0;
    this->numbertilde_30_smooth_index = 0;
    this->numbertilde_30_smooth_increment = 0;
    this->numbertilde_30_smooth_d_reset();
}

void numbertilde_30_init() {
    this->numbertilde_30_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-74"), 1, this->_currentTime);
}

void numbertilde_30_dspsetup(bool force) {
    if ((bool)(this->numbertilde_30_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_30_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_30_currentInterval = this->numbertilde_30_currentIntervalInSamples;
    this->numbertilde_30_rampInSamples = this->mstosamps(this->numbertilde_30_ramp);
    this->numbertilde_30_setupDone = true;
    this->numbertilde_30_smooth_d_dspsetup();
}

void message_17_init() {
    this->message_17_set_set({1});
}

void param_09_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_09_value;
}

void param_09_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_09_value_set(preset["value"]);
}

number numbertilde_31_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_31_smooth_d_prev);
    this->numbertilde_31_smooth_d_prev = x;
    return temp;
}

void numbertilde_31_smooth_d_dspsetup() {
    this->numbertilde_31_smooth_d_reset();
}

void numbertilde_31_smooth_d_reset() {
    this->numbertilde_31_smooth_d_prev = 0;
}

number numbertilde_31_smooth_next(number x, number up, number down) {
    if (this->numbertilde_31_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_31_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_31_smooth_index = _up;
            this->numbertilde_31_smooth_increment = (x - this->numbertilde_31_smooth_prev) / _up;
        } else if (x < this->numbertilde_31_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_31_smooth_index = _down;
            this->numbertilde_31_smooth_increment = (x - this->numbertilde_31_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_31_smooth_index > 0) {
        this->numbertilde_31_smooth_prev += this->numbertilde_31_smooth_increment;
        this->numbertilde_31_smooth_index -= 1;
    } else {
        this->numbertilde_31_smooth_prev = x;
    }

    return this->numbertilde_31_smooth_prev;
}

void numbertilde_31_smooth_reset() {
    this->numbertilde_31_smooth_prev = 0;
    this->numbertilde_31_smooth_index = 0;
    this->numbertilde_31_smooth_increment = 0;
    this->numbertilde_31_smooth_d_reset();
}

void numbertilde_31_init() {
    this->numbertilde_31_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-99"), 1, this->_currentTime);
}

void numbertilde_31_dspsetup(bool force) {
    if ((bool)(this->numbertilde_31_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_31_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_31_currentInterval = this->numbertilde_31_currentIntervalInSamples;
    this->numbertilde_31_rampInSamples = this->mstosamps(this->numbertilde_31_ramp);
    this->numbertilde_31_setupDone = true;
    this->numbertilde_31_smooth_d_dspsetup();
}

number numbertilde_32_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_32_smooth_d_prev);
    this->numbertilde_32_smooth_d_prev = x;
    return temp;
}

void numbertilde_32_smooth_d_dspsetup() {
    this->numbertilde_32_smooth_d_reset();
}

void numbertilde_32_smooth_d_reset() {
    this->numbertilde_32_smooth_d_prev = 0;
}

number numbertilde_32_smooth_next(number x, number up, number down) {
    if (this->numbertilde_32_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_32_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_32_smooth_index = _up;
            this->numbertilde_32_smooth_increment = (x - this->numbertilde_32_smooth_prev) / _up;
        } else if (x < this->numbertilde_32_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_32_smooth_index = _down;
            this->numbertilde_32_smooth_increment = (x - this->numbertilde_32_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_32_smooth_index > 0) {
        this->numbertilde_32_smooth_prev += this->numbertilde_32_smooth_increment;
        this->numbertilde_32_smooth_index -= 1;
    } else {
        this->numbertilde_32_smooth_prev = x;
    }

    return this->numbertilde_32_smooth_prev;
}

void numbertilde_32_smooth_reset() {
    this->numbertilde_32_smooth_prev = 0;
    this->numbertilde_32_smooth_index = 0;
    this->numbertilde_32_smooth_increment = 0;
    this->numbertilde_32_smooth_d_reset();
}

void numbertilde_32_init() {
    this->numbertilde_32_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-80"), 1, this->_currentTime);
}

void numbertilde_32_dspsetup(bool force) {
    if ((bool)(this->numbertilde_32_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_32_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_32_currentInterval = this->numbertilde_32_currentIntervalInSamples;
    this->numbertilde_32_rampInSamples = this->mstosamps(this->numbertilde_32_ramp);
    this->numbertilde_32_setupDone = true;
    this->numbertilde_32_smooth_d_dspsetup();
}

void message_18_init() {
    this->message_18_set_set({0.25, 0.5, 1, 2, 3, 4});
}

number numbertilde_33_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_33_smooth_d_prev);
    this->numbertilde_33_smooth_d_prev = x;
    return temp;
}

void numbertilde_33_smooth_d_dspsetup() {
    this->numbertilde_33_smooth_d_reset();
}

void numbertilde_33_smooth_d_reset() {
    this->numbertilde_33_smooth_d_prev = 0;
}

number numbertilde_33_smooth_next(number x, number up, number down) {
    if (this->numbertilde_33_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_33_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_33_smooth_index = _up;
            this->numbertilde_33_smooth_increment = (x - this->numbertilde_33_smooth_prev) / _up;
        } else if (x < this->numbertilde_33_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_33_smooth_index = _down;
            this->numbertilde_33_smooth_increment = (x - this->numbertilde_33_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_33_smooth_index > 0) {
        this->numbertilde_33_smooth_prev += this->numbertilde_33_smooth_increment;
        this->numbertilde_33_smooth_index -= 1;
    } else {
        this->numbertilde_33_smooth_prev = x;
    }

    return this->numbertilde_33_smooth_prev;
}

void numbertilde_33_smooth_reset() {
    this->numbertilde_33_smooth_prev = 0;
    this->numbertilde_33_smooth_index = 0;
    this->numbertilde_33_smooth_increment = 0;
    this->numbertilde_33_smooth_d_reset();
}

void numbertilde_33_init() {
    this->numbertilde_33_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-91"), 1, this->_currentTime);
}

void numbertilde_33_dspsetup(bool force) {
    if ((bool)(this->numbertilde_33_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_33_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_33_currentInterval = this->numbertilde_33_currentIntervalInSamples;
    this->numbertilde_33_rampInSamples = this->mstosamps(this->numbertilde_33_ramp);
    this->numbertilde_33_setupDone = true;
    this->numbertilde_33_smooth_d_dspsetup();
}

number numbertilde_34_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_34_smooth_d_prev);
    this->numbertilde_34_smooth_d_prev = x;
    return temp;
}

void numbertilde_34_smooth_d_dspsetup() {
    this->numbertilde_34_smooth_d_reset();
}

void numbertilde_34_smooth_d_reset() {
    this->numbertilde_34_smooth_d_prev = 0;
}

number numbertilde_34_smooth_next(number x, number up, number down) {
    if (this->numbertilde_34_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_34_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_34_smooth_index = _up;
            this->numbertilde_34_smooth_increment = (x - this->numbertilde_34_smooth_prev) / _up;
        } else if (x < this->numbertilde_34_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_34_smooth_index = _down;
            this->numbertilde_34_smooth_increment = (x - this->numbertilde_34_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_34_smooth_index > 0) {
        this->numbertilde_34_smooth_prev += this->numbertilde_34_smooth_increment;
        this->numbertilde_34_smooth_index -= 1;
    } else {
        this->numbertilde_34_smooth_prev = x;
    }

    return this->numbertilde_34_smooth_prev;
}

void numbertilde_34_smooth_reset() {
    this->numbertilde_34_smooth_prev = 0;
    this->numbertilde_34_smooth_index = 0;
    this->numbertilde_34_smooth_increment = 0;
    this->numbertilde_34_smooth_d_reset();
}

void numbertilde_34_init() {
    this->numbertilde_34_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-72"), 1, this->_currentTime);
}

void numbertilde_34_dspsetup(bool force) {
    if ((bool)(this->numbertilde_34_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_34_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_34_currentInterval = this->numbertilde_34_currentIntervalInSamples;
    this->numbertilde_34_rampInSamples = this->mstosamps(this->numbertilde_34_ramp);
    this->numbertilde_34_setupDone = true;
    this->numbertilde_34_smooth_d_dspsetup();
}

void transport_01_onTempoChanged(number state) {
    this->transport_01_outtempo_set(state);
}

void transport_01_onTransportChanged(number state) {
    this->transport_01_state_set(state);
}

void transport_01_onTimeSignatureChanged(number numerator, number denominator) {
    this->transport_01_outtimesig_set({numerator, denominator});
}

void metro_01_onTransportChanged(number ) {}

void metro_01_onBeatTimeChanged(number ) {}

void message_19_init() {
    this->message_19_set_set({0.75});
}

void numberobj_37_init() {
    this->numberobj_37_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-251"), 1, this->_currentTime);
}

void numberobj_37_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_37_value;
}

void numberobj_37_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_37_value_set(preset["value"]);
}

void param_10_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_10_value;
}

void param_10_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_10_value_set(preset["value"]);
}

void numberobj_38_init() {
    this->numberobj_38_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-236"), 1, this->_currentTime);
}

void numberobj_38_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_38_value;
}

void numberobj_38_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_38_value_set(preset["value"]);
}

void numberobj_39_init() {
    this->numberobj_39_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-234"), 1, this->_currentTime);
}

void numberobj_39_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_39_value;
}

void numberobj_39_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_39_value_set(preset["value"]);
}

void message_20_init() {
    this->message_20_set_set({0.43});
}

number numbertilde_35_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_35_smooth_d_prev);
    this->numbertilde_35_smooth_d_prev = x;
    return temp;
}

void numbertilde_35_smooth_d_dspsetup() {
    this->numbertilde_35_smooth_d_reset();
}

void numbertilde_35_smooth_d_reset() {
    this->numbertilde_35_smooth_d_prev = 0;
}

number numbertilde_35_smooth_next(number x, number up, number down) {
    if (this->numbertilde_35_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_35_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_35_smooth_index = _up;
            this->numbertilde_35_smooth_increment = (x - this->numbertilde_35_smooth_prev) / _up;
        } else if (x < this->numbertilde_35_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_35_smooth_index = _down;
            this->numbertilde_35_smooth_increment = (x - this->numbertilde_35_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_35_smooth_index > 0) {
        this->numbertilde_35_smooth_prev += this->numbertilde_35_smooth_increment;
        this->numbertilde_35_smooth_index -= 1;
    } else {
        this->numbertilde_35_smooth_prev = x;
    }

    return this->numbertilde_35_smooth_prev;
}

void numbertilde_35_smooth_reset() {
    this->numbertilde_35_smooth_prev = 0;
    this->numbertilde_35_smooth_index = 0;
    this->numbertilde_35_smooth_increment = 0;
    this->numbertilde_35_smooth_d_reset();
}

void numbertilde_35_init() {
    this->numbertilde_35_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-90"), 1, this->_currentTime);
}

void numbertilde_35_dspsetup(bool force) {
    if ((bool)(this->numbertilde_35_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_35_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_35_currentInterval = this->numbertilde_35_currentIntervalInSamples;
    this->numbertilde_35_rampInSamples = this->mstosamps(this->numbertilde_35_ramp);
    this->numbertilde_35_setupDone = true;
    this->numbertilde_35_smooth_d_dspsetup();
}

number numbertilde_36_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_36_smooth_d_prev);
    this->numbertilde_36_smooth_d_prev = x;
    return temp;
}

void numbertilde_36_smooth_d_dspsetup() {
    this->numbertilde_36_smooth_d_reset();
}

void numbertilde_36_smooth_d_reset() {
    this->numbertilde_36_smooth_d_prev = 0;
}

number numbertilde_36_smooth_next(number x, number up, number down) {
    if (this->numbertilde_36_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_36_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_36_smooth_index = _up;
            this->numbertilde_36_smooth_increment = (x - this->numbertilde_36_smooth_prev) / _up;
        } else if (x < this->numbertilde_36_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_36_smooth_index = _down;
            this->numbertilde_36_smooth_increment = (x - this->numbertilde_36_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_36_smooth_index > 0) {
        this->numbertilde_36_smooth_prev += this->numbertilde_36_smooth_increment;
        this->numbertilde_36_smooth_index -= 1;
    } else {
        this->numbertilde_36_smooth_prev = x;
    }

    return this->numbertilde_36_smooth_prev;
}

void numbertilde_36_smooth_reset() {
    this->numbertilde_36_smooth_prev = 0;
    this->numbertilde_36_smooth_index = 0;
    this->numbertilde_36_smooth_increment = 0;
    this->numbertilde_36_smooth_d_reset();
}

void numbertilde_36_init() {
    this->numbertilde_36_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-67"), 1, this->_currentTime);
}

void numbertilde_36_dspsetup(bool force) {
    if ((bool)(this->numbertilde_36_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_36_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_36_currentInterval = this->numbertilde_36_currentIntervalInSamples;
    this->numbertilde_36_rampInSamples = this->mstosamps(this->numbertilde_36_ramp);
    this->numbertilde_36_setupDone = true;
    this->numbertilde_36_smooth_d_dspsetup();
}

void param_11_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_11_value;
}

void param_11_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_11_value_set(preset["value"]);
}

void scopetilde_12_updateEffectiveCount() {
    number effectiveCount = 256 * 1 + 256 * 0;
    this->scopetilde_12_effectiveCount = this->maximum(effectiveCount, 256);
}

void scopetilde_12_dspsetup(bool force) {
    if ((bool)(this->scopetilde_12_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->scopetilde_12_mode = 1;
    }

    this->getEngine()->sendListMessage(
        TAG("setup"),
        TAG("scope~_obj-114"),
        {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_12_mode},
        this->_currentTime
    );;

    this->scopetilde_12_updateEffectiveCount();
    this->scopetilde_12_setupDone = true;
}

void message_21_init() {
    this->message_21_set_set({0});
}

void scopetilde_13_updateEffectiveCount() {
    number effectiveCount = 256 * 1 + 256 * 0;
    this->scopetilde_13_effectiveCount = this->maximum(effectiveCount, 256);
}

void scopetilde_13_dspsetup(bool force) {
    if ((bool)(this->scopetilde_13_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->scopetilde_13_mode = 1;
    }

    this->getEngine()->sendListMessage(
        TAG("setup"),
        TAG("scope~_obj-477"),
        {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_13_mode},
        this->_currentTime
    );;

    this->scopetilde_13_updateEffectiveCount();
    this->scopetilde_13_setupDone = true;
}

number numbertilde_37_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_37_smooth_d_prev);
    this->numbertilde_37_smooth_d_prev = x;
    return temp;
}

void numbertilde_37_smooth_d_dspsetup() {
    this->numbertilde_37_smooth_d_reset();
}

void numbertilde_37_smooth_d_reset() {
    this->numbertilde_37_smooth_d_prev = 0;
}

number numbertilde_37_smooth_next(number x, number up, number down) {
    if (this->numbertilde_37_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_37_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_37_smooth_index = _up;
            this->numbertilde_37_smooth_increment = (x - this->numbertilde_37_smooth_prev) / _up;
        } else if (x < this->numbertilde_37_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_37_smooth_index = _down;
            this->numbertilde_37_smooth_increment = (x - this->numbertilde_37_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_37_smooth_index > 0) {
        this->numbertilde_37_smooth_prev += this->numbertilde_37_smooth_increment;
        this->numbertilde_37_smooth_index -= 1;
    } else {
        this->numbertilde_37_smooth_prev = x;
    }

    return this->numbertilde_37_smooth_prev;
}

void numbertilde_37_smooth_reset() {
    this->numbertilde_37_smooth_prev = 0;
    this->numbertilde_37_smooth_index = 0;
    this->numbertilde_37_smooth_increment = 0;
    this->numbertilde_37_smooth_d_reset();
}

void numbertilde_37_init() {
    this->numbertilde_37_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-393"), 1, this->_currentTime);
}

void numbertilde_37_dspsetup(bool force) {
    if ((bool)(this->numbertilde_37_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_37_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_37_currentInterval = this->numbertilde_37_currentIntervalInSamples;
    this->numbertilde_37_rampInSamples = this->mstosamps(this->numbertilde_37_ramp);
    this->numbertilde_37_setupDone = true;
    this->numbertilde_37_smooth_d_dspsetup();
}

void rate_tilde_02_reset() {
    this->rate_tilde_02_currentPhase = 0;
    this->rate_tilde_02_diff = 0;
    this->rate_tilde_02_prev = 0;
    this->rate_tilde_02_mult = 1;
    this->rate_tilde_02_invmult = 1;
    this->rate_tilde_02_wantlock = 1;
    this->rate_tilde_02_quant = 1;
}

void rate_tilde_02_dspsetup(bool force) {
    if ((bool)(this->rate_tilde_02_setupDone) && (bool)(!(bool)(force)))
        return;

    this->rate_tilde_02_reset();
    this->rate_tilde_02_setupDone = true;
}

void param_12_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_12_value;
}

void param_12_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_12_value_set(preset["value"]);
}

void message_22_init() {
    this->message_22_set_set({0.306});
}

void gen_07_delay_1_step() {
    this->gen_07_delay_1_reader++;

    if (this->gen_07_delay_1_reader >= (int)(this->gen_07_delay_1_buffer->getSize()))
        this->gen_07_delay_1_reader = 0;
}

number gen_07_delay_1_read(number size, Int interp) {
    RNBO_UNUSED(interp);

    {
        number r = (int)(this->gen_07_delay_1_buffer->getSize()) + this->gen_07_delay_1_reader - ((size > this->gen_07_delay_1__maxdelay ? this->gen_07_delay_1__maxdelay : (size < (this->gen_07_delay_1_reader != this->gen_07_delay_1_writer) ? this->gen_07_delay_1_reader != this->gen_07_delay_1_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_07_delay_1_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_07_delay_1_wrap))
        ), this->gen_07_delay_1_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_07_delay_1_wrap))
        ));
    }

    number r = (int)(this->gen_07_delay_1_buffer->getSize()) + this->gen_07_delay_1_reader - ((size > this->gen_07_delay_1__maxdelay ? this->gen_07_delay_1__maxdelay : (size < (this->gen_07_delay_1_reader != this->gen_07_delay_1_writer) ? this->gen_07_delay_1_reader != this->gen_07_delay_1_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_07_delay_1_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_07_delay_1_wrap))
    );
}

void gen_07_delay_1_write(number v) {
    this->gen_07_delay_1_writer = this->gen_07_delay_1_reader;
    this->gen_07_delay_1_buffer[(Index)this->gen_07_delay_1_writer] = v;
}

number gen_07_delay_1_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_07_delay_1__maxdelay : size);
    number val = this->gen_07_delay_1_read(effectiveSize, 0);
    this->gen_07_delay_1_write(v);
    this->gen_07_delay_1_step();
    return val;
}

array<Index, 2> gen_07_delay_1_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_07_delay_1_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_07_delay_1_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_07_delay_1_init() {
    auto result = this->gen_07_delay_1_calcSizeInSamples();
    this->gen_07_delay_1__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_07_delay_1_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_07_delay_1_wrap = requestedSizeInSamples - 1;
}

void gen_07_delay_1_clear() {
    this->gen_07_delay_1_buffer->setZero();
}

void gen_07_delay_1_reset() {
    auto result = this->gen_07_delay_1_calcSizeInSamples();
    this->gen_07_delay_1__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_07_delay_1_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_07_delay_1_buffer);
    this->gen_07_delay_1_wrap = this->gen_07_delay_1_buffer->getSize() - 1;
    this->gen_07_delay_1_clear();

    if (this->gen_07_delay_1_reader >= this->gen_07_delay_1__maxdelay || this->gen_07_delay_1_writer >= this->gen_07_delay_1__maxdelay) {
        this->gen_07_delay_1_reader = 0;
        this->gen_07_delay_1_writer = 0;
    }
}

void gen_07_delay_1_dspsetup() {
    this->gen_07_delay_1_reset();
}

number gen_07_delay_1_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 3840;
}

number gen_07_delay_1_size() {
    return this->gen_07_delay_1__maxdelay;
}

number gen_07_history_2_getvalue() {
    return this->gen_07_history_2_value;
}

void gen_07_history_2_setvalue(number val) {
    this->gen_07_history_2_value = val;
}

void gen_07_history_2_reset() {
    this->gen_07_history_2_value = 0;
}

void gen_07_history_2_init() {
    this->gen_07_history_2_value = 0;
}

number gen_07_history_3_getvalue() {
    return this->gen_07_history_3_value;
}

void gen_07_history_3_setvalue(number val) {
    this->gen_07_history_3_value = val;
}

void gen_07_history_3_reset() {
    this->gen_07_history_3_value = 0;
}

void gen_07_history_3_init() {
    this->gen_07_history_3_value = 0;
}

number gen_07_history_4_getvalue() {
    return this->gen_07_history_4_value;
}

void gen_07_history_4_setvalue(number val) {
    this->gen_07_history_4_value = val;
}

void gen_07_history_4_reset() {
    this->gen_07_history_4_value = 0;
}

void gen_07_history_4_init() {
    this->gen_07_history_4_value = 0;
}

number gen_07_history_5_getvalue() {
    return this->gen_07_history_5_value;
}

void gen_07_history_5_setvalue(number val) {
    this->gen_07_history_5_value = val;
}

void gen_07_history_5_reset() {
    this->gen_07_history_5_value = 0;
}

void gen_07_history_5_init() {
    this->gen_07_history_5_value = 0;
}

number gen_07_slide_6_next(number x, number up, number down) {
    RNBO_UNUSED(down);
    RNBO_UNUSED(up);
    number temp = x - this->gen_07_slide_6_prev;
    auto iup = this->safediv(1., this->maximum(1., rnbo_abs(5000)));
    auto idown = this->safediv(1., this->maximum(1., rnbo_abs(100)));
    this->gen_07_slide_6_prev = this->gen_07_slide_6_prev + ((x > this->gen_07_slide_6_prev ? iup : idown)) * temp;
    return this->gen_07_slide_6_prev;
}

void gen_07_slide_6_reset() {
    this->gen_07_slide_6_prev = 0;
}

number gen_07_slide_11_next(number x, number up, number down) {
    RNBO_UNUSED(down);
    RNBO_UNUSED(up);
    number temp = x - this->gen_07_slide_11_prev;
    auto iup = this->safediv(1., this->maximum(1., rnbo_abs(5000)));
    auto idown = this->safediv(1., this->maximum(1., rnbo_abs(100)));
    this->gen_07_slide_11_prev = this->gen_07_slide_11_prev + ((x > this->gen_07_slide_11_prev ? iup : idown)) * temp;
    return this->gen_07_slide_11_prev;
}

void gen_07_slide_11_reset() {
    this->gen_07_slide_11_prev = 0;
}

void gen_07_dspsetup(bool force) {
    if ((bool)(this->gen_07_setupDone) && (bool)(!(bool)(force)))
        return;

    this->gen_07_setupDone = true;
    this->gen_07_delay_1_dspsetup();
}

number numbertilde_38_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_38_smooth_d_prev);
    this->numbertilde_38_smooth_d_prev = x;
    return temp;
}

void numbertilde_38_smooth_d_dspsetup() {
    this->numbertilde_38_smooth_d_reset();
}

void numbertilde_38_smooth_d_reset() {
    this->numbertilde_38_smooth_d_prev = 0;
}

number numbertilde_38_smooth_next(number x, number up, number down) {
    if (this->numbertilde_38_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_38_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_38_smooth_index = _up;
            this->numbertilde_38_smooth_increment = (x - this->numbertilde_38_smooth_prev) / _up;
        } else if (x < this->numbertilde_38_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_38_smooth_index = _down;
            this->numbertilde_38_smooth_increment = (x - this->numbertilde_38_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_38_smooth_index > 0) {
        this->numbertilde_38_smooth_prev += this->numbertilde_38_smooth_increment;
        this->numbertilde_38_smooth_index -= 1;
    } else {
        this->numbertilde_38_smooth_prev = x;
    }

    return this->numbertilde_38_smooth_prev;
}

void numbertilde_38_smooth_reset() {
    this->numbertilde_38_smooth_prev = 0;
    this->numbertilde_38_smooth_index = 0;
    this->numbertilde_38_smooth_increment = 0;
    this->numbertilde_38_smooth_d_reset();
}

void numbertilde_38_init() {
    this->numbertilde_38_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-448"), 1, this->_currentTime);
}

void numbertilde_38_dspsetup(bool force) {
    if ((bool)(this->numbertilde_38_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_38_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_38_currentInterval = this->numbertilde_38_currentIntervalInSamples;
    this->numbertilde_38_rampInSamples = this->mstosamps(this->numbertilde_38_ramp);
    this->numbertilde_38_setupDone = true;
    this->numbertilde_38_smooth_d_dspsetup();
}

number numbertilde_39_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_39_smooth_d_prev);
    this->numbertilde_39_smooth_d_prev = x;
    return temp;
}

void numbertilde_39_smooth_d_dspsetup() {
    this->numbertilde_39_smooth_d_reset();
}

void numbertilde_39_smooth_d_reset() {
    this->numbertilde_39_smooth_d_prev = 0;
}

number numbertilde_39_smooth_next(number x, number up, number down) {
    if (this->numbertilde_39_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_39_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_39_smooth_index = _up;
            this->numbertilde_39_smooth_increment = (x - this->numbertilde_39_smooth_prev) / _up;
        } else if (x < this->numbertilde_39_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_39_smooth_index = _down;
            this->numbertilde_39_smooth_increment = (x - this->numbertilde_39_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_39_smooth_index > 0) {
        this->numbertilde_39_smooth_prev += this->numbertilde_39_smooth_increment;
        this->numbertilde_39_smooth_index -= 1;
    } else {
        this->numbertilde_39_smooth_prev = x;
    }

    return this->numbertilde_39_smooth_prev;
}

void numbertilde_39_smooth_reset() {
    this->numbertilde_39_smooth_prev = 0;
    this->numbertilde_39_smooth_index = 0;
    this->numbertilde_39_smooth_increment = 0;
    this->numbertilde_39_smooth_d_reset();
}

void numbertilde_39_init() {
    this->numbertilde_39_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-359"), 1, this->_currentTime);
}

void numbertilde_39_dspsetup(bool force) {
    if ((bool)(this->numbertilde_39_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_39_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_39_currentInterval = this->numbertilde_39_currentIntervalInSamples;
    this->numbertilde_39_rampInSamples = this->mstosamps(this->numbertilde_39_ramp);
    this->numbertilde_39_setupDone = true;
    this->numbertilde_39_smooth_d_dspsetup();
}

void message_23_init() {
    this->message_23_set_set({0.579});
}

void numberobj_40_init() {
    this->numberobj_40_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-525"), 1, this->_currentTime);
}

void numberobj_40_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_40_value;
}

void numberobj_40_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_40_value_set(preset["value"]);
}

void ip_05_init() {
    this->ip_05_lastValue = this->ip_05_value;
}

void ip_05_fillSigBuf() {
    if ((bool)(this->ip_05_sigbuf)) {
        SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);

        if (k >= (SampleIndex)(this->vs))
            k = (SampleIndex)(this->vs) - 1;

        for (SampleIndex i = (SampleIndex)(this->ip_05_lastIndex); i < k; i++) {
            if (this->ip_05_resetCount > 0) {
                this->ip_05_sigbuf[(Index)i] = 1;
                this->ip_05_resetCount--;
            } else {
                this->ip_05_sigbuf[(Index)i] = this->ip_05_lastValue;
            }
        }

        this->ip_05_lastIndex = k;
    }
}

void ip_05_dspsetup(bool force) {
    if ((bool)(this->ip_05_setupDone) && (bool)(!(bool)(force)))
        return;

    this->ip_05_lastIndex = 0;
    this->ip_05_setupDone = true;
}

void ip_06_init() {
    this->ip_06_lastValue = this->ip_06_value;
}

void ip_06_fillSigBuf() {
    if ((bool)(this->ip_06_sigbuf)) {
        SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);

        if (k >= (SampleIndex)(this->vs))
            k = (SampleIndex)(this->vs) - 1;

        for (SampleIndex i = (SampleIndex)(this->ip_06_lastIndex); i < k; i++) {
            if (this->ip_06_resetCount > 0) {
                this->ip_06_sigbuf[(Index)i] = 1;
                this->ip_06_resetCount--;
            } else {
                this->ip_06_sigbuf[(Index)i] = this->ip_06_lastValue;
            }
        }

        this->ip_06_lastIndex = k;
    }
}

void ip_06_dspsetup(bool force) {
    if ((bool)(this->ip_06_setupDone) && (bool)(!(bool)(force)))
        return;

    this->ip_06_lastIndex = 0;
    this->ip_06_setupDone = true;
}

void numberobj_41_init() {
    this->numberobj_41_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-203"), 1, this->_currentTime);
}

void numberobj_41_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_41_value;
}

void numberobj_41_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_41_value_set(preset["value"]);
}

void numberobj_42_init() {
    this->numberobj_42_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-56"), 1, this->_currentTime);
}

void numberobj_42_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_42_value;
}

void numberobj_42_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_42_value_set(preset["value"]);
}

void param_13_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_13_value;
}

void param_13_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_13_value_set(preset["value"]);
}

void numberobj_43_init() {
    this->numberobj_43_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-37"), 1, this->_currentTime);
}

void numberobj_43_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_43_value;
}

void numberobj_43_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_43_value_set(preset["value"]);
}

number numbertilde_40_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_40_smooth_d_prev);
    this->numbertilde_40_smooth_d_prev = x;
    return temp;
}

void numbertilde_40_smooth_d_dspsetup() {
    this->numbertilde_40_smooth_d_reset();
}

void numbertilde_40_smooth_d_reset() {
    this->numbertilde_40_smooth_d_prev = 0;
}

number numbertilde_40_smooth_next(number x, number up, number down) {
    if (this->numbertilde_40_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_40_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_40_smooth_index = _up;
            this->numbertilde_40_smooth_increment = (x - this->numbertilde_40_smooth_prev) / _up;
        } else if (x < this->numbertilde_40_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_40_smooth_index = _down;
            this->numbertilde_40_smooth_increment = (x - this->numbertilde_40_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_40_smooth_index > 0) {
        this->numbertilde_40_smooth_prev += this->numbertilde_40_smooth_increment;
        this->numbertilde_40_smooth_index -= 1;
    } else {
        this->numbertilde_40_smooth_prev = x;
    }

    return this->numbertilde_40_smooth_prev;
}

void numbertilde_40_smooth_reset() {
    this->numbertilde_40_smooth_prev = 0;
    this->numbertilde_40_smooth_index = 0;
    this->numbertilde_40_smooth_increment = 0;
    this->numbertilde_40_smooth_d_reset();
}

void numbertilde_40_init() {
    this->numbertilde_40_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-382"), 1, this->_currentTime);
}

void numbertilde_40_dspsetup(bool force) {
    if ((bool)(this->numbertilde_40_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_40_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_40_currentInterval = this->numbertilde_40_currentIntervalInSamples;
    this->numbertilde_40_rampInSamples = this->mstosamps(this->numbertilde_40_ramp);
    this->numbertilde_40_setupDone = true;
    this->numbertilde_40_smooth_d_dspsetup();
}

void numberobj_44_init() {
    this->numberobj_44_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-363"), 1, this->_currentTime);
}

void numberobj_44_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_44_value;
}

void numberobj_44_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_44_value_set(preset["value"]);
}

array<number, 5> filtercoeff_05_localop_next(number frequency, number q, number gain, number type) {
    number omega = frequency * this->filtercoeff_05_localop_twopi_over_sr;
    this->filtercoeff_05_localop_cs = rnbo_cos(omega);
    this->filtercoeff_05_localop_sn = rnbo_sin(omega);
    this->filtercoeff_05_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
    this->filtercoeff_05_localop_one_over_q = (number)1 / q;
    this->filtercoeff_05_localop_alpha = this->filtercoeff_05_localop_sn * 0.5 * this->filtercoeff_05_localop_one_over_q;

    switch ((int)type) {
    case 5:
        {
        this->filtercoeff_05_localop_A = this->safesqrt(gain);

        this->filtercoeff_05_localop_beta = this->safesqrt(
            (this->filtercoeff_05_localop_A * this->filtercoeff_05_localop_A + 1.) * this->filtercoeff_05_localop_one_over_q - (this->filtercoeff_05_localop_A - 1.) * (this->filtercoeff_05_localop_A - 1.)
        );

        this->filtercoeff_05_localop_b0 = (number)1 / (this->filtercoeff_05_localop_A + 1. + (this->filtercoeff_05_localop_A - 1.) * this->filtercoeff_05_localop_cs + this->filtercoeff_05_localop_beta * this->filtercoeff_05_localop_sn);
        break;
        }
    case 6:
        {
        this->filtercoeff_05_localop_A = this->safesqrt(gain);

        this->filtercoeff_05_localop_beta = this->safesqrt(
            (this->filtercoeff_05_localop_A * this->filtercoeff_05_localop_A + 1.) * this->filtercoeff_05_localop_one_over_q - (this->filtercoeff_05_localop_A - 1.) * (this->filtercoeff_05_localop_A - 1.)
        );

        this->filtercoeff_05_localop_b0 = (number)1 / (this->filtercoeff_05_localop_A + 1. - (this->filtercoeff_05_localop_A - 1.) * this->filtercoeff_05_localop_cs + this->filtercoeff_05_localop_beta * this->filtercoeff_05_localop_sn);
        break;
        }
    case 4:
        {
        this->filtercoeff_05_localop_A = this->safesqrt(gain);
        this->filtercoeff_05_localop_one_over_a = (this->filtercoeff_05_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_05_localop_A);
        this->filtercoeff_05_localop_b0 = (number)1 / (1. + this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_one_over_a);
        break;
        }
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
        {
        this->filtercoeff_05_localop_b0 = (number)1 / (1. + this->filtercoeff_05_localop_alpha);
        this->filtercoeff_05_localop_b0g = (number)1 / (this->filtercoeff_05_localop_one_over_gain + this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_one_over_gain);
        break;
        }
    default:
        {
        this->filtercoeff_05_localop_b0 = (number)1 / (1. + this->filtercoeff_05_localop_alpha);
        break;
        }
    }

    switch ((int)type) {
    case 0:
        {
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_la2 = (1. - this->filtercoeff_05_localop_cs) * 0.5 * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la1 = (1. - this->filtercoeff_05_localop_cs) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 1:
        {
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_la2 = (1. + this->filtercoeff_05_localop_cs) * 0.5 * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la1 = -(1. + this->filtercoeff_05_localop_cs) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 2:
        {
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la1 = 0.;
        this->filtercoeff_05_localop_la2 = -this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 7:
        {
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_alpha * q * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la1 = 0.;
        this->filtercoeff_05_localop_la2 = -this->filtercoeff_05_localop_alpha * q * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 3:
        {
        this->filtercoeff_05_localop_la1 = this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_la2 = this->filtercoeff_05_localop_b0;
        break;
        }
    case 8:
        {
        this->filtercoeff_05_localop_la1 = this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = this->filtercoeff_05_localop_la0 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la2 = 1.0;
        break;
        }
    case 4:
        {
        this->filtercoeff_05_localop_la0 = (1. + this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_A) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la1 = this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la2 = (1. - this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_A) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_one_over_a) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 5:
        {
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_A * (this->filtercoeff_05_localop_A + 1. - (this->filtercoeff_05_localop_A - 1.) * this->filtercoeff_05_localop_cs + this->filtercoeff_05_localop_beta * this->filtercoeff_05_localop_sn) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la1 = 2. * this->filtercoeff_05_localop_A * (this->filtercoeff_05_localop_A - 1 - (this->filtercoeff_05_localop_A + 1) * this->filtercoeff_05_localop_cs) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la2 = this->filtercoeff_05_localop_A * (this->filtercoeff_05_localop_A + 1. - (this->filtercoeff_05_localop_A - 1.) * this->filtercoeff_05_localop_cs - this->filtercoeff_05_localop_beta * this->filtercoeff_05_localop_sn) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb1 = -2. * (this->filtercoeff_05_localop_A - 1. + (this->filtercoeff_05_localop_A + 1.) * this->filtercoeff_05_localop_cs) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (this->filtercoeff_05_localop_A + 1. + (this->filtercoeff_05_localop_A - 1.) * this->filtercoeff_05_localop_cs - this->filtercoeff_05_localop_beta * this->filtercoeff_05_localop_sn) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 6:
        {
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_A * (this->filtercoeff_05_localop_A + 1. + (this->filtercoeff_05_localop_A - 1.) * this->filtercoeff_05_localop_cs + this->filtercoeff_05_localop_beta * this->filtercoeff_05_localop_sn) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la1 = -2. * this->filtercoeff_05_localop_A * (this->filtercoeff_05_localop_A - 1. + (this->filtercoeff_05_localop_A + 1.) * this->filtercoeff_05_localop_cs) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la2 = this->filtercoeff_05_localop_A * (this->filtercoeff_05_localop_A + 1. + (this->filtercoeff_05_localop_A - 1.) * this->filtercoeff_05_localop_cs - this->filtercoeff_05_localop_beta * this->filtercoeff_05_localop_sn) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb1 = 2. * (this->filtercoeff_05_localop_A - 1. - (this->filtercoeff_05_localop_A + 1.) * this->filtercoeff_05_localop_cs) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (this->filtercoeff_05_localop_A + 1. - (this->filtercoeff_05_localop_A - 1.) * this->filtercoeff_05_localop_cs - this->filtercoeff_05_localop_beta * this->filtercoeff_05_localop_sn) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 9:
        {
        this->filtercoeff_05_localop_b0g = (number)1 / (this->filtercoeff_05_localop_one_over_gain + this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_one_over_gain);
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_la2 = (1. - this->filtercoeff_05_localop_cs) * 0.5 * this->filtercoeff_05_localop_b0g;
        this->filtercoeff_05_localop_la1 = (1. - this->filtercoeff_05_localop_cs) * this->filtercoeff_05_localop_b0g;
        this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 10:
        {
        this->filtercoeff_05_localop_b0g = (number)1 / (this->filtercoeff_05_localop_one_over_gain + this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_one_over_gain);
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_la2 = (1. + this->filtercoeff_05_localop_cs) * 0.5 * this->filtercoeff_05_localop_b0g;
        this->filtercoeff_05_localop_la1 = -(1. + this->filtercoeff_05_localop_cs) * this->filtercoeff_05_localop_b0g;
        this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 11:
        {
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_alpha * gain * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la1 = 0.;
        this->filtercoeff_05_localop_la2 = -this->filtercoeff_05_localop_alpha * gain * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 13:
        {
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_alpha * gain * q * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la1 = 0.;
        this->filtercoeff_05_localop_la2 = -this->filtercoeff_05_localop_alpha * gain * q * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 12:
        {
        this->filtercoeff_05_localop_b0g = (number)1 / (this->filtercoeff_05_localop_one_over_gain + this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_one_over_gain);
        this->filtercoeff_05_localop_la1 = this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la1 *= this->filtercoeff_05_localop_b0g;
        this->filtercoeff_05_localop_lb1 *= this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_la0 = this->filtercoeff_05_localop_b0g;
        this->filtercoeff_05_localop_la2 = this->filtercoeff_05_localop_b0g;
        break;
        }
    case 14:
        {
        this->filtercoeff_05_localop_b0g = (number)1 / (this->filtercoeff_05_localop_one_over_gain + this->filtercoeff_05_localop_alpha * this->filtercoeff_05_localop_one_over_gain);
        this->filtercoeff_05_localop_la0 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0g;
        this->filtercoeff_05_localop_la1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0g;
        this->filtercoeff_05_localop_la2 = gain;
        this->filtercoeff_05_localop_lb1 = -2. * this->filtercoeff_05_localop_cs * this->filtercoeff_05_localop_b0;
        this->filtercoeff_05_localop_lb2 = (1. - this->filtercoeff_05_localop_alpha) * this->filtercoeff_05_localop_b0;
        break;
        }
    case 15:
        {
        this->filtercoeff_05_localop_la0 = 1;
        this->filtercoeff_05_localop_la1 = 0;
        this->filtercoeff_05_localop_la2 = 0;
        this->filtercoeff_05_localop_lb1 = 0;
        this->filtercoeff_05_localop_lb2 = 0;
        }
    default:
        {
        break;
        }
    }

    return {
        this->filtercoeff_05_localop_la0,
        this->filtercoeff_05_localop_la1,
        this->filtercoeff_05_localop_la2,
        this->filtercoeff_05_localop_lb1,
        this->filtercoeff_05_localop_lb2
    };
}

void filtercoeff_05_localop_dspsetup() {
    this->filtercoeff_05_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
}

void filtercoeff_05_localop_reset() {
    this->filtercoeff_05_localop_twopi_over_sr = 0;
    this->filtercoeff_05_localop_cs = 0;
    this->filtercoeff_05_localop_sn = 0;
    this->filtercoeff_05_localop_one_over_gain = 0;
    this->filtercoeff_05_localop_one_over_q = 0;
    this->filtercoeff_05_localop_alpha = 0;
    this->filtercoeff_05_localop_beta = 0;
    this->filtercoeff_05_localop_b0 = 0;
    this->filtercoeff_05_localop_b0g = 0;
    this->filtercoeff_05_localop_A = 0;
    this->filtercoeff_05_localop_one_over_a = 0;
    this->filtercoeff_05_localop_la0 = 0;
    this->filtercoeff_05_localop_la1 = 0;
    this->filtercoeff_05_localop_la2 = 0;
    this->filtercoeff_05_localop_lb1 = 0;
    this->filtercoeff_05_localop_lb2 = 0;
}

void filtercoeff_05_updateTerms(number local_frequency, number local_gain, number local_q) {
    if ((bool)(this->filtercoeff_05_force_update) || local_frequency != this->filtercoeff_05_last_frequency || local_q != this->filtercoeff_05_last_q || local_gain != this->filtercoeff_05_last_gain || this->filtercoeff_05_type != this->filtercoeff_05_last_type) {
        array<number, 5> tmp = this->filtercoeff_05_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_05_type);
        this->filtercoeff_05_la0 = tmp[0];
        this->filtercoeff_05_la1 = tmp[1];
        this->filtercoeff_05_la2 = tmp[2];
        this->filtercoeff_05_lb1 = tmp[3];
        this->filtercoeff_05_lb2 = tmp[4];
        this->filtercoeff_05_last_frequency = local_frequency;
        this->filtercoeff_05_last_q = local_q;
        this->filtercoeff_05_last_gain = local_gain;
        this->filtercoeff_05_last_type = this->filtercoeff_05_type;
        this->filtercoeff_05_force_update = false;
    }
}

void filtercoeff_05_dspsetup(bool force) {
    if ((bool)(this->filtercoeff_05_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->filtercoeff_05_activeResamp = this->vectorsize();
    }

    this->filtercoeff_05_resamp_counter = 0;
    this->filtercoeff_05_la0 = 0.;
    this->filtercoeff_05_la1 = 0.;
    this->filtercoeff_05_la2 = 0.;
    this->filtercoeff_05_lb1 = 0.;
    this->filtercoeff_05_lb2 = 0.;
    this->filtercoeff_05_last_frequency = -1.;
    this->filtercoeff_05_last_q = -1.;
    this->filtercoeff_05_last_gain = -1.;
    this->filtercoeff_05_last_type = this->filtercoeff_05_type;
    this->filtercoeff_05_force_update = true;
    this->filtercoeff_05_setupDone = true;
    this->filtercoeff_05_localop_dspsetup();
}

number numbertilde_41_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_41_smooth_d_prev);
    this->numbertilde_41_smooth_d_prev = x;
    return temp;
}

void numbertilde_41_smooth_d_dspsetup() {
    this->numbertilde_41_smooth_d_reset();
}

void numbertilde_41_smooth_d_reset() {
    this->numbertilde_41_smooth_d_prev = 0;
}

number numbertilde_41_smooth_next(number x, number up, number down) {
    if (this->numbertilde_41_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_41_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_41_smooth_index = _up;
            this->numbertilde_41_smooth_increment = (x - this->numbertilde_41_smooth_prev) / _up;
        } else if (x < this->numbertilde_41_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_41_smooth_index = _down;
            this->numbertilde_41_smooth_increment = (x - this->numbertilde_41_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_41_smooth_index > 0) {
        this->numbertilde_41_smooth_prev += this->numbertilde_41_smooth_increment;
        this->numbertilde_41_smooth_index -= 1;
    } else {
        this->numbertilde_41_smooth_prev = x;
    }

    return this->numbertilde_41_smooth_prev;
}

void numbertilde_41_smooth_reset() {
    this->numbertilde_41_smooth_prev = 0;
    this->numbertilde_41_smooth_index = 0;
    this->numbertilde_41_smooth_increment = 0;
    this->numbertilde_41_smooth_d_reset();
}

void numbertilde_41_init() {
    this->numbertilde_41_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-383"), 1, this->_currentTime);
}

void numbertilde_41_dspsetup(bool force) {
    if ((bool)(this->numbertilde_41_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_41_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_41_currentInterval = this->numbertilde_41_currentIntervalInSamples;
    this->numbertilde_41_rampInSamples = this->mstosamps(this->numbertilde_41_ramp);
    this->numbertilde_41_setupDone = true;
    this->numbertilde_41_smooth_d_dspsetup();
}

number numbertilde_42_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_42_smooth_d_prev);
    this->numbertilde_42_smooth_d_prev = x;
    return temp;
}

void numbertilde_42_smooth_d_dspsetup() {
    this->numbertilde_42_smooth_d_reset();
}

void numbertilde_42_smooth_d_reset() {
    this->numbertilde_42_smooth_d_prev = 0;
}

number numbertilde_42_smooth_next(number x, number up, number down) {
    if (this->numbertilde_42_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_42_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_42_smooth_index = _up;
            this->numbertilde_42_smooth_increment = (x - this->numbertilde_42_smooth_prev) / _up;
        } else if (x < this->numbertilde_42_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_42_smooth_index = _down;
            this->numbertilde_42_smooth_increment = (x - this->numbertilde_42_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_42_smooth_index > 0) {
        this->numbertilde_42_smooth_prev += this->numbertilde_42_smooth_increment;
        this->numbertilde_42_smooth_index -= 1;
    } else {
        this->numbertilde_42_smooth_prev = x;
    }

    return this->numbertilde_42_smooth_prev;
}

void numbertilde_42_smooth_reset() {
    this->numbertilde_42_smooth_prev = 0;
    this->numbertilde_42_smooth_index = 0;
    this->numbertilde_42_smooth_increment = 0;
    this->numbertilde_42_smooth_d_reset();
}

void numbertilde_42_init() {
    this->numbertilde_42_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-450"), 1, this->_currentTime);
}

void numbertilde_42_dspsetup(bool force) {
    if ((bool)(this->numbertilde_42_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_42_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_42_currentInterval = this->numbertilde_42_currentIntervalInSamples;
    this->numbertilde_42_rampInSamples = this->mstosamps(this->numbertilde_42_ramp);
    this->numbertilde_42_setupDone = true;
    this->numbertilde_42_smooth_d_dspsetup();
}

void param_14_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_14_value;
}

void param_14_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_14_value_set(preset["value"]);
}

void numberobj_45_init() {
    this->numberobj_45_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-461"), 1, this->_currentTime);
}

void numberobj_45_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_45_value;
}

void numberobj_45_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_45_value_set(preset["value"]);
}

number numbertilde_43_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_43_smooth_d_prev);
    this->numbertilde_43_smooth_d_prev = x;
    return temp;
}

void numbertilde_43_smooth_d_dspsetup() {
    this->numbertilde_43_smooth_d_reset();
}

void numbertilde_43_smooth_d_reset() {
    this->numbertilde_43_smooth_d_prev = 0;
}

number numbertilde_43_smooth_next(number x, number up, number down) {
    if (this->numbertilde_43_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_43_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_43_smooth_index = _up;
            this->numbertilde_43_smooth_increment = (x - this->numbertilde_43_smooth_prev) / _up;
        } else if (x < this->numbertilde_43_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_43_smooth_index = _down;
            this->numbertilde_43_smooth_increment = (x - this->numbertilde_43_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_43_smooth_index > 0) {
        this->numbertilde_43_smooth_prev += this->numbertilde_43_smooth_increment;
        this->numbertilde_43_smooth_index -= 1;
    } else {
        this->numbertilde_43_smooth_prev = x;
    }

    return this->numbertilde_43_smooth_prev;
}

void numbertilde_43_smooth_reset() {
    this->numbertilde_43_smooth_prev = 0;
    this->numbertilde_43_smooth_index = 0;
    this->numbertilde_43_smooth_increment = 0;
    this->numbertilde_43_smooth_d_reset();
}

void numbertilde_43_init() {
    this->numbertilde_43_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-384"), 1, this->_currentTime);
}

void numbertilde_43_dspsetup(bool force) {
    if ((bool)(this->numbertilde_43_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_43_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_43_currentInterval = this->numbertilde_43_currentIntervalInSamples;
    this->numbertilde_43_rampInSamples = this->mstosamps(this->numbertilde_43_ramp);
    this->numbertilde_43_setupDone = true;
    this->numbertilde_43_smooth_d_dspsetup();
}

void numberobj_46_init() {
    this->numberobj_46_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-469"), 1, this->_currentTime);
}

void numberobj_46_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_46_value;
}

void numberobj_46_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_46_value_set(preset["value"]);
}

number numbertilde_44_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_44_smooth_d_prev);
    this->numbertilde_44_smooth_d_prev = x;
    return temp;
}

void numbertilde_44_smooth_d_dspsetup() {
    this->numbertilde_44_smooth_d_reset();
}

void numbertilde_44_smooth_d_reset() {
    this->numbertilde_44_smooth_d_prev = 0;
}

number numbertilde_44_smooth_next(number x, number up, number down) {
    if (this->numbertilde_44_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_44_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_44_smooth_index = _up;
            this->numbertilde_44_smooth_increment = (x - this->numbertilde_44_smooth_prev) / _up;
        } else if (x < this->numbertilde_44_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_44_smooth_index = _down;
            this->numbertilde_44_smooth_increment = (x - this->numbertilde_44_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_44_smooth_index > 0) {
        this->numbertilde_44_smooth_prev += this->numbertilde_44_smooth_increment;
        this->numbertilde_44_smooth_index -= 1;
    } else {
        this->numbertilde_44_smooth_prev = x;
    }

    return this->numbertilde_44_smooth_prev;
}

void numbertilde_44_smooth_reset() {
    this->numbertilde_44_smooth_prev = 0;
    this->numbertilde_44_smooth_index = 0;
    this->numbertilde_44_smooth_increment = 0;
    this->numbertilde_44_smooth_d_reset();
}

void numbertilde_44_init() {
    this->numbertilde_44_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-381"), 1, this->_currentTime);
}

void numbertilde_44_dspsetup(bool force) {
    if ((bool)(this->numbertilde_44_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_44_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_44_currentInterval = this->numbertilde_44_currentIntervalInSamples;
    this->numbertilde_44_rampInSamples = this->mstosamps(this->numbertilde_44_ramp);
    this->numbertilde_44_setupDone = true;
    this->numbertilde_44_smooth_d_dspsetup();
}

void numberobj_47_init() {
    this->numberobj_47_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-452"), 1, this->_currentTime);
}

void numberobj_47_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_47_value;
}

void numberobj_47_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_47_value_set(preset["value"]);
}

void numberobj_48_init() {
    this->numberobj_48_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-465"), 1, this->_currentTime);
}

void numberobj_48_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_48_value;
}

void numberobj_48_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_48_value_set(preset["value"]);
}

void message_24_init() {
    this->message_24_set_set({0.28});
}

number numbertilde_45_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_45_smooth_d_prev);
    this->numbertilde_45_smooth_d_prev = x;
    return temp;
}

void numbertilde_45_smooth_d_dspsetup() {
    this->numbertilde_45_smooth_d_reset();
}

void numbertilde_45_smooth_d_reset() {
    this->numbertilde_45_smooth_d_prev = 0;
}

number numbertilde_45_smooth_next(number x, number up, number down) {
    if (this->numbertilde_45_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_45_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_45_smooth_index = _up;
            this->numbertilde_45_smooth_increment = (x - this->numbertilde_45_smooth_prev) / _up;
        } else if (x < this->numbertilde_45_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_45_smooth_index = _down;
            this->numbertilde_45_smooth_increment = (x - this->numbertilde_45_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_45_smooth_index > 0) {
        this->numbertilde_45_smooth_prev += this->numbertilde_45_smooth_increment;
        this->numbertilde_45_smooth_index -= 1;
    } else {
        this->numbertilde_45_smooth_prev = x;
    }

    return this->numbertilde_45_smooth_prev;
}

void numbertilde_45_smooth_reset() {
    this->numbertilde_45_smooth_prev = 0;
    this->numbertilde_45_smooth_index = 0;
    this->numbertilde_45_smooth_increment = 0;
    this->numbertilde_45_smooth_d_reset();
}

void numbertilde_45_init() {
    this->numbertilde_45_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-380"), 1, this->_currentTime);
}

void numbertilde_45_dspsetup(bool force) {
    if ((bool)(this->numbertilde_45_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_45_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_45_currentInterval = this->numbertilde_45_currentIntervalInSamples;
    this->numbertilde_45_rampInSamples = this->mstosamps(this->numbertilde_45_ramp);
    this->numbertilde_45_setupDone = true;
    this->numbertilde_45_smooth_d_dspsetup();
}

void message_25_init() {
    this->message_25_set_set({0});
}

void toggle_04_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_04_value_number;
}

void toggle_04_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_04_value_number_set(preset["value"]);
}

void biquad_tilde_04_reset() {
    this->biquad_tilde_04_x1 = 0;
    this->biquad_tilde_04_x2 = 0;
    this->biquad_tilde_04_y1 = 0;
    this->biquad_tilde_04_y2 = 0;
}

void biquad_tilde_04_dspsetup(bool force) {
    if ((bool)(this->biquad_tilde_04_setupDone) && (bool)(!(bool)(force)))
        return;

    this->biquad_tilde_04_reset();
    this->biquad_tilde_04_setupDone = true;
}

void biquad_tilde_05_reset() {
    this->biquad_tilde_05_x1 = 0;
    this->biquad_tilde_05_x2 = 0;
    this->biquad_tilde_05_y1 = 0;
    this->biquad_tilde_05_y2 = 0;
}

void biquad_tilde_05_dspsetup(bool force) {
    if ((bool)(this->biquad_tilde_05_setupDone) && (bool)(!(bool)(force)))
        return;

    this->biquad_tilde_05_reset();
    this->biquad_tilde_05_setupDone = true;
}

void ip_07_init() {
    this->ip_07_lastValue = this->ip_07_value;
}

void ip_07_fillSigBuf() {
    if ((bool)(this->ip_07_sigbuf)) {
        SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);

        if (k >= (SampleIndex)(this->vs))
            k = (SampleIndex)(this->vs) - 1;

        for (SampleIndex i = (SampleIndex)(this->ip_07_lastIndex); i < k; i++) {
            if (this->ip_07_resetCount > 0) {
                this->ip_07_sigbuf[(Index)i] = 1;
                this->ip_07_resetCount--;
            } else {
                this->ip_07_sigbuf[(Index)i] = this->ip_07_lastValue;
            }
        }

        this->ip_07_lastIndex = k;
    }
}

void ip_07_dspsetup(bool force) {
    if ((bool)(this->ip_07_setupDone) && (bool)(!(bool)(force)))
        return;

    this->ip_07_lastIndex = 0;
    this->ip_07_setupDone = true;
}

void numberobj_49_init() {
    this->numberobj_49_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-196"), 1, this->_currentTime);
}

void numberobj_49_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_49_value;
}

void numberobj_49_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_49_value_set(preset["value"]);
}

void message_26_init() {
    this->message_26_set_set({1});
}

array<number, 5> filtercoeff_06_localop_next(number frequency, number q, number gain, number type) {
    number omega = frequency * this->filtercoeff_06_localop_twopi_over_sr;
    this->filtercoeff_06_localop_cs = rnbo_cos(omega);
    this->filtercoeff_06_localop_sn = rnbo_sin(omega);
    this->filtercoeff_06_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
    this->filtercoeff_06_localop_one_over_q = (number)1 / q;
    this->filtercoeff_06_localop_alpha = this->filtercoeff_06_localop_sn * 0.5 * this->filtercoeff_06_localop_one_over_q;

    switch ((int)type) {
    case 5:
        {
        this->filtercoeff_06_localop_A = this->safesqrt(gain);

        this->filtercoeff_06_localop_beta = this->safesqrt(
            (this->filtercoeff_06_localop_A * this->filtercoeff_06_localop_A + 1.) * this->filtercoeff_06_localop_one_over_q - (this->filtercoeff_06_localop_A - 1.) * (this->filtercoeff_06_localop_A - 1.)
        );

        this->filtercoeff_06_localop_b0 = (number)1 / (this->filtercoeff_06_localop_A + 1. + (this->filtercoeff_06_localop_A - 1.) * this->filtercoeff_06_localop_cs + this->filtercoeff_06_localop_beta * this->filtercoeff_06_localop_sn);
        break;
        }
    case 6:
        {
        this->filtercoeff_06_localop_A = this->safesqrt(gain);

        this->filtercoeff_06_localop_beta = this->safesqrt(
            (this->filtercoeff_06_localop_A * this->filtercoeff_06_localop_A + 1.) * this->filtercoeff_06_localop_one_over_q - (this->filtercoeff_06_localop_A - 1.) * (this->filtercoeff_06_localop_A - 1.)
        );

        this->filtercoeff_06_localop_b0 = (number)1 / (this->filtercoeff_06_localop_A + 1. - (this->filtercoeff_06_localop_A - 1.) * this->filtercoeff_06_localop_cs + this->filtercoeff_06_localop_beta * this->filtercoeff_06_localop_sn);
        break;
        }
    case 4:
        {
        this->filtercoeff_06_localop_A = this->safesqrt(gain);
        this->filtercoeff_06_localop_one_over_a = (this->filtercoeff_06_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_06_localop_A);
        this->filtercoeff_06_localop_b0 = (number)1 / (1. + this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_one_over_a);
        break;
        }
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
        {
        this->filtercoeff_06_localop_b0 = (number)1 / (1. + this->filtercoeff_06_localop_alpha);
        this->filtercoeff_06_localop_b0g = (number)1 / (this->filtercoeff_06_localop_one_over_gain + this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_one_over_gain);
        break;
        }
    default:
        {
        this->filtercoeff_06_localop_b0 = (number)1 / (1. + this->filtercoeff_06_localop_alpha);
        break;
        }
    }

    switch ((int)type) {
    case 0:
        {
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_la2 = (1. - this->filtercoeff_06_localop_cs) * 0.5 * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la1 = (1. - this->filtercoeff_06_localop_cs) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 1:
        {
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_la2 = (1. + this->filtercoeff_06_localop_cs) * 0.5 * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la1 = -(1. + this->filtercoeff_06_localop_cs) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 2:
        {
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la1 = 0.;
        this->filtercoeff_06_localop_la2 = -this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 7:
        {
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_alpha * q * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la1 = 0.;
        this->filtercoeff_06_localop_la2 = -this->filtercoeff_06_localop_alpha * q * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 3:
        {
        this->filtercoeff_06_localop_la1 = this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_la2 = this->filtercoeff_06_localop_b0;
        break;
        }
    case 8:
        {
        this->filtercoeff_06_localop_la1 = this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = this->filtercoeff_06_localop_la0 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la2 = 1.0;
        break;
        }
    case 4:
        {
        this->filtercoeff_06_localop_la0 = (1. + this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_A) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la1 = this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la2 = (1. - this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_A) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_one_over_a) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 5:
        {
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_A * (this->filtercoeff_06_localop_A + 1. - (this->filtercoeff_06_localop_A - 1.) * this->filtercoeff_06_localop_cs + this->filtercoeff_06_localop_beta * this->filtercoeff_06_localop_sn) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la1 = 2. * this->filtercoeff_06_localop_A * (this->filtercoeff_06_localop_A - 1 - (this->filtercoeff_06_localop_A + 1) * this->filtercoeff_06_localop_cs) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la2 = this->filtercoeff_06_localop_A * (this->filtercoeff_06_localop_A + 1. - (this->filtercoeff_06_localop_A - 1.) * this->filtercoeff_06_localop_cs - this->filtercoeff_06_localop_beta * this->filtercoeff_06_localop_sn) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb1 = -2. * (this->filtercoeff_06_localop_A - 1. + (this->filtercoeff_06_localop_A + 1.) * this->filtercoeff_06_localop_cs) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (this->filtercoeff_06_localop_A + 1. + (this->filtercoeff_06_localop_A - 1.) * this->filtercoeff_06_localop_cs - this->filtercoeff_06_localop_beta * this->filtercoeff_06_localop_sn) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 6:
        {
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_A * (this->filtercoeff_06_localop_A + 1. + (this->filtercoeff_06_localop_A - 1.) * this->filtercoeff_06_localop_cs + this->filtercoeff_06_localop_beta * this->filtercoeff_06_localop_sn) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la1 = -2. * this->filtercoeff_06_localop_A * (this->filtercoeff_06_localop_A - 1. + (this->filtercoeff_06_localop_A + 1.) * this->filtercoeff_06_localop_cs) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la2 = this->filtercoeff_06_localop_A * (this->filtercoeff_06_localop_A + 1. + (this->filtercoeff_06_localop_A - 1.) * this->filtercoeff_06_localop_cs - this->filtercoeff_06_localop_beta * this->filtercoeff_06_localop_sn) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb1 = 2. * (this->filtercoeff_06_localop_A - 1. - (this->filtercoeff_06_localop_A + 1.) * this->filtercoeff_06_localop_cs) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (this->filtercoeff_06_localop_A + 1. - (this->filtercoeff_06_localop_A - 1.) * this->filtercoeff_06_localop_cs - this->filtercoeff_06_localop_beta * this->filtercoeff_06_localop_sn) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 9:
        {
        this->filtercoeff_06_localop_b0g = (number)1 / (this->filtercoeff_06_localop_one_over_gain + this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_one_over_gain);
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_la2 = (1. - this->filtercoeff_06_localop_cs) * 0.5 * this->filtercoeff_06_localop_b0g;
        this->filtercoeff_06_localop_la1 = (1. - this->filtercoeff_06_localop_cs) * this->filtercoeff_06_localop_b0g;
        this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 10:
        {
        this->filtercoeff_06_localop_b0g = (number)1 / (this->filtercoeff_06_localop_one_over_gain + this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_one_over_gain);
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_la2 = (1. + this->filtercoeff_06_localop_cs) * 0.5 * this->filtercoeff_06_localop_b0g;
        this->filtercoeff_06_localop_la1 = -(1. + this->filtercoeff_06_localop_cs) * this->filtercoeff_06_localop_b0g;
        this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 11:
        {
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_alpha * gain * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la1 = 0.;
        this->filtercoeff_06_localop_la2 = -this->filtercoeff_06_localop_alpha * gain * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 13:
        {
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_alpha * gain * q * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la1 = 0.;
        this->filtercoeff_06_localop_la2 = -this->filtercoeff_06_localop_alpha * gain * q * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 12:
        {
        this->filtercoeff_06_localop_b0g = (number)1 / (this->filtercoeff_06_localop_one_over_gain + this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_one_over_gain);
        this->filtercoeff_06_localop_la1 = this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la1 *= this->filtercoeff_06_localop_b0g;
        this->filtercoeff_06_localop_lb1 *= this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_la0 = this->filtercoeff_06_localop_b0g;
        this->filtercoeff_06_localop_la2 = this->filtercoeff_06_localop_b0g;
        break;
        }
    case 14:
        {
        this->filtercoeff_06_localop_b0g = (number)1 / (this->filtercoeff_06_localop_one_over_gain + this->filtercoeff_06_localop_alpha * this->filtercoeff_06_localop_one_over_gain);
        this->filtercoeff_06_localop_la0 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0g;
        this->filtercoeff_06_localop_la1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0g;
        this->filtercoeff_06_localop_la2 = gain;
        this->filtercoeff_06_localop_lb1 = -2. * this->filtercoeff_06_localop_cs * this->filtercoeff_06_localop_b0;
        this->filtercoeff_06_localop_lb2 = (1. - this->filtercoeff_06_localop_alpha) * this->filtercoeff_06_localop_b0;
        break;
        }
    case 15:
        {
        this->filtercoeff_06_localop_la0 = 1;
        this->filtercoeff_06_localop_la1 = 0;
        this->filtercoeff_06_localop_la2 = 0;
        this->filtercoeff_06_localop_lb1 = 0;
        this->filtercoeff_06_localop_lb2 = 0;
        }
    default:
        {
        break;
        }
    }

    return {
        this->filtercoeff_06_localop_la0,
        this->filtercoeff_06_localop_la1,
        this->filtercoeff_06_localop_la2,
        this->filtercoeff_06_localop_lb1,
        this->filtercoeff_06_localop_lb2
    };
}

void filtercoeff_06_localop_dspsetup() {
    this->filtercoeff_06_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
}

void filtercoeff_06_localop_reset() {
    this->filtercoeff_06_localop_twopi_over_sr = 0;
    this->filtercoeff_06_localop_cs = 0;
    this->filtercoeff_06_localop_sn = 0;
    this->filtercoeff_06_localop_one_over_gain = 0;
    this->filtercoeff_06_localop_one_over_q = 0;
    this->filtercoeff_06_localop_alpha = 0;
    this->filtercoeff_06_localop_beta = 0;
    this->filtercoeff_06_localop_b0 = 0;
    this->filtercoeff_06_localop_b0g = 0;
    this->filtercoeff_06_localop_A = 0;
    this->filtercoeff_06_localop_one_over_a = 0;
    this->filtercoeff_06_localop_la0 = 0;
    this->filtercoeff_06_localop_la1 = 0;
    this->filtercoeff_06_localop_la2 = 0;
    this->filtercoeff_06_localop_lb1 = 0;
    this->filtercoeff_06_localop_lb2 = 0;
}

void filtercoeff_06_updateTerms(number local_frequency, number local_gain, number local_q) {
    if ((bool)(this->filtercoeff_06_force_update) || local_frequency != this->filtercoeff_06_last_frequency || local_q != this->filtercoeff_06_last_q || local_gain != this->filtercoeff_06_last_gain || this->filtercoeff_06_type != this->filtercoeff_06_last_type) {
        array<number, 5> tmp = this->filtercoeff_06_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_06_type);
        this->filtercoeff_06_la0 = tmp[0];
        this->filtercoeff_06_la1 = tmp[1];
        this->filtercoeff_06_la2 = tmp[2];
        this->filtercoeff_06_lb1 = tmp[3];
        this->filtercoeff_06_lb2 = tmp[4];
        this->filtercoeff_06_last_frequency = local_frequency;
        this->filtercoeff_06_last_q = local_q;
        this->filtercoeff_06_last_gain = local_gain;
        this->filtercoeff_06_last_type = this->filtercoeff_06_type;
        this->filtercoeff_06_force_update = false;
    }
}

void filtercoeff_06_dspsetup(bool force) {
    if ((bool)(this->filtercoeff_06_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->filtercoeff_06_activeResamp = this->vectorsize();
    }

    this->filtercoeff_06_resamp_counter = 0;
    this->filtercoeff_06_la0 = 0.;
    this->filtercoeff_06_la1 = 0.;
    this->filtercoeff_06_la2 = 0.;
    this->filtercoeff_06_lb1 = 0.;
    this->filtercoeff_06_lb2 = 0.;
    this->filtercoeff_06_last_frequency = -1.;
    this->filtercoeff_06_last_q = -1.;
    this->filtercoeff_06_last_gain = -1.;
    this->filtercoeff_06_last_type = this->filtercoeff_06_type;
    this->filtercoeff_06_force_update = true;
    this->filtercoeff_06_setupDone = true;
    this->filtercoeff_06_localop_dspsetup();
}

array<number, 5> filtercoeff_07_localop_next(number frequency, number q, number gain, number type) {
    number omega = frequency * this->filtercoeff_07_localop_twopi_over_sr;
    this->filtercoeff_07_localop_cs = rnbo_cos(omega);
    this->filtercoeff_07_localop_sn = rnbo_sin(omega);
    this->filtercoeff_07_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
    this->filtercoeff_07_localop_one_over_q = (number)1 / q;
    this->filtercoeff_07_localop_alpha = this->filtercoeff_07_localop_sn * 0.5 * this->filtercoeff_07_localop_one_over_q;

    switch ((int)type) {
    case 5:
        {
        this->filtercoeff_07_localop_A = this->safesqrt(gain);

        this->filtercoeff_07_localop_beta = this->safesqrt(
            (this->filtercoeff_07_localop_A * this->filtercoeff_07_localop_A + 1.) * this->filtercoeff_07_localop_one_over_q - (this->filtercoeff_07_localop_A - 1.) * (this->filtercoeff_07_localop_A - 1.)
        );

        this->filtercoeff_07_localop_b0 = (number)1 / (this->filtercoeff_07_localop_A + 1. + (this->filtercoeff_07_localop_A - 1.) * this->filtercoeff_07_localop_cs + this->filtercoeff_07_localop_beta * this->filtercoeff_07_localop_sn);
        break;
        }
    case 6:
        {
        this->filtercoeff_07_localop_A = this->safesqrt(gain);

        this->filtercoeff_07_localop_beta = this->safesqrt(
            (this->filtercoeff_07_localop_A * this->filtercoeff_07_localop_A + 1.) * this->filtercoeff_07_localop_one_over_q - (this->filtercoeff_07_localop_A - 1.) * (this->filtercoeff_07_localop_A - 1.)
        );

        this->filtercoeff_07_localop_b0 = (number)1 / (this->filtercoeff_07_localop_A + 1. - (this->filtercoeff_07_localop_A - 1.) * this->filtercoeff_07_localop_cs + this->filtercoeff_07_localop_beta * this->filtercoeff_07_localop_sn);
        break;
        }
    case 4:
        {
        this->filtercoeff_07_localop_A = this->safesqrt(gain);
        this->filtercoeff_07_localop_one_over_a = (this->filtercoeff_07_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_07_localop_A);
        this->filtercoeff_07_localop_b0 = (number)1 / (1. + this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_one_over_a);
        break;
        }
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
        {
        this->filtercoeff_07_localop_b0 = (number)1 / (1. + this->filtercoeff_07_localop_alpha);
        this->filtercoeff_07_localop_b0g = (number)1 / (this->filtercoeff_07_localop_one_over_gain + this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_one_over_gain);
        break;
        }
    default:
        {
        this->filtercoeff_07_localop_b0 = (number)1 / (1. + this->filtercoeff_07_localop_alpha);
        break;
        }
    }

    switch ((int)type) {
    case 0:
        {
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_la2 = (1. - this->filtercoeff_07_localop_cs) * 0.5 * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la1 = (1. - this->filtercoeff_07_localop_cs) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 1:
        {
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_la2 = (1. + this->filtercoeff_07_localop_cs) * 0.5 * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la1 = -(1. + this->filtercoeff_07_localop_cs) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 2:
        {
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la1 = 0.;
        this->filtercoeff_07_localop_la2 = -this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 7:
        {
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_alpha * q * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la1 = 0.;
        this->filtercoeff_07_localop_la2 = -this->filtercoeff_07_localop_alpha * q * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 3:
        {
        this->filtercoeff_07_localop_la1 = this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_la2 = this->filtercoeff_07_localop_b0;
        break;
        }
    case 8:
        {
        this->filtercoeff_07_localop_la1 = this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = this->filtercoeff_07_localop_la0 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la2 = 1.0;
        break;
        }
    case 4:
        {
        this->filtercoeff_07_localop_la0 = (1. + this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_A) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la1 = this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la2 = (1. - this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_A) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_one_over_a) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 5:
        {
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_A * (this->filtercoeff_07_localop_A + 1. - (this->filtercoeff_07_localop_A - 1.) * this->filtercoeff_07_localop_cs + this->filtercoeff_07_localop_beta * this->filtercoeff_07_localop_sn) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la1 = 2. * this->filtercoeff_07_localop_A * (this->filtercoeff_07_localop_A - 1 - (this->filtercoeff_07_localop_A + 1) * this->filtercoeff_07_localop_cs) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la2 = this->filtercoeff_07_localop_A * (this->filtercoeff_07_localop_A + 1. - (this->filtercoeff_07_localop_A - 1.) * this->filtercoeff_07_localop_cs - this->filtercoeff_07_localop_beta * this->filtercoeff_07_localop_sn) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb1 = -2. * (this->filtercoeff_07_localop_A - 1. + (this->filtercoeff_07_localop_A + 1.) * this->filtercoeff_07_localop_cs) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (this->filtercoeff_07_localop_A + 1. + (this->filtercoeff_07_localop_A - 1.) * this->filtercoeff_07_localop_cs - this->filtercoeff_07_localop_beta * this->filtercoeff_07_localop_sn) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 6:
        {
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_A * (this->filtercoeff_07_localop_A + 1. + (this->filtercoeff_07_localop_A - 1.) * this->filtercoeff_07_localop_cs + this->filtercoeff_07_localop_beta * this->filtercoeff_07_localop_sn) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la1 = -2. * this->filtercoeff_07_localop_A * (this->filtercoeff_07_localop_A - 1. + (this->filtercoeff_07_localop_A + 1.) * this->filtercoeff_07_localop_cs) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la2 = this->filtercoeff_07_localop_A * (this->filtercoeff_07_localop_A + 1. + (this->filtercoeff_07_localop_A - 1.) * this->filtercoeff_07_localop_cs - this->filtercoeff_07_localop_beta * this->filtercoeff_07_localop_sn) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb1 = 2. * (this->filtercoeff_07_localop_A - 1. - (this->filtercoeff_07_localop_A + 1.) * this->filtercoeff_07_localop_cs) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (this->filtercoeff_07_localop_A + 1. - (this->filtercoeff_07_localop_A - 1.) * this->filtercoeff_07_localop_cs - this->filtercoeff_07_localop_beta * this->filtercoeff_07_localop_sn) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 9:
        {
        this->filtercoeff_07_localop_b0g = (number)1 / (this->filtercoeff_07_localop_one_over_gain + this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_one_over_gain);
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_la2 = (1. - this->filtercoeff_07_localop_cs) * 0.5 * this->filtercoeff_07_localop_b0g;
        this->filtercoeff_07_localop_la1 = (1. - this->filtercoeff_07_localop_cs) * this->filtercoeff_07_localop_b0g;
        this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 10:
        {
        this->filtercoeff_07_localop_b0g = (number)1 / (this->filtercoeff_07_localop_one_over_gain + this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_one_over_gain);
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_la2 = (1. + this->filtercoeff_07_localop_cs) * 0.5 * this->filtercoeff_07_localop_b0g;
        this->filtercoeff_07_localop_la1 = -(1. + this->filtercoeff_07_localop_cs) * this->filtercoeff_07_localop_b0g;
        this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 11:
        {
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_alpha * gain * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la1 = 0.;
        this->filtercoeff_07_localop_la2 = -this->filtercoeff_07_localop_alpha * gain * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 13:
        {
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_alpha * gain * q * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la1 = 0.;
        this->filtercoeff_07_localop_la2 = -this->filtercoeff_07_localop_alpha * gain * q * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 12:
        {
        this->filtercoeff_07_localop_b0g = (number)1 / (this->filtercoeff_07_localop_one_over_gain + this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_one_over_gain);
        this->filtercoeff_07_localop_la1 = this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la1 *= this->filtercoeff_07_localop_b0g;
        this->filtercoeff_07_localop_lb1 *= this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_la0 = this->filtercoeff_07_localop_b0g;
        this->filtercoeff_07_localop_la2 = this->filtercoeff_07_localop_b0g;
        break;
        }
    case 14:
        {
        this->filtercoeff_07_localop_b0g = (number)1 / (this->filtercoeff_07_localop_one_over_gain + this->filtercoeff_07_localop_alpha * this->filtercoeff_07_localop_one_over_gain);
        this->filtercoeff_07_localop_la0 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0g;
        this->filtercoeff_07_localop_la1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0g;
        this->filtercoeff_07_localop_la2 = gain;
        this->filtercoeff_07_localop_lb1 = -2. * this->filtercoeff_07_localop_cs * this->filtercoeff_07_localop_b0;
        this->filtercoeff_07_localop_lb2 = (1. - this->filtercoeff_07_localop_alpha) * this->filtercoeff_07_localop_b0;
        break;
        }
    case 15:
        {
        this->filtercoeff_07_localop_la0 = 1;
        this->filtercoeff_07_localop_la1 = 0;
        this->filtercoeff_07_localop_la2 = 0;
        this->filtercoeff_07_localop_lb1 = 0;
        this->filtercoeff_07_localop_lb2 = 0;
        }
    default:
        {
        break;
        }
    }

    return {
        this->filtercoeff_07_localop_la0,
        this->filtercoeff_07_localop_la1,
        this->filtercoeff_07_localop_la2,
        this->filtercoeff_07_localop_lb1,
        this->filtercoeff_07_localop_lb2
    };
}

void filtercoeff_07_localop_dspsetup() {
    this->filtercoeff_07_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
}

void filtercoeff_07_localop_reset() {
    this->filtercoeff_07_localop_twopi_over_sr = 0;
    this->filtercoeff_07_localop_cs = 0;
    this->filtercoeff_07_localop_sn = 0;
    this->filtercoeff_07_localop_one_over_gain = 0;
    this->filtercoeff_07_localop_one_over_q = 0;
    this->filtercoeff_07_localop_alpha = 0;
    this->filtercoeff_07_localop_beta = 0;
    this->filtercoeff_07_localop_b0 = 0;
    this->filtercoeff_07_localop_b0g = 0;
    this->filtercoeff_07_localop_A = 0;
    this->filtercoeff_07_localop_one_over_a = 0;
    this->filtercoeff_07_localop_la0 = 0;
    this->filtercoeff_07_localop_la1 = 0;
    this->filtercoeff_07_localop_la2 = 0;
    this->filtercoeff_07_localop_lb1 = 0;
    this->filtercoeff_07_localop_lb2 = 0;
}

void filtercoeff_07_updateTerms(number local_frequency, number local_gain, number local_q) {
    if ((bool)(this->filtercoeff_07_force_update) || local_frequency != this->filtercoeff_07_last_frequency || local_q != this->filtercoeff_07_last_q || local_gain != this->filtercoeff_07_last_gain || this->filtercoeff_07_type != this->filtercoeff_07_last_type) {
        array<number, 5> tmp = this->filtercoeff_07_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_07_type);
        this->filtercoeff_07_la0 = tmp[0];
        this->filtercoeff_07_la1 = tmp[1];
        this->filtercoeff_07_la2 = tmp[2];
        this->filtercoeff_07_lb1 = tmp[3];
        this->filtercoeff_07_lb2 = tmp[4];
        this->filtercoeff_07_last_frequency = local_frequency;
        this->filtercoeff_07_last_q = local_q;
        this->filtercoeff_07_last_gain = local_gain;
        this->filtercoeff_07_last_type = this->filtercoeff_07_type;
        this->filtercoeff_07_force_update = false;
    }
}

void filtercoeff_07_dspsetup(bool force) {
    if ((bool)(this->filtercoeff_07_setupDone) && (bool)(!(bool)(force)))
        return;

    {
        this->filtercoeff_07_activeResamp = this->vectorsize();
    }

    this->filtercoeff_07_resamp_counter = 0;
    this->filtercoeff_07_la0 = 0.;
    this->filtercoeff_07_la1 = 0.;
    this->filtercoeff_07_la2 = 0.;
    this->filtercoeff_07_lb1 = 0.;
    this->filtercoeff_07_lb2 = 0.;
    this->filtercoeff_07_last_frequency = -1.;
    this->filtercoeff_07_last_q = -1.;
    this->filtercoeff_07_last_gain = -1.;
    this->filtercoeff_07_last_type = this->filtercoeff_07_type;
    this->filtercoeff_07_force_update = true;
    this->filtercoeff_07_setupDone = true;
    this->filtercoeff_07_localop_dspsetup();
}

number numbertilde_46_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_46_smooth_d_prev);
    this->numbertilde_46_smooth_d_prev = x;
    return temp;
}

void numbertilde_46_smooth_d_dspsetup() {
    this->numbertilde_46_smooth_d_reset();
}

void numbertilde_46_smooth_d_reset() {
    this->numbertilde_46_smooth_d_prev = 0;
}

number numbertilde_46_smooth_next(number x, number up, number down) {
    if (this->numbertilde_46_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_46_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_46_smooth_index = _up;
            this->numbertilde_46_smooth_increment = (x - this->numbertilde_46_smooth_prev) / _up;
        } else if (x < this->numbertilde_46_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_46_smooth_index = _down;
            this->numbertilde_46_smooth_increment = (x - this->numbertilde_46_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_46_smooth_index > 0) {
        this->numbertilde_46_smooth_prev += this->numbertilde_46_smooth_increment;
        this->numbertilde_46_smooth_index -= 1;
    } else {
        this->numbertilde_46_smooth_prev = x;
    }

    return this->numbertilde_46_smooth_prev;
}

void numbertilde_46_smooth_reset() {
    this->numbertilde_46_smooth_prev = 0;
    this->numbertilde_46_smooth_index = 0;
    this->numbertilde_46_smooth_increment = 0;
    this->numbertilde_46_smooth_d_reset();
}

void numbertilde_46_init() {
    this->numbertilde_46_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-408"), 1, this->_currentTime);
}

void numbertilde_46_dspsetup(bool force) {
    if ((bool)(this->numbertilde_46_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_46_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_46_currentInterval = this->numbertilde_46_currentIntervalInSamples;
    this->numbertilde_46_rampInSamples = this->mstosamps(this->numbertilde_46_ramp);
    this->numbertilde_46_setupDone = true;
    this->numbertilde_46_smooth_d_dspsetup();
}

number numbertilde_47_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_47_smooth_d_prev);
    this->numbertilde_47_smooth_d_prev = x;
    return temp;
}

void numbertilde_47_smooth_d_dspsetup() {
    this->numbertilde_47_smooth_d_reset();
}

void numbertilde_47_smooth_d_reset() {
    this->numbertilde_47_smooth_d_prev = 0;
}

number numbertilde_47_smooth_next(number x, number up, number down) {
    if (this->numbertilde_47_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_47_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_47_smooth_index = _up;
            this->numbertilde_47_smooth_increment = (x - this->numbertilde_47_smooth_prev) / _up;
        } else if (x < this->numbertilde_47_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_47_smooth_index = _down;
            this->numbertilde_47_smooth_increment = (x - this->numbertilde_47_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_47_smooth_index > 0) {
        this->numbertilde_47_smooth_prev += this->numbertilde_47_smooth_increment;
        this->numbertilde_47_smooth_index -= 1;
    } else {
        this->numbertilde_47_smooth_prev = x;
    }

    return this->numbertilde_47_smooth_prev;
}

void numbertilde_47_smooth_reset() {
    this->numbertilde_47_smooth_prev = 0;
    this->numbertilde_47_smooth_index = 0;
    this->numbertilde_47_smooth_increment = 0;
    this->numbertilde_47_smooth_d_reset();
}

void numbertilde_47_init() {
    this->numbertilde_47_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-426"), 1, this->_currentTime);
}

void numbertilde_47_dspsetup(bool force) {
    if ((bool)(this->numbertilde_47_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_47_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_47_currentInterval = this->numbertilde_47_currentIntervalInSamples;
    this->numbertilde_47_rampInSamples = this->mstosamps(this->numbertilde_47_ramp);
    this->numbertilde_47_setupDone = true;
    this->numbertilde_47_smooth_d_dspsetup();
}

void message_27_init() {
    this->message_27_set_set({5000});
}

number numbertilde_48_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_48_smooth_d_prev);
    this->numbertilde_48_smooth_d_prev = x;
    return temp;
}

void numbertilde_48_smooth_d_dspsetup() {
    this->numbertilde_48_smooth_d_reset();
}

void numbertilde_48_smooth_d_reset() {
    this->numbertilde_48_smooth_d_prev = 0;
}

number numbertilde_48_smooth_next(number x, number up, number down) {
    if (this->numbertilde_48_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_48_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_48_smooth_index = _up;
            this->numbertilde_48_smooth_increment = (x - this->numbertilde_48_smooth_prev) / _up;
        } else if (x < this->numbertilde_48_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_48_smooth_index = _down;
            this->numbertilde_48_smooth_increment = (x - this->numbertilde_48_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_48_smooth_index > 0) {
        this->numbertilde_48_smooth_prev += this->numbertilde_48_smooth_increment;
        this->numbertilde_48_smooth_index -= 1;
    } else {
        this->numbertilde_48_smooth_prev = x;
    }

    return this->numbertilde_48_smooth_prev;
}

void numbertilde_48_smooth_reset() {
    this->numbertilde_48_smooth_prev = 0;
    this->numbertilde_48_smooth_index = 0;
    this->numbertilde_48_smooth_increment = 0;
    this->numbertilde_48_smooth_d_reset();
}

void numbertilde_48_init() {
    this->numbertilde_48_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-371"), 1, this->_currentTime);
}

void numbertilde_48_dspsetup(bool force) {
    if ((bool)(this->numbertilde_48_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_48_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_48_currentInterval = this->numbertilde_48_currentIntervalInSamples;
    this->numbertilde_48_rampInSamples = this->mstosamps(this->numbertilde_48_ramp);
    this->numbertilde_48_setupDone = true;
    this->numbertilde_48_smooth_d_dspsetup();
}

void message_28_init() {
    this->message_28_set_set({270});
}

void numberobj_50_init() {
    this->numberobj_50_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-369"), 1, this->_currentTime);
}

void numberobj_50_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_50_value;
}

void numberobj_50_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_50_value_set(preset["value"]);
}

number numbertilde_49_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_49_smooth_d_prev);
    this->numbertilde_49_smooth_d_prev = x;
    return temp;
}

void numbertilde_49_smooth_d_dspsetup() {
    this->numbertilde_49_smooth_d_reset();
}

void numbertilde_49_smooth_d_reset() {
    this->numbertilde_49_smooth_d_prev = 0;
}

number numbertilde_49_smooth_next(number x, number up, number down) {
    if (this->numbertilde_49_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_49_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_49_smooth_index = _up;
            this->numbertilde_49_smooth_increment = (x - this->numbertilde_49_smooth_prev) / _up;
        } else if (x < this->numbertilde_49_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_49_smooth_index = _down;
            this->numbertilde_49_smooth_increment = (x - this->numbertilde_49_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_49_smooth_index > 0) {
        this->numbertilde_49_smooth_prev += this->numbertilde_49_smooth_increment;
        this->numbertilde_49_smooth_index -= 1;
    } else {
        this->numbertilde_49_smooth_prev = x;
    }

    return this->numbertilde_49_smooth_prev;
}

void numbertilde_49_smooth_reset() {
    this->numbertilde_49_smooth_prev = 0;
    this->numbertilde_49_smooth_index = 0;
    this->numbertilde_49_smooth_increment = 0;
    this->numbertilde_49_smooth_d_reset();
}

void numbertilde_49_init() {
    this->numbertilde_49_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-409"), 1, this->_currentTime);
}

void numbertilde_49_dspsetup(bool force) {
    if ((bool)(this->numbertilde_49_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_49_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_49_currentInterval = this->numbertilde_49_currentIntervalInSamples;
    this->numbertilde_49_rampInSamples = this->mstosamps(this->numbertilde_49_ramp);
    this->numbertilde_49_setupDone = true;
    this->numbertilde_49_smooth_d_dspsetup();
}

number numbertilde_50_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_50_smooth_d_prev);
    this->numbertilde_50_smooth_d_prev = x;
    return temp;
}

void numbertilde_50_smooth_d_dspsetup() {
    this->numbertilde_50_smooth_d_reset();
}

void numbertilde_50_smooth_d_reset() {
    this->numbertilde_50_smooth_d_prev = 0;
}

number numbertilde_50_smooth_next(number x, number up, number down) {
    if (this->numbertilde_50_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_50_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_50_smooth_index = _up;
            this->numbertilde_50_smooth_increment = (x - this->numbertilde_50_smooth_prev) / _up;
        } else if (x < this->numbertilde_50_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_50_smooth_index = _down;
            this->numbertilde_50_smooth_increment = (x - this->numbertilde_50_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_50_smooth_index > 0) {
        this->numbertilde_50_smooth_prev += this->numbertilde_50_smooth_increment;
        this->numbertilde_50_smooth_index -= 1;
    } else {
        this->numbertilde_50_smooth_prev = x;
    }

    return this->numbertilde_50_smooth_prev;
}

void numbertilde_50_smooth_reset() {
    this->numbertilde_50_smooth_prev = 0;
    this->numbertilde_50_smooth_index = 0;
    this->numbertilde_50_smooth_increment = 0;
    this->numbertilde_50_smooth_d_reset();
}

void numbertilde_50_init() {
    this->numbertilde_50_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-427"), 1, this->_currentTime);
}

void numbertilde_50_dspsetup(bool force) {
    if ((bool)(this->numbertilde_50_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_50_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_50_currentInterval = this->numbertilde_50_currentIntervalInSamples;
    this->numbertilde_50_rampInSamples = this->mstosamps(this->numbertilde_50_ramp);
    this->numbertilde_50_setupDone = true;
    this->numbertilde_50_smooth_d_dspsetup();
}

number numbertilde_51_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_51_smooth_d_prev);
    this->numbertilde_51_smooth_d_prev = x;
    return temp;
}

void numbertilde_51_smooth_d_dspsetup() {
    this->numbertilde_51_smooth_d_reset();
}

void numbertilde_51_smooth_d_reset() {
    this->numbertilde_51_smooth_d_prev = 0;
}

number numbertilde_51_smooth_next(number x, number up, number down) {
    if (this->numbertilde_51_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_51_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_51_smooth_index = _up;
            this->numbertilde_51_smooth_increment = (x - this->numbertilde_51_smooth_prev) / _up;
        } else if (x < this->numbertilde_51_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_51_smooth_index = _down;
            this->numbertilde_51_smooth_increment = (x - this->numbertilde_51_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_51_smooth_index > 0) {
        this->numbertilde_51_smooth_prev += this->numbertilde_51_smooth_increment;
        this->numbertilde_51_smooth_index -= 1;
    } else {
        this->numbertilde_51_smooth_prev = x;
    }

    return this->numbertilde_51_smooth_prev;
}

void numbertilde_51_smooth_reset() {
    this->numbertilde_51_smooth_prev = 0;
    this->numbertilde_51_smooth_index = 0;
    this->numbertilde_51_smooth_increment = 0;
    this->numbertilde_51_smooth_d_reset();
}

void numbertilde_51_init() {
    this->numbertilde_51_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-415"), 1, this->_currentTime);
}

void numbertilde_51_dspsetup(bool force) {
    if ((bool)(this->numbertilde_51_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_51_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_51_currentInterval = this->numbertilde_51_currentIntervalInSamples;
    this->numbertilde_51_rampInSamples = this->mstosamps(this->numbertilde_51_ramp);
    this->numbertilde_51_setupDone = true;
    this->numbertilde_51_smooth_d_dspsetup();
}

number numbertilde_52_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_52_smooth_d_prev);
    this->numbertilde_52_smooth_d_prev = x;
    return temp;
}

void numbertilde_52_smooth_d_dspsetup() {
    this->numbertilde_52_smooth_d_reset();
}

void numbertilde_52_smooth_d_reset() {
    this->numbertilde_52_smooth_d_prev = 0;
}

number numbertilde_52_smooth_next(number x, number up, number down) {
    if (this->numbertilde_52_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_52_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_52_smooth_index = _up;
            this->numbertilde_52_smooth_increment = (x - this->numbertilde_52_smooth_prev) / _up;
        } else if (x < this->numbertilde_52_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_52_smooth_index = _down;
            this->numbertilde_52_smooth_increment = (x - this->numbertilde_52_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_52_smooth_index > 0) {
        this->numbertilde_52_smooth_prev += this->numbertilde_52_smooth_increment;
        this->numbertilde_52_smooth_index -= 1;
    } else {
        this->numbertilde_52_smooth_prev = x;
    }

    return this->numbertilde_52_smooth_prev;
}

void numbertilde_52_smooth_reset() {
    this->numbertilde_52_smooth_prev = 0;
    this->numbertilde_52_smooth_index = 0;
    this->numbertilde_52_smooth_increment = 0;
    this->numbertilde_52_smooth_d_reset();
}

void numbertilde_52_init() {
    this->numbertilde_52_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-433"), 1, this->_currentTime);
}

void numbertilde_52_dspsetup(bool force) {
    if ((bool)(this->numbertilde_52_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_52_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_52_currentInterval = this->numbertilde_52_currentIntervalInSamples;
    this->numbertilde_52_rampInSamples = this->mstosamps(this->numbertilde_52_ramp);
    this->numbertilde_52_setupDone = true;
    this->numbertilde_52_smooth_d_dspsetup();
}

void message_29_init() {
    this->message_29_set_set({0.43});
}

void message_30_init() {
    this->message_30_set_set({0.75});
}

number numbertilde_53_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_53_smooth_d_prev);
    this->numbertilde_53_smooth_d_prev = x;
    return temp;
}

void numbertilde_53_smooth_d_dspsetup() {
    this->numbertilde_53_smooth_d_reset();
}

void numbertilde_53_smooth_d_reset() {
    this->numbertilde_53_smooth_d_prev = 0;
}

number numbertilde_53_smooth_next(number x, number up, number down) {
    if (this->numbertilde_53_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_53_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_53_smooth_index = _up;
            this->numbertilde_53_smooth_increment = (x - this->numbertilde_53_smooth_prev) / _up;
        } else if (x < this->numbertilde_53_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_53_smooth_index = _down;
            this->numbertilde_53_smooth_increment = (x - this->numbertilde_53_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_53_smooth_index > 0) {
        this->numbertilde_53_smooth_prev += this->numbertilde_53_smooth_increment;
        this->numbertilde_53_smooth_index -= 1;
    } else {
        this->numbertilde_53_smooth_prev = x;
    }

    return this->numbertilde_53_smooth_prev;
}

void numbertilde_53_smooth_reset() {
    this->numbertilde_53_smooth_prev = 0;
    this->numbertilde_53_smooth_index = 0;
    this->numbertilde_53_smooth_increment = 0;
    this->numbertilde_53_smooth_d_reset();
}

void numbertilde_53_init() {
    this->numbertilde_53_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-407"), 1, this->_currentTime);
}

void numbertilde_53_dspsetup(bool force) {
    if ((bool)(this->numbertilde_53_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_53_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_53_currentInterval = this->numbertilde_53_currentIntervalInSamples;
    this->numbertilde_53_rampInSamples = this->mstosamps(this->numbertilde_53_ramp);
    this->numbertilde_53_setupDone = true;
    this->numbertilde_53_smooth_d_dspsetup();
}

number numbertilde_54_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_54_smooth_d_prev);
    this->numbertilde_54_smooth_d_prev = x;
    return temp;
}

void numbertilde_54_smooth_d_dspsetup() {
    this->numbertilde_54_smooth_d_reset();
}

void numbertilde_54_smooth_d_reset() {
    this->numbertilde_54_smooth_d_prev = 0;
}

number numbertilde_54_smooth_next(number x, number up, number down) {
    if (this->numbertilde_54_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_54_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_54_smooth_index = _up;
            this->numbertilde_54_smooth_increment = (x - this->numbertilde_54_smooth_prev) / _up;
        } else if (x < this->numbertilde_54_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_54_smooth_index = _down;
            this->numbertilde_54_smooth_increment = (x - this->numbertilde_54_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_54_smooth_index > 0) {
        this->numbertilde_54_smooth_prev += this->numbertilde_54_smooth_increment;
        this->numbertilde_54_smooth_index -= 1;
    } else {
        this->numbertilde_54_smooth_prev = x;
    }

    return this->numbertilde_54_smooth_prev;
}

void numbertilde_54_smooth_reset() {
    this->numbertilde_54_smooth_prev = 0;
    this->numbertilde_54_smooth_index = 0;
    this->numbertilde_54_smooth_increment = 0;
    this->numbertilde_54_smooth_d_reset();
}

void numbertilde_54_init() {
    this->numbertilde_54_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-425"), 1, this->_currentTime);
}

void numbertilde_54_dspsetup(bool force) {
    if ((bool)(this->numbertilde_54_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_54_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_54_currentInterval = this->numbertilde_54_currentIntervalInSamples;
    this->numbertilde_54_rampInSamples = this->mstosamps(this->numbertilde_54_ramp);
    this->numbertilde_54_setupDone = true;
    this->numbertilde_54_smooth_d_dspsetup();
}

number numbertilde_55_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_55_smooth_d_prev);
    this->numbertilde_55_smooth_d_prev = x;
    return temp;
}

void numbertilde_55_smooth_d_dspsetup() {
    this->numbertilde_55_smooth_d_reset();
}

void numbertilde_55_smooth_d_reset() {
    this->numbertilde_55_smooth_d_prev = 0;
}

number numbertilde_55_smooth_next(number x, number up, number down) {
    if (this->numbertilde_55_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_55_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_55_smooth_index = _up;
            this->numbertilde_55_smooth_increment = (x - this->numbertilde_55_smooth_prev) / _up;
        } else if (x < this->numbertilde_55_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_55_smooth_index = _down;
            this->numbertilde_55_smooth_increment = (x - this->numbertilde_55_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_55_smooth_index > 0) {
        this->numbertilde_55_smooth_prev += this->numbertilde_55_smooth_increment;
        this->numbertilde_55_smooth_index -= 1;
    } else {
        this->numbertilde_55_smooth_prev = x;
    }

    return this->numbertilde_55_smooth_prev;
}

void numbertilde_55_smooth_reset() {
    this->numbertilde_55_smooth_prev = 0;
    this->numbertilde_55_smooth_index = 0;
    this->numbertilde_55_smooth_increment = 0;
    this->numbertilde_55_smooth_d_reset();
}

void numbertilde_55_init() {
    this->numbertilde_55_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-406"), 1, this->_currentTime);
}

void numbertilde_55_dspsetup(bool force) {
    if ((bool)(this->numbertilde_55_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_55_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_55_currentInterval = this->numbertilde_55_currentIntervalInSamples;
    this->numbertilde_55_rampInSamples = this->mstosamps(this->numbertilde_55_ramp);
    this->numbertilde_55_setupDone = true;
    this->numbertilde_55_smooth_d_dspsetup();
}

number numbertilde_56_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_56_smooth_d_prev);
    this->numbertilde_56_smooth_d_prev = x;
    return temp;
}

void numbertilde_56_smooth_d_dspsetup() {
    this->numbertilde_56_smooth_d_reset();
}

void numbertilde_56_smooth_d_reset() {
    this->numbertilde_56_smooth_d_prev = 0;
}

number numbertilde_56_smooth_next(number x, number up, number down) {
    if (this->numbertilde_56_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_56_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_56_smooth_index = _up;
            this->numbertilde_56_smooth_increment = (x - this->numbertilde_56_smooth_prev) / _up;
        } else if (x < this->numbertilde_56_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_56_smooth_index = _down;
            this->numbertilde_56_smooth_increment = (x - this->numbertilde_56_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_56_smooth_index > 0) {
        this->numbertilde_56_smooth_prev += this->numbertilde_56_smooth_increment;
        this->numbertilde_56_smooth_index -= 1;
    } else {
        this->numbertilde_56_smooth_prev = x;
    }

    return this->numbertilde_56_smooth_prev;
}

void numbertilde_56_smooth_reset() {
    this->numbertilde_56_smooth_prev = 0;
    this->numbertilde_56_smooth_index = 0;
    this->numbertilde_56_smooth_increment = 0;
    this->numbertilde_56_smooth_d_reset();
}

void numbertilde_56_init() {
    this->numbertilde_56_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-424"), 1, this->_currentTime);
}

void numbertilde_56_dspsetup(bool force) {
    if ((bool)(this->numbertilde_56_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_56_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_56_currentInterval = this->numbertilde_56_currentIntervalInSamples;
    this->numbertilde_56_rampInSamples = this->mstosamps(this->numbertilde_56_ramp);
    this->numbertilde_56_setupDone = true;
    this->numbertilde_56_smooth_d_dspsetup();
}

void timevalue_01_sendValue() {
    {
        {
            {
                {
                    this->timevalue_01_out_set(this->tickstoms(1920));
                }
            }
        }
    }
}

void timevalue_01_onTempoChanged(number tempo) {
    RNBO_UNUSED(tempo);

    {
        this->timevalue_01_sendValue();
    }
}

void timevalue_01_onSampleRateChanged(number ) {}

void timevalue_01_onTimeSignatureChanged(number , number ) {}

Index globaltransport_getSampleOffset(MillisecondTime time) {
    return this->mstosamps(this->maximum(0, time - this->getEngine()->getCurrentTime()));
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState(MillisecondTime time) {
    return this->globaltransport_getStateAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getTempo(MillisecondTime time) {
    return this->globaltransport_getTempoAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getBeatTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState(time) == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    number diffInBeats = diff * this->globaltransport_getTempo(time) * 0.008 / (number)480;
    return beatTimeBase + diffInBeats;
}

bool globaltransport_setTempo(MillisecondTime time, number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(time, tempo);
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getTempoAtSample((SampleIndex)(offset)) != tempo) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_tempo, this->vs, tempo, offset);
            this->globaltransport_lastTempo = tempo;
            this->globaltransport_tempoNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setState(MillisecondTime time, number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(time, TransportState(state));
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getStateAtSample(offset) != state) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_state, this->vs, state, offset);
            this->globaltransport_lastState = TransportState(state);
            this->globaltransport_stateNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setBeatTime(MillisecondTime time, number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(time, beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime(time));
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(time);
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTime(this->getEngine()->getCurrentTime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignature(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    MillisecondTime msOffset = (MillisecondTime)(this->sampstoms(sampleOffset));
    return this->globaltransport_getTimeSignature(this->getEngine()->getCurrentTime() + msOffset);
}

void globaltransport_setBBUBase(
    MillisecondTime time,
    number numerator,
    number denominator,
    number bars,
    number beats,
    number units
) {
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    bars--;
    beats--;
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;

    while (units > beatLengthInUnits) {
        units -= beatLengthInUnits;
        beats++;
    }

    number targetBeatTime = bars * numerator + beats + units / beatLengthInUnits;
    this->globaltransport_bbuBase = targetBeatTime - beatsIncCurrenttDenom;
}

array<number, 3> globaltransport_getBBU(MillisecondTime time) {
    array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);
    number numerator = currentSig[0];
    number denominator = currentSig[1];
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;
    number targetBeatTime = beatsIncCurrenttDenom + this->globaltransport_bbuBase;
    number currentBars = 0;
    number currentBeats = 0;
    number currentUnits = 0;

    if (targetBeatTime >= 0) {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;
        currentBeats = trunc(targetBeatTime);
        targetBeatTime -= currentBeats;
        currentUnits = targetBeatTime * beatLengthInUnits;
    } else {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;

        if (targetBeatTime != 0) {
            currentBars -= 1;
            currentBeats = trunc(targetBeatTime);
            targetBeatTime -= currentBeats;
            currentBeats = numerator + currentBeats;
            currentUnits = targetBeatTime * beatLengthInUnits;

            if (currentUnits != 0) {
                currentUnits = beatLengthInUnits + currentUnits;
                currentBeats -= 1;
            }
        }
    }

    return {currentBars + 1, currentBeats + 1, currentUnits};
}

bool globaltransport_setTimeSignature(MillisecondTime time, number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(time, (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            array<number, 3> bbu = this->globaltransport_getBBU(time);
            this->globaltransport_setBBUBase(time, numerator, denominator, bbu[0], bbu[1], bbu[2]);
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(time);
            return true;
        }
    }

    return false;
}

array<number, 3> globaltransport_getBBUAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBBU(this->getEngine()->getCurrentTime() + msOffset);
}

bool globaltransport_setBBU(MillisecondTime time, number bars, number beats, number units, bool notify) {
    RNBO_UNUSED(notify);
    array<number, 2> sig = this->globaltransport_getTimeSignature(time);
    number numerator = sig[0];
    number denominator = sig[1];
    this->globaltransport_setBBUBase(time, numerator, denominator, bars, beats, units);
    return true;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    param_01_value = 0.5;
    selector_01_onoff = 1;
    dspexpr_26_in1 = 0;
    dspexpr_26_in2 = 0.5;
    dspexpr_27_in1 = 0;
    dspexpr_27_in2 = 0;
    dspexpr_28_in1 = 0;
    dspexpr_28_in2 = 0;
    limi_03_bypass = 0;
    limi_03_dcblock = 0;
    limi_03_lookahead = 100;
    limi_03_lookahead_setter(limi_03_lookahead);
    limi_03_preamp = 0;
    limi_03_preamp_setter(limi_03_preamp);
    limi_03_postamp = 0;
    limi_03_postamp_setter(limi_03_postamp);
    limi_03_threshold = 0;
    limi_03_threshold_setter(limi_03_threshold);
    limi_03_release = 1000;
    dspexpr_29_in1 = 0;
    dspexpr_29_in2 = 0;
    p_01_target = 0;
    numberobj_12_value = 0;
    numberobj_12_value_setter(numberobj_12_value);
    dspexpr_30_in1 = 0;
    dspexpr_30_in2 = 0.5;
    dspexpr_31_in1 = 0;
    dspexpr_31_in2 = 0;
    numberobj_13_value = 0;
    numberobj_13_value_setter(numberobj_13_value);
    selector_02_onoff = 1;
    dspexpr_32_in1 = 0;
    dspexpr_32_in2 = 0;
    numberobj_14_value = 0;
    numberobj_14_value_setter(numberobj_14_value);
    dspexpr_33_in1 = 0;
    dspexpr_33_in2 = 0;
    limi_04_bypass = 0;
    limi_04_dcblock = 0;
    limi_04_lookahead = 100;
    limi_04_lookahead_setter(limi_04_lookahead);
    limi_04_preamp = 0;
    limi_04_preamp_setter(limi_04_preamp);
    limi_04_postamp = 0;
    limi_04_postamp_setter(limi_04_postamp);
    limi_04_threshold = 0;
    limi_04_threshold_setter(limi_04_threshold);
    limi_04_release = 1000;
    numbertilde_14_input_number = 0;
    numbertilde_14_ramp = 0;
    linetilde_04_time = 10;
    linetilde_04_keepramp = 1;
    scale_01_inlow = 0;
    scale_01_inhigh = 1;
    scale_01_outlow = 1;
    scale_01_outhigh = 0.7;
    scale_01_power = 1;
    expr_08_in1 = 0;
    expr_08_in2 = 1;
    expr_08_out1 = 0;
    expr_09_in1 = 0;
    expr_09_in2 = 1;
    expr_09_out1 = 0;
    toggle_01_value_number = 0;
    toggle_01_value_number_setter(toggle_01_value_number);
    numberobj_15_value = 0;
    numberobj_15_value_setter(numberobj_15_value);
    numberobj_16_value = 0;
    numberobj_16_value_setter(numberobj_16_value);
    expr_10_in1 = 0;
    expr_10_out1 = 0;
    scale_02_inlow = 0;
    scale_02_inhigh = 0.95;
    scale_02_outlow = 0;
    scale_02_outhigh = -7;
    scale_02_power = 2;
    param_02_value = 0.1;
    linetilde_05_time = 10;
    linetilde_05_keepramp = 1;
    numberobj_17_value = 0;
    numberobj_17_value_setter(numberobj_17_value);
    numbertilde_15_input_number = 0;
    numbertilde_15_ramp = 0;
    p_02_target = 0;
    numbertilde_16_input_number = 0;
    numbertilde_16_ramp = 0;
    dspexpr_34_in1 = 0;
    dspexpr_34_in2 = 0;
    dspexpr_35_in1 = 0;
    dspexpr_35_in2 = 1;
    rate_tilde_01_phase = 0;
    rate_tilde_01_multiplier = 2;
    triangle_tilde_01_phase = 0;
    triangle_tilde_01_duty = 0.5;
    scale_tilde_01_x = 0;
    scale_tilde_01_lowin = 0;
    scale_tilde_01_hiin = 1;
    scale_tilde_01_lowout = -1;
    scale_tilde_01_highout = 1;
    scale_tilde_01_pow = 1;
    gen_01_in1 = 0;
    gen_01_in2 = 0;
    gen_02_in1 = 0;
    gen_02_in2 = 0;
    gen_02_in3 = 0;
    gen_02_in4 = 0;
    gen_02_in5 = 0;
    gen_02_in6 = 0;
    gen_02_in7 = 0;
    gen_02_in8 = 0;
    gen_02_in9 = 0;
    p_03_target = 0;
    scale_03_inlow = 0.01;
    scale_03_inhigh = 100;
    scale_03_outlow = 0.01;
    scale_03_outhigh = 20;
    scale_03_power = 1.5;
    dspexpr_36_in1 = 0;
    dspexpr_36_in2 = 1;
    dspexpr_37_in1 = 0;
    dspexpr_37_in2 = 0;
    numbertilde_17_input_number = 0;
    numbertilde_17_ramp = 0;
    scale_tilde_02_x = 0;
    scale_tilde_02_lowin = 0;
    scale_tilde_02_hiin = 1;
    scale_tilde_02_lowout = -1;
    scale_tilde_02_highout = 1;
    scale_tilde_02_pow = 1;
    ip_01_value = 0;
    ip_01_impulse = 0;
    phasor_01_freq = 0;
    triangle_tilde_02_phase = 0;
    triangle_tilde_02_duty = 0.5;
    gen_03_in1 = 0;
    gen_03_in2 = 0;
    numberobj_18_value = 0;
    numberobj_18_value_setter(numberobj_18_value);
    numberobj_19_value = 0;
    numberobj_19_value_setter(numberobj_19_value);
    param_03_value = 0.05;
    slide_tilde_03_x = 0;
    slide_tilde_03_up = 10;
    slide_tilde_03_down = 10;
    slide_tilde_04_x = 0;
    slide_tilde_04_up = 10;
    slide_tilde_04_down = 10;
    ip_02_value = 0;
    ip_02_impulse = 0;
    ip_03_value = 0;
    ip_03_impulse = 0;
    numberobj_20_value = 0;
    numberobj_20_value_setter(numberobj_20_value);
    scale_04_inlow = 0;
    scale_04_inhigh = 20;
    scale_04_outlow = 0.03;
    scale_04_outhigh = 0.29;
    scale_04_power = 0.7;
    numberobj_21_value = 0;
    numberobj_21_value_setter(numberobj_21_value);
    dspexpr_38_in1 = 0;
    dspexpr_39_in1 = 0;
    dspexpr_39_in2 = 0;
    dspexpr_40_in1 = 0;
    dspexpr_40_in2 = 0;
    scale_tilde_03_x = 0;
    scale_tilde_03_lowin = 0;
    scale_tilde_03_hiin = 1;
    scale_tilde_03_lowout = 1;
    scale_tilde_03_highout = 2.34;
    scale_tilde_03_pow = 1;
    p_04_target = 0;
    numbertilde_18_input_number = 0;
    numbertilde_18_ramp = 0;
    numberobj_22_value = 0;
    numberobj_22_value_setter(numberobj_22_value);
    toggle_02_value_number = 0;
    toggle_02_value_number_setter(toggle_02_value_number);
    numbertilde_19_input_number = 0;
    numbertilde_19_ramp = 0;
    numberobj_23_value = 0;
    numberobj_23_value_setter(numberobj_23_value);
    filtercoeff_02_frequency = 1000;
    filtercoeff_02_gain = 1;
    filtercoeff_02_q = 1;
    filtercoeff_02_type = 2;
    param_04_value = 0.1;
    dspexpr_41_in1 = 0;
    dspexpr_41_in2 = 1;
    dspexpr_42_in1 = 0;
    dspexpr_42_in2 = 0;
    dspexpr_43_in1 = 0;
    dspexpr_43_in2 = 0;
    linetilde_06_time = 10;
    linetilde_06_keepramp = 1;
    expr_11_in1 = 0;
    expr_11_in2 = 1;
    expr_11_out1 = 0;
    dspexpr_44_in1 = 0;
    dspexpr_44_in2 = 0;
    numberobj_24_value = 0;
    numberobj_24_value_setter(numberobj_24_value);
    numberobj_25_value = 0;
    numberobj_25_value_setter(numberobj_25_value);
    scale_05_inlow = 0;
    scale_05_inhigh = 100;
    scale_05_outlow = 0;
    scale_05_outhigh = 60;
    scale_05_power = 1;
    numbertilde_20_input_number = 0;
    numbertilde_20_ramp = 0;
    numbertilde_21_input_number = 0;
    numbertilde_21_ramp = 0;
    dspexpr_45_in1 = 0;
    dspexpr_45_in2 = 1;
    numberobj_26_value = 0;
    numberobj_26_value_setter(numberobj_26_value);
    linetilde_07_time = 10;
    linetilde_07_keepramp = 1;
    expr_12_in1 = 0;
    expr_12_in2 = 1;
    expr_12_out1 = 0;
    linetilde_08_time = 10;
    linetilde_08_keepramp = 1;
    numbertilde_22_input_number = 0;
    numbertilde_22_ramp = 0;
    scale_tilde_04_x = 0;
    scale_tilde_04_lowin = -1;
    scale_tilde_04_hiin = 1;
    scale_tilde_04_lowout = 0;
    scale_tilde_04_highout = 1;
    scale_tilde_04_pow = 1;
    dspexpr_46_in1 = 0;
    dspexpr_46_in2 = 0;
    dspexpr_47_in1 = 0;
    dspexpr_47_in2 = 1;
    linetilde_09_time = 10;
    linetilde_09_keepramp = 1;
    numberobj_27_value = 0;
    numberobj_27_value_setter(numberobj_27_value);
    param_05_value = 1000;
    numbertilde_23_input_number = 0;
    numbertilde_23_ramp = 0;
    dspexpr_48_in1 = 0;
    dspexpr_48_in2 = 0;
    scale_06_inlow = 0;
    scale_06_inhigh = 20;
    scale_06_outlow = 0.05;
    scale_06_outhigh = 20;
    scale_06_power = 2;
    numberobj_28_value = 0;
    numberobj_28_value_setter(numberobj_28_value);
    dspexpr_49_in1 = 0;
    dspexpr_49_in2 = 1;
    linetilde_10_time = 10;
    linetilde_10_keepramp = 1;
    numberobj_29_value = 0;
    numberobj_29_value_setter(numberobj_29_value);
    gen_04_in1 = 0;
    gen_04_in2 = 0;
    scale_07_inlow = 0;
    scale_07_inhigh = 20;
    scale_07_outlow = 0.46;
    scale_07_outhigh = 0.06;
    scale_07_power = 0.7;
    numbertilde_24_input_number = 0;
    numbertilde_24_ramp = 0;
    numbertilde_25_input_number = 0;
    numbertilde_25_ramp = 0;
    numberobj_30_value = 0;
    numberobj_30_value_setter(numberobj_30_value);
    numberobj_31_value = 0;
    numberobj_31_value_setter(numberobj_31_value);
    param_06_value = 0;
    param_07_value = 0.5;
    select_01_test1 = 270;
    expr_13_in1 = 0;
    expr_13_in2 = 1;
    expr_13_out1 = 0;
    toggle_03_value_number = 0;
    toggle_03_value_number_setter(toggle_03_value_number);
    selector_03_onoff = 1;
    biquad_tilde_02_x = 0;
    biquad_tilde_02_a0 = 0;
    biquad_tilde_02_a1 = 0;
    biquad_tilde_02_a2 = 0;
    biquad_tilde_02_b1 = 0;
    biquad_tilde_02_b2 = 0;
    biquad_tilde_03_x = 0;
    biquad_tilde_03_a0 = 0;
    biquad_tilde_03_a1 = 0;
    biquad_tilde_03_a2 = 0;
    biquad_tilde_03_b1 = 0;
    biquad_tilde_03_b2 = 0;
    ip_04_value = 0;
    ip_04_impulse = 0;
    numberobj_32_value = 0;
    numberobj_32_value_setter(numberobj_32_value);
    select_02_test1 = 0;
    select_02_test2 = 1;
    filtercoeff_03_frequency = 1000;
    filtercoeff_03_gain = 1;
    filtercoeff_03_q = 1;
    filtercoeff_03_type = 1;
    delay_01_time = 10;
    delay_01_delayall = 1;
    filtercoeff_04_frequency = 1000;
    filtercoeff_04_gain = 1;
    filtercoeff_04_q = 1;
    filtercoeff_04_type = 0;
    numbertilde_26_input_number = 0;
    numbertilde_26_ramp = 0;
    numbertilde_27_input_number = 0;
    numbertilde_27_ramp = 0;
    slide_tilde_05_x = 0;
    slide_tilde_05_up = 500;
    slide_tilde_05_down = 500;
    numbertilde_28_input_number = 0;
    numbertilde_28_ramp = 0;
    dspexpr_50_in1 = 0;
    dspexpr_50_in2 = 0;
    numberobj_33_value = 0;
    numberobj_33_value_setter(numberobj_33_value);
    scale_08_inlow = 0;
    scale_08_inhigh = 1;
    scale_08_outlow = 0.15;
    scale_08_outhigh = 1;
    scale_08_power = 1;
    numberobj_34_value = 0;
    numberobj_34_value_setter(numberobj_34_value);
    expr_14_in1 = 0;
    expr_14_in2 = 1;
    expr_14_out1 = 0;
    param_08_value = 0;
    p_05_target = 0;
    numberobj_35_value = 0;
    numberobj_35_value_setter(numberobj_35_value);
    numberobj_36_value = 0;
    numberobj_36_value_setter(numberobj_36_value);
    numbertilde_29_input_number = 0;
    numbertilde_29_ramp = 0;
    numbertilde_30_input_number = 0;
    numbertilde_30_ramp = 0;
    param_09_value = 0;
    numbertilde_31_input_number = 0;
    numbertilde_31_ramp = 0;
    numbertilde_32_input_number = 0;
    numbertilde_32_ramp = 0;
    numbertilde_33_input_number = 0;
    numbertilde_33_ramp = 0;
    numbertilde_34_input_number = 0;
    numbertilde_34_ramp = 0;
    transport_01_input_number = 0;
    transport_01_position = 0;
    transport_01_tempo = 120;
    transport_01_ticks = 0;
    metro_01_on = 1;
    metro_01_interval = 0;
    metro_01_interval_setter(metro_01_interval);
    expr_15_in1 = 0;
    expr_15_in2 = 1;
    expr_15_out1 = 0;
    numberobj_37_value = 0;
    numberobj_37_value_setter(numberobj_37_value);
    select_03_test1 = 0;
    param_10_value = 1;
    numberobj_38_value = 0;
    numberobj_38_value_setter(numberobj_38_value);
    numberobj_39_value = 0;
    numberobj_39_value_setter(numberobj_39_value);
    numbertilde_35_input_number = 0;
    numbertilde_35_ramp = 0;
    numbertilde_36_input_number = 0;
    numbertilde_36_ramp = 0;
    param_11_value = 25;
    dspexpr_51_in1 = 0;
    dspexpr_51_in2 = 0;
    triangle_tilde_03_phase = 0;
    triangle_tilde_03_duty = 0.5;
    gen_05_in1 = 0;
    gen_05_in2 = 0;
    numbertilde_37_input_number = 0;
    numbertilde_37_ramp = 0;
    dspexpr_52_in1 = 0;
    dspexpr_52_in2 = 0;
    dspexpr_53_in1 = 0;
    dspexpr_53_in2 = 1;
    rate_tilde_02_phase = 0;
    rate_tilde_02_multiplier = 2;
    triangle_tilde_04_phase = 0;
    triangle_tilde_04_duty = 0.5;
    scale_tilde_05_x = 0;
    scale_tilde_05_lowin = 0;
    scale_tilde_05_hiin = 1;
    scale_tilde_05_lowout = -1;
    scale_tilde_05_highout = 1;
    scale_tilde_05_pow = 1;
    gen_06_in1 = 0;
    gen_06_in2 = 0;
    dspexpr_54_in1 = 0;
    dspexpr_55_in1 = 0;
    dspexpr_55_in2 = 0;
    param_12_value = 0;
    gen_07_in1 = 0;
    gen_07_in2 = 0;
    gen_07_in3 = 0;
    gen_07_in4 = 0;
    gen_07_in5 = 0;
    gen_07_in6 = 0;
    gen_07_in7 = 0;
    gen_07_in8 = 0;
    gen_07_in9 = 0;
    dspexpr_56_in1 = 0;
    dspexpr_56_in2 = 1;
    dspexpr_57_in1 = 0;
    dspexpr_57_in2 = 0;
    numbertilde_38_input_number = 0;
    numbertilde_38_ramp = 0;
    scale_tilde_06_x = 0;
    scale_tilde_06_lowin = 0;
    scale_tilde_06_hiin = 1;
    scale_tilde_06_lowout = -1;
    scale_tilde_06_highout = 1;
    scale_tilde_06_pow = 1;
    numbertilde_39_input_number = 0;
    numbertilde_39_ramp = 0;
    scale_tilde_07_x = 0;
    scale_tilde_07_lowin = 0;
    scale_tilde_07_hiin = 1;
    scale_tilde_07_lowout = 1;
    scale_tilde_07_highout = 2.34;
    scale_tilde_07_pow = 1;
    slide_tilde_06_x = 0;
    slide_tilde_06_up = 10;
    slide_tilde_06_down = 10;
    linetilde_11_time = 10;
    linetilde_11_keepramp = 1;
    numberobj_40_value = 0;
    numberobj_40_value_setter(numberobj_40_value);
    scale_09_inlow = 0;
    scale_09_inhigh = 1;
    scale_09_outlow = 0;
    scale_09_outhigh = 0.5;
    scale_09_power = 2;
    slide_tilde_07_x = 0;
    slide_tilde_07_up = 10;
    slide_tilde_07_down = 10;
    ip_05_value = 0;
    ip_05_impulse = 0;
    ip_06_value = 0;
    ip_06_impulse = 0;
    numberobj_41_value = 0;
    numberobj_41_value_setter(numberobj_41_value);
    scale_10_inlow = 0;
    scale_10_inhigh = 20;
    scale_10_outlow = 0.03;
    scale_10_outhigh = 0.29;
    scale_10_power = 0.7;
    numberobj_42_value = 0;
    numberobj_42_value_setter(numberobj_42_value);
    param_13_value = 0.5;
    numberobj_43_value = 0;
    numberobj_43_value_setter(numberobj_43_value);
    numbertilde_40_input_number = 0;
    numbertilde_40_ramp = 0;
    numberobj_44_value = 0;
    numberobj_44_value_setter(numberobj_44_value);
    filtercoeff_05_frequency = 1000;
    filtercoeff_05_gain = 1;
    filtercoeff_05_q = 1;
    filtercoeff_05_type = 2;
    dspexpr_58_in1 = 0;
    dspexpr_58_in2 = 1;
    dspexpr_59_in1 = 0;
    dspexpr_59_in2 = 0;
    dspexpr_60_in1 = 0;
    dspexpr_60_in2 = 0;
    linetilde_12_time = 10;
    linetilde_12_keepramp = 1;
    expr_18_in1 = 0;
    expr_18_in2 = 1;
    expr_18_out1 = 0;
    dspexpr_61_in1 = 0;
    dspexpr_61_in2 = 0;
    numbertilde_41_input_number = 0;
    numbertilde_41_ramp = 0;
    numbertilde_42_input_number = 0;
    numbertilde_42_ramp = 0;
    param_14_value = 1;
    dspexpr_62_in1 = 0;
    dspexpr_62_in2 = 1;
    numberobj_45_value = 0;
    numberobj_45_value_setter(numberobj_45_value);
    linetilde_13_time = 10;
    linetilde_13_keepramp = 1;
    expr_19_in1 = 0;
    expr_19_in2 = 1;
    expr_19_out1 = 0;
    linetilde_14_time = 10;
    linetilde_14_keepramp = 1;
    numbertilde_43_input_number = 0;
    numbertilde_43_ramp = 0;
    scale_tilde_08_x = 0;
    scale_tilde_08_lowin = -1;
    scale_tilde_08_hiin = 1;
    scale_tilde_08_lowout = 0;
    scale_tilde_08_highout = 1;
    scale_tilde_08_pow = 1;
    dspexpr_63_in1 = 0;
    dspexpr_63_in2 = 0;
    dspexpr_64_in1 = 0;
    dspexpr_64_in2 = 1;
    linetilde_15_time = 10;
    linetilde_15_keepramp = 1;
    numberobj_46_value = 0;
    numberobj_46_value_setter(numberobj_46_value);
    numbertilde_44_input_number = 0;
    numbertilde_44_ramp = 0;
    scale_11_inlow = 0;
    scale_11_inhigh = 20;
    scale_11_outlow = 0.05;
    scale_11_outhigh = 20;
    scale_11_power = 2;
    numberobj_47_value = 0;
    numberobj_47_value_setter(numberobj_47_value);
    dspexpr_65_in1 = 0;
    dspexpr_65_in2 = 1;
    linetilde_16_time = 10;
    linetilde_16_keepramp = 1;
    numberobj_48_value = 0;
    numberobj_48_value_setter(numberobj_48_value);
    scale_12_inlow = 0;
    scale_12_inhigh = 20;
    scale_12_outlow = 0.46;
    scale_12_outhigh = 0.06;
    scale_12_power = 0.7;
    numbertilde_45_input_number = 0;
    numbertilde_45_ramp = 0;
    select_04_test1 = 270;
    expr_20_in1 = 0;
    expr_20_in2 = 1;
    expr_20_out1 = 0;
    toggle_04_value_number = 0;
    toggle_04_value_number_setter(toggle_04_value_number);
    selector_04_onoff = 1;
    biquad_tilde_04_x = 0;
    biquad_tilde_04_a0 = 0;
    biquad_tilde_04_a1 = 0;
    biquad_tilde_04_a2 = 0;
    biquad_tilde_04_b1 = 0;
    biquad_tilde_04_b2 = 0;
    biquad_tilde_05_x = 0;
    biquad_tilde_05_a0 = 0;
    biquad_tilde_05_a1 = 0;
    biquad_tilde_05_a2 = 0;
    biquad_tilde_05_b1 = 0;
    biquad_tilde_05_b2 = 0;
    ip_07_value = 0;
    ip_07_impulse = 0;
    numberobj_49_value = 0;
    numberobj_49_value_setter(numberobj_49_value);
    filtercoeff_06_frequency = 1000;
    filtercoeff_06_gain = 1;
    filtercoeff_06_q = 1;
    filtercoeff_06_type = 1;
    filtercoeff_07_frequency = 1000;
    filtercoeff_07_gain = 1;
    filtercoeff_07_q = 1;
    filtercoeff_07_type = 0;
    numbertilde_46_input_number = 0;
    numbertilde_46_ramp = 0;
    numbertilde_47_input_number = 0;
    numbertilde_47_ramp = 0;
    slide_tilde_08_x = 0;
    slide_tilde_08_up = 500;
    slide_tilde_08_down = 500;
    numbertilde_48_input_number = 0;
    numbertilde_48_ramp = 0;
    dspexpr_66_in1 = 0;
    dspexpr_66_in2 = 0;
    numberobj_50_value = 0;
    numberobj_50_value_setter(numberobj_50_value);
    scale_13_inlow = 0;
    scale_13_inhigh = 1;
    scale_13_outlow = 0.15;
    scale_13_outhigh = 1;
    scale_13_power = 1;
    numbertilde_49_input_number = 0;
    numbertilde_49_ramp = 0;
    numbertilde_50_input_number = 0;
    numbertilde_50_ramp = 0;
    numbertilde_51_input_number = 0;
    numbertilde_51_ramp = 0;
    numbertilde_52_input_number = 0;
    numbertilde_52_ramp = 0;
    numbertilde_53_input_number = 0;
    numbertilde_53_ramp = 0;
    numbertilde_54_input_number = 0;
    numbertilde_54_ramp = 0;
    numbertilde_55_input_number = 0;
    numbertilde_55_ramp = 0;
    numbertilde_56_input_number = 0;
    numbertilde_56_ramp = 0;
    ctlin_01_input = 0;
    ctlin_01_controller = 2;
    ctlin_01_channel = -1;
    expr_16_in1 = 0;
    expr_16_in2 = 0.007874015748;
    expr_16_out1 = 0;
    ctlin_02_input = 0;
    ctlin_02_controller = 5;
    ctlin_02_channel = -1;
    expr_17_in1 = 0;
    expr_17_in2 = 0.007874015748;
    expr_17_out1 = 0;
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    signals[2] = nullptr;
    signals[3] = nullptr;
    signals[4] = nullptr;
    signals[5] = nullptr;
    signals[6] = nullptr;
    signals[7] = nullptr;
    signals[8] = nullptr;
    signals[9] = nullptr;
    signals[10] = nullptr;
    signals[11] = nullptr;
    signals[12] = nullptr;
    signals[13] = nullptr;
    signals[14] = nullptr;
    signals[15] = nullptr;
    signals[16] = nullptr;
    signals[17] = nullptr;
    signals[18] = nullptr;
    signals[19] = nullptr;
    signals[20] = nullptr;
    signals[21] = nullptr;
    signals[22] = nullptr;
    signals[23] = nullptr;
    signals[24] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    param_01_lastValue = 0;
    limi_03_last = 0;
    limi_03_lookaheadIndex = 0;
    limi_03_recover = 0;
    limi_03_lookaheadInv = 0;
    limi_03_dc1_xm1 = 0;
    limi_03_dc1_ym1 = 0;
    limi_03_setupDone = false;
    numberobj_12_currentFormat = 6;
    numberobj_12_lastValue = 0;
    numberobj_13_currentFormat = 6;
    numberobj_13_lastValue = 0;
    numberobj_14_currentFormat = 6;
    numberobj_14_lastValue = 0;
    limi_04_last = 0;
    limi_04_lookaheadIndex = 0;
    limi_04_recover = 0;
    limi_04_lookaheadInv = 0;
    limi_04_dc1_xm1 = 0;
    limi_04_dc1_ym1 = 0;
    limi_04_setupDone = false;
    numbertilde_14_currentInterval = 0;
    numbertilde_14_currentIntervalInSamples = 0;
    numbertilde_14_lastValue = 0;
    numbertilde_14_outValue = 0;
    numbertilde_14_rampInSamples = 0;
    numbertilde_14_currentMode = 0;
    numbertilde_14_smooth_d_prev = 0;
    numbertilde_14_smooth_prev = 0;
    numbertilde_14_smooth_index = 0;
    numbertilde_14_smooth_increment = 0;
    numbertilde_14_setupDone = false;
    linetilde_04_currentValue = 0;
    toggle_01_lastValue = 0;
    numberobj_15_currentFormat = 6;
    numberobj_15_lastValue = 0;
    numberobj_16_currentFormat = 6;
    numberobj_16_lastValue = 0;
    scopetilde_05_lastValue = 0;
    scopetilde_05_effectiveCount = 256;
    scopetilde_05_xsign = 1;
    scopetilde_05_ysign = 1;
    scopetilde_05_mode = 0;
    scopetilde_05_setupDone = false;
    param_02_lastValue = 0;
    scopetilde_06_lastValue = 0;
    scopetilde_06_effectiveCount = 256;
    scopetilde_06_xsign = 1;
    scopetilde_06_ysign = 1;
    scopetilde_06_mode = 0;
    scopetilde_06_setupDone = false;
    linetilde_05_currentValue = 0;
    numberobj_17_currentFormat = 6;
    numberobj_17_lastValue = 0;
    numbertilde_15_currentInterval = 0;
    numbertilde_15_currentIntervalInSamples = 0;
    numbertilde_15_lastValue = 0;
    numbertilde_15_outValue = 0;
    numbertilde_15_rampInSamples = 0;
    numbertilde_15_currentMode = 0;
    numbertilde_15_smooth_d_prev = 0;
    numbertilde_15_smooth_prev = 0;
    numbertilde_15_smooth_index = 0;
    numbertilde_15_smooth_increment = 0;
    numbertilde_15_setupDone = false;
    numbertilde_16_currentInterval = 0;
    numbertilde_16_currentIntervalInSamples = 0;
    numbertilde_16_lastValue = 0;
    numbertilde_16_outValue = 0;
    numbertilde_16_rampInSamples = 0;
    numbertilde_16_currentMode = 0;
    numbertilde_16_smooth_d_prev = 0;
    numbertilde_16_smooth_prev = 0;
    numbertilde_16_smooth_index = 0;
    numbertilde_16_smooth_increment = 0;
    numbertilde_16_setupDone = false;
    rate_tilde_01_currentPhase = 0;
    rate_tilde_01_diff = 0;
    rate_tilde_01_prev = 0;
    rate_tilde_01_mult = 1;
    rate_tilde_01_invmult = 1;
    rate_tilde_01_wantlock = 1;
    rate_tilde_01_quant = 1;
    rate_tilde_01_setupDone = false;
    gen_02_delay_1__maxdelay = 0;
    gen_02_delay_1_sizemode = 0;
    gen_02_delay_1_wrap = 0;
    gen_02_delay_1_reader = 0;
    gen_02_delay_1_writer = 0;
    gen_02_history_2_value = 0;
    gen_02_history_3_value = 0;
    gen_02_history_4_value = 0;
    gen_02_history_5_value = 0;
    gen_02_slide_6_prev = 0;
    gen_02_slide_11_prev = 0;
    gen_02_setupDone = false;
    numbertilde_17_currentInterval = 0;
    numbertilde_17_currentIntervalInSamples = 0;
    numbertilde_17_lastValue = 0;
    numbertilde_17_outValue = 0;
    numbertilde_17_rampInSamples = 0;
    numbertilde_17_currentMode = 0;
    numbertilde_17_smooth_d_prev = 0;
    numbertilde_17_smooth_prev = 0;
    numbertilde_17_smooth_index = 0;
    numbertilde_17_smooth_increment = 0;
    numbertilde_17_setupDone = false;
    ip_01_lastIndex = 0;
    ip_01_lastValue = 0;
    ip_01_resetCount = 0;
    ip_01_sigbuf = nullptr;
    ip_01_setupDone = false;
    phasor_01_sigbuf = nullptr;
    phasor_01_lastLockedPhase = 0;
    phasor_01_conv = 0;
    phasor_01_ph_currentPhase = 0;
    phasor_01_ph_conv = 0;
    phasor_01_setupDone = false;
    numberobj_18_currentFormat = 6;
    numberobj_18_lastValue = 0;
    numberobj_19_currentFormat = 6;
    numberobj_19_lastValue = 0;
    scopetilde_07_lastValue = 0;
    scopetilde_07_effectiveCount = 256;
    scopetilde_07_xsign = 1;
    scopetilde_07_ysign = 1;
    scopetilde_07_mode = 0;
    scopetilde_07_setupDone = false;
    param_03_lastValue = 0;
    slide_tilde_03_prev = 0;
    slide_tilde_04_prev = 0;
    ip_02_lastIndex = 0;
    ip_02_lastValue = 0;
    ip_02_resetCount = 0;
    ip_02_sigbuf = nullptr;
    ip_02_setupDone = false;
    ip_03_lastIndex = 0;
    ip_03_lastValue = 0;
    ip_03_resetCount = 0;
    ip_03_sigbuf = nullptr;
    ip_03_setupDone = false;
    numberobj_20_currentFormat = 6;
    numberobj_20_lastValue = 0;
    numberobj_21_currentFormat = 6;
    numberobj_21_lastValue = 0;
    scopetilde_08_lastValue = 0;
    scopetilde_08_effectiveCount = 256;
    scopetilde_08_xsign = 1;
    scopetilde_08_ysign = 1;
    scopetilde_08_mode = 0;
    scopetilde_08_setupDone = false;
    numbertilde_18_currentInterval = 0;
    numbertilde_18_currentIntervalInSamples = 0;
    numbertilde_18_lastValue = 0;
    numbertilde_18_outValue = 0;
    numbertilde_18_rampInSamples = 0;
    numbertilde_18_currentMode = 0;
    numbertilde_18_smooth_d_prev = 0;
    numbertilde_18_smooth_prev = 0;
    numbertilde_18_smooth_index = 0;
    numbertilde_18_smooth_increment = 0;
    numbertilde_18_setupDone = false;
    numberobj_22_currentFormat = 6;
    numberobj_22_lastValue = 0;
    toggle_02_lastValue = 0;
    numbertilde_19_currentInterval = 0;
    numbertilde_19_currentIntervalInSamples = 0;
    numbertilde_19_lastValue = 0;
    numbertilde_19_outValue = 0;
    numbertilde_19_rampInSamples = 0;
    numbertilde_19_currentMode = 0;
    numbertilde_19_smooth_d_prev = 0;
    numbertilde_19_smooth_prev = 0;
    numbertilde_19_smooth_index = 0;
    numbertilde_19_smooth_increment = 0;
    numbertilde_19_setupDone = false;
    numberobj_23_currentFormat = 6;
    numberobj_23_lastValue = 0;
    filtercoeff_02_K_EPSILON = 1e-9;
    filtercoeff_02_setupDone = false;
    param_04_lastValue = 0;
    linetilde_06_currentValue = 0;
    numberobj_24_currentFormat = 6;
    numberobj_24_lastValue = 0;
    numberobj_25_currentFormat = 6;
    numberobj_25_lastValue = 0;
    numbertilde_20_currentInterval = 0;
    numbertilde_20_currentIntervalInSamples = 0;
    numbertilde_20_lastValue = 0;
    numbertilde_20_outValue = 0;
    numbertilde_20_rampInSamples = 0;
    numbertilde_20_currentMode = 0;
    numbertilde_20_smooth_d_prev = 0;
    numbertilde_20_smooth_prev = 0;
    numbertilde_20_smooth_index = 0;
    numbertilde_20_smooth_increment = 0;
    numbertilde_20_setupDone = false;
    numbertilde_21_currentInterval = 0;
    numbertilde_21_currentIntervalInSamples = 0;
    numbertilde_21_lastValue = 0;
    numbertilde_21_outValue = 0;
    numbertilde_21_rampInSamples = 0;
    numbertilde_21_currentMode = 0;
    numbertilde_21_smooth_d_prev = 0;
    numbertilde_21_smooth_prev = 0;
    numbertilde_21_smooth_index = 0;
    numbertilde_21_smooth_increment = 0;
    numbertilde_21_setupDone = false;
    numberobj_26_currentFormat = 6;
    numberobj_26_lastValue = 0;
    linetilde_07_currentValue = 0;
    scopetilde_09_lastValue = 0;
    scopetilde_09_effectiveCount = 256;
    scopetilde_09_xsign = 1;
    scopetilde_09_ysign = 1;
    scopetilde_09_mode = 0;
    scopetilde_09_setupDone = false;
    scopetilde_10_lastValue = 0;
    scopetilde_10_effectiveCount = 256;
    scopetilde_10_xsign = 1;
    scopetilde_10_ysign = 1;
    scopetilde_10_mode = 0;
    scopetilde_10_setupDone = false;
    linetilde_08_currentValue = 0;
    numbertilde_22_currentInterval = 0;
    numbertilde_22_currentIntervalInSamples = 0;
    numbertilde_22_lastValue = 0;
    numbertilde_22_outValue = 0;
    numbertilde_22_rampInSamples = 0;
    numbertilde_22_currentMode = 0;
    numbertilde_22_smooth_d_prev = 0;
    numbertilde_22_smooth_prev = 0;
    numbertilde_22_smooth_index = 0;
    numbertilde_22_smooth_increment = 0;
    numbertilde_22_setupDone = false;
    linetilde_09_currentValue = 0;
    numberobj_27_currentFormat = 6;
    numberobj_27_lastValue = 0;
    param_05_lastValue = 0;
    numbertilde_23_currentInterval = 0;
    numbertilde_23_currentIntervalInSamples = 0;
    numbertilde_23_lastValue = 0;
    numbertilde_23_outValue = 0;
    numbertilde_23_rampInSamples = 0;
    numbertilde_23_currentMode = 0;
    numbertilde_23_smooth_d_prev = 0;
    numbertilde_23_smooth_prev = 0;
    numbertilde_23_smooth_index = 0;
    numbertilde_23_smooth_increment = 0;
    numbertilde_23_setupDone = false;
    numberobj_28_currentFormat = 6;
    numberobj_28_lastValue = 0;
    linetilde_10_currentValue = 0;
    numberobj_29_currentFormat = 6;
    numberobj_29_lastValue = 0;
    numbertilde_24_currentInterval = 0;
    numbertilde_24_currentIntervalInSamples = 0;
    numbertilde_24_lastValue = 0;
    numbertilde_24_outValue = 0;
    numbertilde_24_rampInSamples = 0;
    numbertilde_24_currentMode = 0;
    numbertilde_24_smooth_d_prev = 0;
    numbertilde_24_smooth_prev = 0;
    numbertilde_24_smooth_index = 0;
    numbertilde_24_smooth_increment = 0;
    numbertilde_24_setupDone = false;
    numbertilde_25_currentInterval = 0;
    numbertilde_25_currentIntervalInSamples = 0;
    numbertilde_25_lastValue = 0;
    numbertilde_25_outValue = 0;
    numbertilde_25_rampInSamples = 0;
    numbertilde_25_currentMode = 0;
    numbertilde_25_smooth_d_prev = 0;
    numbertilde_25_smooth_prev = 0;
    numbertilde_25_smooth_index = 0;
    numbertilde_25_smooth_increment = 0;
    numbertilde_25_setupDone = false;
    numberobj_30_currentFormat = 6;
    numberobj_30_lastValue = 0;
    numberobj_31_currentFormat = 6;
    numberobj_31_lastValue = 0;
    param_06_lastValue = 0;
    param_07_lastValue = 0;
    toggle_03_lastValue = 0;
    scopetilde_11_lastValue = 0;
    scopetilde_11_effectiveCount = 256;
    scopetilde_11_xsign = 1;
    scopetilde_11_ysign = 1;
    scopetilde_11_mode = 0;
    scopetilde_11_setupDone = false;
    biquad_tilde_02_x1 = 0;
    biquad_tilde_02_x2 = 0;
    biquad_tilde_02_y1 = 0;
    biquad_tilde_02_y2 = 0;
    biquad_tilde_02_setupDone = false;
    biquad_tilde_03_x1 = 0;
    biquad_tilde_03_x2 = 0;
    biquad_tilde_03_y1 = 0;
    biquad_tilde_03_y2 = 0;
    biquad_tilde_03_setupDone = false;
    ip_04_lastIndex = 0;
    ip_04_lastValue = 0;
    ip_04_resetCount = 0;
    ip_04_sigbuf = nullptr;
    ip_04_setupDone = false;
    numberobj_32_currentFormat = 6;
    numberobj_32_lastValue = 0;
    filtercoeff_03_K_EPSILON = 1e-9;
    filtercoeff_03_setupDone = false;
    filtercoeff_04_K_EPSILON = 1e-9;
    filtercoeff_04_setupDone = false;
    numbertilde_26_currentInterval = 0;
    numbertilde_26_currentIntervalInSamples = 0;
    numbertilde_26_lastValue = 0;
    numbertilde_26_outValue = 0;
    numbertilde_26_rampInSamples = 0;
    numbertilde_26_currentMode = 0;
    numbertilde_26_smooth_d_prev = 0;
    numbertilde_26_smooth_prev = 0;
    numbertilde_26_smooth_index = 0;
    numbertilde_26_smooth_increment = 0;
    numbertilde_26_setupDone = false;
    numbertilde_27_currentInterval = 0;
    numbertilde_27_currentIntervalInSamples = 0;
    numbertilde_27_lastValue = 0;
    numbertilde_27_outValue = 0;
    numbertilde_27_rampInSamples = 0;
    numbertilde_27_currentMode = 0;
    numbertilde_27_smooth_d_prev = 0;
    numbertilde_27_smooth_prev = 0;
    numbertilde_27_smooth_index = 0;
    numbertilde_27_smooth_increment = 0;
    numbertilde_27_setupDone = false;
    slide_tilde_05_prev = 0;
    numbertilde_28_currentInterval = 0;
    numbertilde_28_currentIntervalInSamples = 0;
    numbertilde_28_lastValue = 0;
    numbertilde_28_outValue = 0;
    numbertilde_28_rampInSamples = 0;
    numbertilde_28_currentMode = 0;
    numbertilde_28_smooth_d_prev = 0;
    numbertilde_28_smooth_prev = 0;
    numbertilde_28_smooth_index = 0;
    numbertilde_28_smooth_increment = 0;
    numbertilde_28_setupDone = false;
    numberobj_33_currentFormat = 6;
    numberobj_33_lastValue = 0;
    numberobj_34_currentFormat = 6;
    numberobj_34_lastValue = 0;
    param_08_lastValue = 0;
    numberobj_35_currentFormat = 6;
    numberobj_35_lastValue = 0;
    numberobj_36_currentFormat = 6;
    numberobj_36_lastValue = 0;
    numbertilde_29_currentInterval = 0;
    numbertilde_29_currentIntervalInSamples = 0;
    numbertilde_29_lastValue = 0;
    numbertilde_29_outValue = 0;
    numbertilde_29_rampInSamples = 0;
    numbertilde_29_currentMode = 0;
    numbertilde_29_smooth_d_prev = 0;
    numbertilde_29_smooth_prev = 0;
    numbertilde_29_smooth_index = 0;
    numbertilde_29_smooth_increment = 0;
    numbertilde_29_setupDone = false;
    numbertilde_30_currentInterval = 0;
    numbertilde_30_currentIntervalInSamples = 0;
    numbertilde_30_lastValue = 0;
    numbertilde_30_outValue = 0;
    numbertilde_30_rampInSamples = 0;
    numbertilde_30_currentMode = 0;
    numbertilde_30_smooth_d_prev = 0;
    numbertilde_30_smooth_prev = 0;
    numbertilde_30_smooth_index = 0;
    numbertilde_30_smooth_increment = 0;
    numbertilde_30_setupDone = false;
    param_09_lastValue = 0;
    numbertilde_31_currentInterval = 0;
    numbertilde_31_currentIntervalInSamples = 0;
    numbertilde_31_lastValue = 0;
    numbertilde_31_outValue = 0;
    numbertilde_31_rampInSamples = 0;
    numbertilde_31_currentMode = 0;
    numbertilde_31_smooth_d_prev = 0;
    numbertilde_31_smooth_prev = 0;
    numbertilde_31_smooth_index = 0;
    numbertilde_31_smooth_increment = 0;
    numbertilde_31_setupDone = false;
    numbertilde_32_currentInterval = 0;
    numbertilde_32_currentIntervalInSamples = 0;
    numbertilde_32_lastValue = 0;
    numbertilde_32_outValue = 0;
    numbertilde_32_rampInSamples = 0;
    numbertilde_32_currentMode = 0;
    numbertilde_32_smooth_d_prev = 0;
    numbertilde_32_smooth_prev = 0;
    numbertilde_32_smooth_index = 0;
    numbertilde_32_smooth_increment = 0;
    numbertilde_32_setupDone = false;
    numbertilde_33_currentInterval = 0;
    numbertilde_33_currentIntervalInSamples = 0;
    numbertilde_33_lastValue = 0;
    numbertilde_33_outValue = 0;
    numbertilde_33_rampInSamples = 0;
    numbertilde_33_currentMode = 0;
    numbertilde_33_smooth_d_prev = 0;
    numbertilde_33_smooth_prev = 0;
    numbertilde_33_smooth_index = 0;
    numbertilde_33_smooth_increment = 0;
    numbertilde_33_setupDone = false;
    numbertilde_34_currentInterval = 0;
    numbertilde_34_currentIntervalInSamples = 0;
    numbertilde_34_lastValue = 0;
    numbertilde_34_outValue = 0;
    numbertilde_34_rampInSamples = 0;
    numbertilde_34_currentMode = 0;
    numbertilde_34_smooth_d_prev = 0;
    numbertilde_34_smooth_prev = 0;
    numbertilde_34_smooth_index = 0;
    numbertilde_34_smooth_increment = 0;
    numbertilde_34_setupDone = false;
    metro_01_last = -1;
    metro_01_next = -1;
    numberobj_37_currentFormat = 6;
    numberobj_37_lastValue = 0;
    param_10_lastValue = 0;
    numberobj_38_currentFormat = 6;
    numberobj_38_lastValue = 0;
    numberobj_39_currentFormat = 6;
    numberobj_39_lastValue = 0;
    numbertilde_35_currentInterval = 0;
    numbertilde_35_currentIntervalInSamples = 0;
    numbertilde_35_lastValue = 0;
    numbertilde_35_outValue = 0;
    numbertilde_35_rampInSamples = 0;
    numbertilde_35_currentMode = 0;
    numbertilde_35_smooth_d_prev = 0;
    numbertilde_35_smooth_prev = 0;
    numbertilde_35_smooth_index = 0;
    numbertilde_35_smooth_increment = 0;
    numbertilde_35_setupDone = false;
    numbertilde_36_currentInterval = 0;
    numbertilde_36_currentIntervalInSamples = 0;
    numbertilde_36_lastValue = 0;
    numbertilde_36_outValue = 0;
    numbertilde_36_rampInSamples = 0;
    numbertilde_36_currentMode = 0;
    numbertilde_36_smooth_d_prev = 0;
    numbertilde_36_smooth_prev = 0;
    numbertilde_36_smooth_index = 0;
    numbertilde_36_smooth_increment = 0;
    numbertilde_36_setupDone = false;
    param_11_lastValue = 0;
    scopetilde_12_lastValue = 0;
    scopetilde_12_effectiveCount = 256;
    scopetilde_12_xsign = 1;
    scopetilde_12_ysign = 1;
    scopetilde_12_mode = 0;
    scopetilde_12_setupDone = false;
    scopetilde_13_lastValue = 0;
    scopetilde_13_effectiveCount = 256;
    scopetilde_13_xsign = 1;
    scopetilde_13_ysign = 1;
    scopetilde_13_mode = 0;
    scopetilde_13_setupDone = false;
    numbertilde_37_currentInterval = 0;
    numbertilde_37_currentIntervalInSamples = 0;
    numbertilde_37_lastValue = 0;
    numbertilde_37_outValue = 0;
    numbertilde_37_rampInSamples = 0;
    numbertilde_37_currentMode = 0;
    numbertilde_37_smooth_d_prev = 0;
    numbertilde_37_smooth_prev = 0;
    numbertilde_37_smooth_index = 0;
    numbertilde_37_smooth_increment = 0;
    numbertilde_37_setupDone = false;
    rate_tilde_02_currentPhase = 0;
    rate_tilde_02_diff = 0;
    rate_tilde_02_prev = 0;
    rate_tilde_02_mult = 1;
    rate_tilde_02_invmult = 1;
    rate_tilde_02_wantlock = 1;
    rate_tilde_02_quant = 1;
    rate_tilde_02_setupDone = false;
    param_12_lastValue = 0;
    gen_07_delay_1__maxdelay = 0;
    gen_07_delay_1_sizemode = 0;
    gen_07_delay_1_wrap = 0;
    gen_07_delay_1_reader = 0;
    gen_07_delay_1_writer = 0;
    gen_07_history_2_value = 0;
    gen_07_history_3_value = 0;
    gen_07_history_4_value = 0;
    gen_07_history_5_value = 0;
    gen_07_slide_6_prev = 0;
    gen_07_slide_11_prev = 0;
    gen_07_setupDone = false;
    numbertilde_38_currentInterval = 0;
    numbertilde_38_currentIntervalInSamples = 0;
    numbertilde_38_lastValue = 0;
    numbertilde_38_outValue = 0;
    numbertilde_38_rampInSamples = 0;
    numbertilde_38_currentMode = 0;
    numbertilde_38_smooth_d_prev = 0;
    numbertilde_38_smooth_prev = 0;
    numbertilde_38_smooth_index = 0;
    numbertilde_38_smooth_increment = 0;
    numbertilde_38_setupDone = false;
    numbertilde_39_currentInterval = 0;
    numbertilde_39_currentIntervalInSamples = 0;
    numbertilde_39_lastValue = 0;
    numbertilde_39_outValue = 0;
    numbertilde_39_rampInSamples = 0;
    numbertilde_39_currentMode = 0;
    numbertilde_39_smooth_d_prev = 0;
    numbertilde_39_smooth_prev = 0;
    numbertilde_39_smooth_index = 0;
    numbertilde_39_smooth_increment = 0;
    numbertilde_39_setupDone = false;
    slide_tilde_06_prev = 0;
    linetilde_11_currentValue = 0;
    numberobj_40_currentFormat = 6;
    numberobj_40_lastValue = 0;
    slide_tilde_07_prev = 0;
    ip_05_lastIndex = 0;
    ip_05_lastValue = 0;
    ip_05_resetCount = 0;
    ip_05_sigbuf = nullptr;
    ip_05_setupDone = false;
    ip_06_lastIndex = 0;
    ip_06_lastValue = 0;
    ip_06_resetCount = 0;
    ip_06_sigbuf = nullptr;
    ip_06_setupDone = false;
    numberobj_41_currentFormat = 6;
    numberobj_41_lastValue = 0;
    numberobj_42_currentFormat = 6;
    numberobj_42_lastValue = 0;
    param_13_lastValue = 0;
    numberobj_43_currentFormat = 6;
    numberobj_43_lastValue = 0;
    numbertilde_40_currentInterval = 0;
    numbertilde_40_currentIntervalInSamples = 0;
    numbertilde_40_lastValue = 0;
    numbertilde_40_outValue = 0;
    numbertilde_40_rampInSamples = 0;
    numbertilde_40_currentMode = 0;
    numbertilde_40_smooth_d_prev = 0;
    numbertilde_40_smooth_prev = 0;
    numbertilde_40_smooth_index = 0;
    numbertilde_40_smooth_increment = 0;
    numbertilde_40_setupDone = false;
    numberobj_44_currentFormat = 6;
    numberobj_44_lastValue = 0;
    filtercoeff_05_K_EPSILON = 1e-9;
    filtercoeff_05_setupDone = false;
    linetilde_12_currentValue = 0;
    numbertilde_41_currentInterval = 0;
    numbertilde_41_currentIntervalInSamples = 0;
    numbertilde_41_lastValue = 0;
    numbertilde_41_outValue = 0;
    numbertilde_41_rampInSamples = 0;
    numbertilde_41_currentMode = 0;
    numbertilde_41_smooth_d_prev = 0;
    numbertilde_41_smooth_prev = 0;
    numbertilde_41_smooth_index = 0;
    numbertilde_41_smooth_increment = 0;
    numbertilde_41_setupDone = false;
    numbertilde_42_currentInterval = 0;
    numbertilde_42_currentIntervalInSamples = 0;
    numbertilde_42_lastValue = 0;
    numbertilde_42_outValue = 0;
    numbertilde_42_rampInSamples = 0;
    numbertilde_42_currentMode = 0;
    numbertilde_42_smooth_d_prev = 0;
    numbertilde_42_smooth_prev = 0;
    numbertilde_42_smooth_index = 0;
    numbertilde_42_smooth_increment = 0;
    numbertilde_42_setupDone = false;
    param_14_lastValue = 0;
    numberobj_45_currentFormat = 6;
    numberobj_45_lastValue = 0;
    linetilde_13_currentValue = 0;
    linetilde_14_currentValue = 0;
    numbertilde_43_currentInterval = 0;
    numbertilde_43_currentIntervalInSamples = 0;
    numbertilde_43_lastValue = 0;
    numbertilde_43_outValue = 0;
    numbertilde_43_rampInSamples = 0;
    numbertilde_43_currentMode = 0;
    numbertilde_43_smooth_d_prev = 0;
    numbertilde_43_smooth_prev = 0;
    numbertilde_43_smooth_index = 0;
    numbertilde_43_smooth_increment = 0;
    numbertilde_43_setupDone = false;
    linetilde_15_currentValue = 0;
    numberobj_46_currentFormat = 6;
    numberobj_46_lastValue = 0;
    numbertilde_44_currentInterval = 0;
    numbertilde_44_currentIntervalInSamples = 0;
    numbertilde_44_lastValue = 0;
    numbertilde_44_outValue = 0;
    numbertilde_44_rampInSamples = 0;
    numbertilde_44_currentMode = 0;
    numbertilde_44_smooth_d_prev = 0;
    numbertilde_44_smooth_prev = 0;
    numbertilde_44_smooth_index = 0;
    numbertilde_44_smooth_increment = 0;
    numbertilde_44_setupDone = false;
    numberobj_47_currentFormat = 6;
    numberobj_47_lastValue = 0;
    linetilde_16_currentValue = 0;
    numberobj_48_currentFormat = 6;
    numberobj_48_lastValue = 0;
    numbertilde_45_currentInterval = 0;
    numbertilde_45_currentIntervalInSamples = 0;
    numbertilde_45_lastValue = 0;
    numbertilde_45_outValue = 0;
    numbertilde_45_rampInSamples = 0;
    numbertilde_45_currentMode = 0;
    numbertilde_45_smooth_d_prev = 0;
    numbertilde_45_smooth_prev = 0;
    numbertilde_45_smooth_index = 0;
    numbertilde_45_smooth_increment = 0;
    numbertilde_45_setupDone = false;
    toggle_04_lastValue = 0;
    biquad_tilde_04_x1 = 0;
    biquad_tilde_04_x2 = 0;
    biquad_tilde_04_y1 = 0;
    biquad_tilde_04_y2 = 0;
    biquad_tilde_04_setupDone = false;
    biquad_tilde_05_x1 = 0;
    biquad_tilde_05_x2 = 0;
    biquad_tilde_05_y1 = 0;
    biquad_tilde_05_y2 = 0;
    biquad_tilde_05_setupDone = false;
    ip_07_lastIndex = 0;
    ip_07_lastValue = 0;
    ip_07_resetCount = 0;
    ip_07_sigbuf = nullptr;
    ip_07_setupDone = false;
    numberobj_49_currentFormat = 6;
    numberobj_49_lastValue = 0;
    filtercoeff_06_K_EPSILON = 1e-9;
    filtercoeff_06_setupDone = false;
    filtercoeff_07_K_EPSILON = 1e-9;
    filtercoeff_07_setupDone = false;
    numbertilde_46_currentInterval = 0;
    numbertilde_46_currentIntervalInSamples = 0;
    numbertilde_46_lastValue = 0;
    numbertilde_46_outValue = 0;
    numbertilde_46_rampInSamples = 0;
    numbertilde_46_currentMode = 0;
    numbertilde_46_smooth_d_prev = 0;
    numbertilde_46_smooth_prev = 0;
    numbertilde_46_smooth_index = 0;
    numbertilde_46_smooth_increment = 0;
    numbertilde_46_setupDone = false;
    numbertilde_47_currentInterval = 0;
    numbertilde_47_currentIntervalInSamples = 0;
    numbertilde_47_lastValue = 0;
    numbertilde_47_outValue = 0;
    numbertilde_47_rampInSamples = 0;
    numbertilde_47_currentMode = 0;
    numbertilde_47_smooth_d_prev = 0;
    numbertilde_47_smooth_prev = 0;
    numbertilde_47_smooth_index = 0;
    numbertilde_47_smooth_increment = 0;
    numbertilde_47_setupDone = false;
    slide_tilde_08_prev = 0;
    numbertilde_48_currentInterval = 0;
    numbertilde_48_currentIntervalInSamples = 0;
    numbertilde_48_lastValue = 0;
    numbertilde_48_outValue = 0;
    numbertilde_48_rampInSamples = 0;
    numbertilde_48_currentMode = 0;
    numbertilde_48_smooth_d_prev = 0;
    numbertilde_48_smooth_prev = 0;
    numbertilde_48_smooth_index = 0;
    numbertilde_48_smooth_increment = 0;
    numbertilde_48_setupDone = false;
    numberobj_50_currentFormat = 6;
    numberobj_50_lastValue = 0;
    numbertilde_49_currentInterval = 0;
    numbertilde_49_currentIntervalInSamples = 0;
    numbertilde_49_lastValue = 0;
    numbertilde_49_outValue = 0;
    numbertilde_49_rampInSamples = 0;
    numbertilde_49_currentMode = 0;
    numbertilde_49_smooth_d_prev = 0;
    numbertilde_49_smooth_prev = 0;
    numbertilde_49_smooth_index = 0;
    numbertilde_49_smooth_increment = 0;
    numbertilde_49_setupDone = false;
    numbertilde_50_currentInterval = 0;
    numbertilde_50_currentIntervalInSamples = 0;
    numbertilde_50_lastValue = 0;
    numbertilde_50_outValue = 0;
    numbertilde_50_rampInSamples = 0;
    numbertilde_50_currentMode = 0;
    numbertilde_50_smooth_d_prev = 0;
    numbertilde_50_smooth_prev = 0;
    numbertilde_50_smooth_index = 0;
    numbertilde_50_smooth_increment = 0;
    numbertilde_50_setupDone = false;
    numbertilde_51_currentInterval = 0;
    numbertilde_51_currentIntervalInSamples = 0;
    numbertilde_51_lastValue = 0;
    numbertilde_51_outValue = 0;
    numbertilde_51_rampInSamples = 0;
    numbertilde_51_currentMode = 0;
    numbertilde_51_smooth_d_prev = 0;
    numbertilde_51_smooth_prev = 0;
    numbertilde_51_smooth_index = 0;
    numbertilde_51_smooth_increment = 0;
    numbertilde_51_setupDone = false;
    numbertilde_52_currentInterval = 0;
    numbertilde_52_currentIntervalInSamples = 0;
    numbertilde_52_lastValue = 0;
    numbertilde_52_outValue = 0;
    numbertilde_52_rampInSamples = 0;
    numbertilde_52_currentMode = 0;
    numbertilde_52_smooth_d_prev = 0;
    numbertilde_52_smooth_prev = 0;
    numbertilde_52_smooth_index = 0;
    numbertilde_52_smooth_increment = 0;
    numbertilde_52_setupDone = false;
    numbertilde_53_currentInterval = 0;
    numbertilde_53_currentIntervalInSamples = 0;
    numbertilde_53_lastValue = 0;
    numbertilde_53_outValue = 0;
    numbertilde_53_rampInSamples = 0;
    numbertilde_53_currentMode = 0;
    numbertilde_53_smooth_d_prev = 0;
    numbertilde_53_smooth_prev = 0;
    numbertilde_53_smooth_index = 0;
    numbertilde_53_smooth_increment = 0;
    numbertilde_53_setupDone = false;
    numbertilde_54_currentInterval = 0;
    numbertilde_54_currentIntervalInSamples = 0;
    numbertilde_54_lastValue = 0;
    numbertilde_54_outValue = 0;
    numbertilde_54_rampInSamples = 0;
    numbertilde_54_currentMode = 0;
    numbertilde_54_smooth_d_prev = 0;
    numbertilde_54_smooth_prev = 0;
    numbertilde_54_smooth_index = 0;
    numbertilde_54_smooth_increment = 0;
    numbertilde_54_setupDone = false;
    numbertilde_55_currentInterval = 0;
    numbertilde_55_currentIntervalInSamples = 0;
    numbertilde_55_lastValue = 0;
    numbertilde_55_outValue = 0;
    numbertilde_55_rampInSamples = 0;
    numbertilde_55_currentMode = 0;
    numbertilde_55_smooth_d_prev = 0;
    numbertilde_55_smooth_prev = 0;
    numbertilde_55_smooth_index = 0;
    numbertilde_55_smooth_increment = 0;
    numbertilde_55_setupDone = false;
    numbertilde_56_currentInterval = 0;
    numbertilde_56_currentIntervalInSamples = 0;
    numbertilde_56_lastValue = 0;
    numbertilde_56_outValue = 0;
    numbertilde_56_rampInSamples = 0;
    numbertilde_56_currentMode = 0;
    numbertilde_56_smooth_d_prev = 0;
    numbertilde_56_smooth_prev = 0;
    numbertilde_56_smooth_index = 0;
    numbertilde_56_smooth_increment = 0;
    numbertilde_56_setupDone = false;
    ctlin_01_status = 0;
    ctlin_01_byte1 = -1;
    ctlin_01_inchan = 0;
    ctlin_02_status = 0;
    ctlin_02_byte1 = -1;
    ctlin_02_inchan = 0;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_bbuBase = 0;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    number param_01_value;
    number selector_01_onoff;
    number dspexpr_26_in1;
    number dspexpr_26_in2;
    number dspexpr_27_in1;
    number dspexpr_27_in2;
    number dspexpr_28_in1;
    number dspexpr_28_in2;
    number limi_03_bypass;
    number limi_03_dcblock;
    number limi_03_lookahead;
    number limi_03_preamp;
    number limi_03_postamp;
    number limi_03_threshold;
    number limi_03_release;
    number dspexpr_29_in1;
    number dspexpr_29_in2;
    list message_09_set;
    number p_01_target;
    number numberobj_12_value;
    number dspexpr_30_in1;
    number dspexpr_30_in2;
    number dspexpr_31_in1;
    number dspexpr_31_in2;
    number numberobj_13_value;
    number selector_02_onoff;
    number dspexpr_32_in1;
    number dspexpr_32_in2;
    number numberobj_14_value;
    number dspexpr_33_in1;
    number dspexpr_33_in2;
    number limi_04_bypass;
    number limi_04_dcblock;
    number limi_04_lookahead;
    number limi_04_preamp;
    number limi_04_postamp;
    number limi_04_threshold;
    number limi_04_release;
    number numbertilde_14_input_number;
    number numbertilde_14_ramp;
    list linetilde_04_segments;
    number linetilde_04_time;
    number linetilde_04_keepramp;
    list scale_01_input;
    number scale_01_inlow;
    number scale_01_inhigh;
    number scale_01_outlow;
    number scale_01_outhigh;
    number scale_01_power;
    list scale_01_out;
    number expr_08_in1;
    number expr_08_in2;
    number expr_08_out1;
    number expr_09_in1;
    number expr_09_in2;
    number expr_09_out1;
    number toggle_01_value_number;
    number numberobj_15_value;
    number numberobj_16_value;
    number expr_10_in1;
    number expr_10_out1;
    list scale_02_input;
    number scale_02_inlow;
    number scale_02_inhigh;
    number scale_02_outlow;
    number scale_02_outhigh;
    number scale_02_power;
    list scale_02_out;
    number param_02_value;
    list linetilde_05_segments;
    number linetilde_05_time;
    number linetilde_05_keepramp;
    number numberobj_17_value;
    number numbertilde_15_input_number;
    number numbertilde_15_ramp;
    number p_02_target;
    number numbertilde_16_input_number;
    number numbertilde_16_ramp;
    number dspexpr_34_in1;
    number dspexpr_34_in2;
    number dspexpr_35_in1;
    number dspexpr_35_in2;
    number rate_tilde_01_phase;
    number rate_tilde_01_multiplier;
    number triangle_tilde_01_phase;
    number triangle_tilde_01_duty;
    number scale_tilde_01_x;
    number scale_tilde_01_lowin;
    number scale_tilde_01_hiin;
    number scale_tilde_01_lowout;
    number scale_tilde_01_highout;
    number scale_tilde_01_pow;
    number gen_01_in1;
    number gen_01_in2;
    number gen_02_in1;
    number gen_02_in2;
    number gen_02_in3;
    number gen_02_in4;
    number gen_02_in5;
    number gen_02_in6;
    number gen_02_in7;
    number gen_02_in8;
    number gen_02_in9;
    list listreg_01_in1;
    list listreg_01_in2;
    number p_03_target;
    list scale_03_input;
    number scale_03_inlow;
    number scale_03_inhigh;
    number scale_03_outlow;
    number scale_03_outhigh;
    number scale_03_power;
    list scale_03_out;
    number dspexpr_36_in1;
    number dspexpr_36_in2;
    number dspexpr_37_in1;
    number dspexpr_37_in2;
    number numbertilde_17_input_number;
    number numbertilde_17_ramp;
    number scale_tilde_02_x;
    number scale_tilde_02_lowin;
    number scale_tilde_02_hiin;
    number scale_tilde_02_lowout;
    number scale_tilde_02_highout;
    number scale_tilde_02_pow;
    number ip_01_value;
    number ip_01_impulse;
    number phasor_01_freq;
    number triangle_tilde_02_phase;
    number triangle_tilde_02_duty;
    number gen_03_in1;
    number gen_03_in2;
    number numberobj_18_value;
    number numberobj_19_value;
    list message_10_set;
    number param_03_value;
    number slide_tilde_03_x;
    number slide_tilde_03_up;
    number slide_tilde_03_down;
    number slide_tilde_04_x;
    number slide_tilde_04_up;
    number slide_tilde_04_down;
    number ip_02_value;
    number ip_02_impulse;
    list message_11_set;
    number ip_03_value;
    number ip_03_impulse;
    number numberobj_20_value;
    list scale_04_input;
    number scale_04_inlow;
    number scale_04_inhigh;
    number scale_04_outlow;
    number scale_04_outhigh;
    number scale_04_power;
    list scale_04_out;
    number numberobj_21_value;
    number dspexpr_38_in1;
    number dspexpr_39_in1;
    number dspexpr_39_in2;
    number dspexpr_40_in1;
    number dspexpr_40_in2;
    number scale_tilde_03_x;
    number scale_tilde_03_lowin;
    number scale_tilde_03_hiin;
    number scale_tilde_03_lowout;
    number scale_tilde_03_highout;
    number scale_tilde_03_pow;
    number p_04_target;
    number numbertilde_18_input_number;
    number numbertilde_18_ramp;
    number numberobj_22_value;
    number toggle_02_value_number;
    number numbertilde_19_input_number;
    number numbertilde_19_ramp;
    number numberobj_23_value;
    number filtercoeff_02_frequency;
    number filtercoeff_02_gain;
    number filtercoeff_02_q;
    Int filtercoeff_02_type;
    number param_04_value;
    number dspexpr_41_in1;
    number dspexpr_41_in2;
    number dspexpr_42_in1;
    number dspexpr_42_in2;
    number dspexpr_43_in1;
    number dspexpr_43_in2;
    list linetilde_06_segments;
    number linetilde_06_time;
    number linetilde_06_keepramp;
    number expr_11_in1;
    number expr_11_in2;
    number expr_11_out1;
    number dspexpr_44_in1;
    number dspexpr_44_in2;
    number numberobj_24_value;
    number numberobj_25_value;
    list scale_05_input;
    number scale_05_inlow;
    number scale_05_inhigh;
    number scale_05_outlow;
    number scale_05_outhigh;
    number scale_05_power;
    list scale_05_out;
    number numbertilde_20_input_number;
    number numbertilde_20_ramp;
    number numbertilde_21_input_number;
    number numbertilde_21_ramp;
    number dspexpr_45_in1;
    number dspexpr_45_in2;
    number numberobj_26_value;
    list linetilde_07_segments;
    number linetilde_07_time;
    number linetilde_07_keepramp;
    number expr_12_in1;
    number expr_12_in2;
    number expr_12_out1;
    list linetilde_08_segments;
    number linetilde_08_time;
    number linetilde_08_keepramp;
    number numbertilde_22_input_number;
    number numbertilde_22_ramp;
    number scale_tilde_04_x;
    number scale_tilde_04_lowin;
    number scale_tilde_04_hiin;
    number scale_tilde_04_lowout;
    number scale_tilde_04_highout;
    number scale_tilde_04_pow;
    number dspexpr_46_in1;
    number dspexpr_46_in2;
    number dspexpr_47_in1;
    number dspexpr_47_in2;
    list linetilde_09_segments;
    number linetilde_09_time;
    number linetilde_09_keepramp;
    number numberobj_27_value;
    number param_05_value;
    number numbertilde_23_input_number;
    number numbertilde_23_ramp;
    number dspexpr_48_in1;
    number dspexpr_48_in2;
    list scale_06_input;
    number scale_06_inlow;
    number scale_06_inhigh;
    number scale_06_outlow;
    number scale_06_outhigh;
    number scale_06_power;
    list scale_06_out;
    number numberobj_28_value;
    number dspexpr_49_in1;
    number dspexpr_49_in2;
    list linetilde_10_segments;
    number linetilde_10_time;
    number linetilde_10_keepramp;
    number numberobj_29_value;
    number gen_04_in1;
    number gen_04_in2;
    list scale_07_input;
    number scale_07_inlow;
    number scale_07_inhigh;
    number scale_07_outlow;
    number scale_07_outhigh;
    number scale_07_power;
    list scale_07_out;
    number numbertilde_24_input_number;
    number numbertilde_24_ramp;
    list message_12_set;
    number numbertilde_25_input_number;
    number numbertilde_25_ramp;
    number numberobj_30_value;
    number numberobj_31_value;
    number param_06_value;
    number param_07_value;
    list message_13_set;
    number select_01_test1;
    number expr_13_in1;
    number expr_13_in2;
    number expr_13_out1;
    number toggle_03_value_number;
    number selector_03_onoff;
    number biquad_tilde_02_x;
    number biquad_tilde_02_a0;
    number biquad_tilde_02_a1;
    number biquad_tilde_02_a2;
    number biquad_tilde_02_b1;
    number biquad_tilde_02_b2;
    number biquad_tilde_03_x;
    number biquad_tilde_03_a0;
    number biquad_tilde_03_a1;
    number biquad_tilde_03_a2;
    number biquad_tilde_03_b1;
    number biquad_tilde_03_b2;
    number ip_04_value;
    number ip_04_impulse;
    number numberobj_32_value;
    list message_14_set;
    number select_02_test1;
    number select_02_test2;
    number filtercoeff_03_frequency;
    number filtercoeff_03_gain;
    number filtercoeff_03_q;
    Int filtercoeff_03_type;
    number delay_01_time;
    number delay_01_delayall;
    number filtercoeff_04_frequency;
    number filtercoeff_04_gain;
    number filtercoeff_04_q;
    Int filtercoeff_04_type;
    number numbertilde_26_input_number;
    number numbertilde_26_ramp;
    number numbertilde_27_input_number;
    number numbertilde_27_ramp;
    number slide_tilde_05_x;
    number slide_tilde_05_up;
    number slide_tilde_05_down;
    number numbertilde_28_input_number;
    number numbertilde_28_ramp;
    number dspexpr_50_in1;
    number dspexpr_50_in2;
    list message_15_set;
    list message_16_set;
    number numberobj_33_value;
    list scale_08_input;
    number scale_08_inlow;
    number scale_08_inhigh;
    number scale_08_outlow;
    number scale_08_outhigh;
    number scale_08_power;
    list scale_08_out;
    number numberobj_34_value;
    number expr_14_in1;
    number expr_14_in2;
    number expr_14_out1;
    number param_08_value;
    number p_05_target;
    number numberobj_35_value;
    number numberobj_36_value;
    number numbertilde_29_input_number;
    number numbertilde_29_ramp;
    number numbertilde_30_input_number;
    number numbertilde_30_ramp;
    list message_17_set;
    number param_09_value;
    number numbertilde_31_input_number;
    number numbertilde_31_ramp;
    number numbertilde_32_input_number;
    number numbertilde_32_ramp;
    list message_18_set;
    list listnth_01_input;
    list listnth_01_index;
    number numbertilde_33_input_number;
    number numbertilde_33_ramp;
    number numbertilde_34_input_number;
    number numbertilde_34_ramp;
    number transport_01_input_number;
    number transport_01_position;
    number transport_01_tempo;
    list transport_01_timesig;
    number transport_01_ticks;
    number metro_01_on;
    number metro_01_interval;
    list message_19_set;
    number expr_15_in1;
    number expr_15_in2;
    number expr_15_out1;
    number numberobj_37_value;
    number select_03_test1;
    number param_10_value;
    number numberobj_38_value;
    number numberobj_39_value;
    list message_20_set;
    number numbertilde_35_input_number;
    number numbertilde_35_ramp;
    number numbertilde_36_input_number;
    number numbertilde_36_ramp;
    number param_11_value;
    list message_21_set;
    number dspexpr_51_in1;
    number dspexpr_51_in2;
    number triangle_tilde_03_phase;
    number triangle_tilde_03_duty;
    number gen_05_in1;
    number gen_05_in2;
    number numbertilde_37_input_number;
    number numbertilde_37_ramp;
    number dspexpr_52_in1;
    number dspexpr_52_in2;
    number dspexpr_53_in1;
    number dspexpr_53_in2;
    number rate_tilde_02_phase;
    number rate_tilde_02_multiplier;
    number triangle_tilde_04_phase;
    number triangle_tilde_04_duty;
    number scale_tilde_05_x;
    number scale_tilde_05_lowin;
    number scale_tilde_05_hiin;
    number scale_tilde_05_lowout;
    number scale_tilde_05_highout;
    number scale_tilde_05_pow;
    number gen_06_in1;
    number gen_06_in2;
    number dspexpr_54_in1;
    number dspexpr_55_in1;
    number dspexpr_55_in2;
    number param_12_value;
    list message_22_set;
    number gen_07_in1;
    number gen_07_in2;
    number gen_07_in3;
    number gen_07_in4;
    number gen_07_in5;
    number gen_07_in6;
    number gen_07_in7;
    number gen_07_in8;
    number gen_07_in9;
    number dspexpr_56_in1;
    number dspexpr_56_in2;
    number dspexpr_57_in1;
    number dspexpr_57_in2;
    number numbertilde_38_input_number;
    number numbertilde_38_ramp;
    number scale_tilde_06_x;
    number scale_tilde_06_lowin;
    number scale_tilde_06_hiin;
    number scale_tilde_06_lowout;
    number scale_tilde_06_highout;
    number scale_tilde_06_pow;
    number numbertilde_39_input_number;
    number numbertilde_39_ramp;
    number scale_tilde_07_x;
    number scale_tilde_07_lowin;
    number scale_tilde_07_hiin;
    number scale_tilde_07_lowout;
    number scale_tilde_07_highout;
    number scale_tilde_07_pow;
    list message_23_set;
    number slide_tilde_06_x;
    number slide_tilde_06_up;
    number slide_tilde_06_down;
    list linetilde_11_segments;
    number linetilde_11_time;
    number linetilde_11_keepramp;
    number numberobj_40_value;
    list scale_09_input;
    number scale_09_inlow;
    number scale_09_inhigh;
    number scale_09_outlow;
    number scale_09_outhigh;
    number scale_09_power;
    list scale_09_out;
    number slide_tilde_07_x;
    number slide_tilde_07_up;
    number slide_tilde_07_down;
    number ip_05_value;
    number ip_05_impulse;
    number ip_06_value;
    number ip_06_impulse;
    number numberobj_41_value;
    list scale_10_input;
    number scale_10_inlow;
    number scale_10_inhigh;
    number scale_10_outlow;
    number scale_10_outhigh;
    number scale_10_power;
    list scale_10_out;
    number numberobj_42_value;
    number param_13_value;
    number numberobj_43_value;
    number numbertilde_40_input_number;
    number numbertilde_40_ramp;
    number numberobj_44_value;
    number filtercoeff_05_frequency;
    number filtercoeff_05_gain;
    number filtercoeff_05_q;
    Int filtercoeff_05_type;
    number dspexpr_58_in1;
    number dspexpr_58_in2;
    number dspexpr_59_in1;
    number dspexpr_59_in2;
    number dspexpr_60_in1;
    number dspexpr_60_in2;
    list linetilde_12_segments;
    number linetilde_12_time;
    number linetilde_12_keepramp;
    number expr_18_in1;
    number expr_18_in2;
    number expr_18_out1;
    number dspexpr_61_in1;
    number dspexpr_61_in2;
    number numbertilde_41_input_number;
    number numbertilde_41_ramp;
    number numbertilde_42_input_number;
    number numbertilde_42_ramp;
    number param_14_value;
    number dspexpr_62_in1;
    number dspexpr_62_in2;
    number numberobj_45_value;
    list linetilde_13_segments;
    number linetilde_13_time;
    number linetilde_13_keepramp;
    number expr_19_in1;
    number expr_19_in2;
    number expr_19_out1;
    list linetilde_14_segments;
    number linetilde_14_time;
    number linetilde_14_keepramp;
    number numbertilde_43_input_number;
    number numbertilde_43_ramp;
    number scale_tilde_08_x;
    number scale_tilde_08_lowin;
    number scale_tilde_08_hiin;
    number scale_tilde_08_lowout;
    number scale_tilde_08_highout;
    number scale_tilde_08_pow;
    number dspexpr_63_in1;
    number dspexpr_63_in2;
    number dspexpr_64_in1;
    number dspexpr_64_in2;
    list linetilde_15_segments;
    number linetilde_15_time;
    number linetilde_15_keepramp;
    number numberobj_46_value;
    number numbertilde_44_input_number;
    number numbertilde_44_ramp;
    list scale_11_input;
    number scale_11_inlow;
    number scale_11_inhigh;
    number scale_11_outlow;
    number scale_11_outhigh;
    number scale_11_power;
    list scale_11_out;
    number numberobj_47_value;
    number dspexpr_65_in1;
    number dspexpr_65_in2;
    list linetilde_16_segments;
    number linetilde_16_time;
    number linetilde_16_keepramp;
    number numberobj_48_value;
    list scale_12_input;
    number scale_12_inlow;
    number scale_12_inhigh;
    number scale_12_outlow;
    number scale_12_outhigh;
    number scale_12_power;
    list scale_12_out;
    list message_24_set;
    number numbertilde_45_input_number;
    number numbertilde_45_ramp;
    list message_25_set;
    number select_04_test1;
    number expr_20_in1;
    number expr_20_in2;
    number expr_20_out1;
    number toggle_04_value_number;
    number selector_04_onoff;
    number biquad_tilde_04_x;
    number biquad_tilde_04_a0;
    number biquad_tilde_04_a1;
    number biquad_tilde_04_a2;
    number biquad_tilde_04_b1;
    number biquad_tilde_04_b2;
    number biquad_tilde_05_x;
    number biquad_tilde_05_a0;
    number biquad_tilde_05_a1;
    number biquad_tilde_05_a2;
    number biquad_tilde_05_b1;
    number biquad_tilde_05_b2;
    number ip_07_value;
    number ip_07_impulse;
    number numberobj_49_value;
    list message_26_set;
    number filtercoeff_06_frequency;
    number filtercoeff_06_gain;
    number filtercoeff_06_q;
    Int filtercoeff_06_type;
    number filtercoeff_07_frequency;
    number filtercoeff_07_gain;
    number filtercoeff_07_q;
    Int filtercoeff_07_type;
    number numbertilde_46_input_number;
    number numbertilde_46_ramp;
    number numbertilde_47_input_number;
    number numbertilde_47_ramp;
    list message_27_set;
    number slide_tilde_08_x;
    number slide_tilde_08_up;
    number slide_tilde_08_down;
    number numbertilde_48_input_number;
    number numbertilde_48_ramp;
    number dspexpr_66_in1;
    number dspexpr_66_in2;
    list message_28_set;
    number numberobj_50_value;
    list scale_13_input;
    number scale_13_inlow;
    number scale_13_inhigh;
    number scale_13_outlow;
    number scale_13_outhigh;
    number scale_13_power;
    list scale_13_out;
    number numbertilde_49_input_number;
    number numbertilde_49_ramp;
    number numbertilde_50_input_number;
    number numbertilde_50_ramp;
    number numbertilde_51_input_number;
    number numbertilde_51_ramp;
    number numbertilde_52_input_number;
    number numbertilde_52_ramp;
    list message_29_set;
    list message_30_set;
    number numbertilde_53_input_number;
    number numbertilde_53_ramp;
    number numbertilde_54_input_number;
    number numbertilde_54_ramp;
    number numbertilde_55_input_number;
    number numbertilde_55_ramp;
    number numbertilde_56_input_number;
    number numbertilde_56_ramp;
    number ctlin_01_input;
    number ctlin_01_controller;
    number ctlin_01_channel;
    number expr_16_in1;
    number expr_16_in2;
    number expr_16_out1;
    number ctlin_02_input;
    number ctlin_02_controller;
    number ctlin_02_channel;
    number expr_17_in1;
    number expr_17_in2;
    number expr_17_out1;
    MillisecondTime _currentTime;
    UInt64 audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[25];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    number param_01_lastValue;
    SampleValue limi_03_lookaheadBuffers[1][512] = { };
    SampleValue limi_03_gainBuffer[512] = { };
    number limi_03_last;
    int limi_03_lookaheadIndex;
    number limi_03_recover;
    number limi_03_lookaheadInv;
    number limi_03_dc1_xm1;
    number limi_03_dc1_ym1;
    bool limi_03_setupDone;
    Int numberobj_12_currentFormat;
    number numberobj_12_lastValue;
    Int numberobj_13_currentFormat;
    number numberobj_13_lastValue;
    Int numberobj_14_currentFormat;
    number numberobj_14_lastValue;
    SampleValue limi_04_lookaheadBuffers[1][512] = { };
    SampleValue limi_04_gainBuffer[512] = { };
    number limi_04_last;
    int limi_04_lookaheadIndex;
    number limi_04_recover;
    number limi_04_lookaheadInv;
    number limi_04_dc1_xm1;
    number limi_04_dc1_ym1;
    bool limi_04_setupDone;
    SampleIndex numbertilde_14_currentInterval;
    SampleIndex numbertilde_14_currentIntervalInSamples;
    number numbertilde_14_lastValue;
    number numbertilde_14_outValue;
    number numbertilde_14_rampInSamples;
    Int numbertilde_14_currentMode;
    number numbertilde_14_smooth_d_prev;
    number numbertilde_14_smooth_prev;
    number numbertilde_14_smooth_index;
    number numbertilde_14_smooth_increment;
    bool numbertilde_14_setupDone;
    list linetilde_04_activeRamps;
    number linetilde_04_currentValue;
    number toggle_01_lastValue;
    Int numberobj_15_currentFormat;
    number numberobj_15_lastValue;
    Int numberobj_16_currentFormat;
    number numberobj_16_lastValue;
    number scopetilde_05_lastValue;
    number scopetilde_05_effectiveCount;
    number scopetilde_05_xmonitorvalue;
    number scopetilde_05_ymonitorvalue;
    list scopetilde_05_monitorbuffer;
    number scopetilde_05_xsign;
    number scopetilde_05_ysign;
    Int scopetilde_05_mode;
    bool scopetilde_05_setupDone;
    number param_02_lastValue;
    number scopetilde_06_lastValue;
    number scopetilde_06_effectiveCount;
    number scopetilde_06_xmonitorvalue;
    number scopetilde_06_ymonitorvalue;
    list scopetilde_06_monitorbuffer;
    number scopetilde_06_xsign;
    number scopetilde_06_ysign;
    Int scopetilde_06_mode;
    bool scopetilde_06_setupDone;
    list linetilde_05_activeRamps;
    number linetilde_05_currentValue;
    Int numberobj_17_currentFormat;
    number numberobj_17_lastValue;
    SampleIndex numbertilde_15_currentInterval;
    SampleIndex numbertilde_15_currentIntervalInSamples;
    number numbertilde_15_lastValue;
    number numbertilde_15_outValue;
    number numbertilde_15_rampInSamples;
    Int numbertilde_15_currentMode;
    number numbertilde_15_smooth_d_prev;
    number numbertilde_15_smooth_prev;
    number numbertilde_15_smooth_index;
    number numbertilde_15_smooth_increment;
    bool numbertilde_15_setupDone;
    SampleIndex numbertilde_16_currentInterval;
    SampleIndex numbertilde_16_currentIntervalInSamples;
    number numbertilde_16_lastValue;
    number numbertilde_16_outValue;
    number numbertilde_16_rampInSamples;
    Int numbertilde_16_currentMode;
    number numbertilde_16_smooth_d_prev;
    number numbertilde_16_smooth_prev;
    number numbertilde_16_smooth_index;
    number numbertilde_16_smooth_increment;
    bool numbertilde_16_setupDone;
    SampleValue rate_tilde_01_currentPhase;
    SampleValue rate_tilde_01_diff;
    SampleValue rate_tilde_01_prev;
    SampleValue rate_tilde_01_mult;
    SampleValue rate_tilde_01_invmult;
    int rate_tilde_01_wantlock;
    int rate_tilde_01_quant;
    bool rate_tilde_01_setupDone;
    Float64BufferRef gen_02_delay_1_buffer;
    Index gen_02_delay_1__maxdelay;
    Int gen_02_delay_1_sizemode;
    Index gen_02_delay_1_wrap;
    Int gen_02_delay_1_reader;
    Int gen_02_delay_1_writer;
    number gen_02_history_2_value;
    number gen_02_history_3_value;
    number gen_02_history_4_value;
    number gen_02_history_5_value;
    number gen_02_slide_6_prev;
    number gen_02_slide_11_prev;
    bool gen_02_setupDone;
    list listreg_01_stored;
    SampleIndex numbertilde_17_currentInterval;
    SampleIndex numbertilde_17_currentIntervalInSamples;
    number numbertilde_17_lastValue;
    number numbertilde_17_outValue;
    number numbertilde_17_rampInSamples;
    Int numbertilde_17_currentMode;
    number numbertilde_17_smooth_d_prev;
    number numbertilde_17_smooth_prev;
    number numbertilde_17_smooth_index;
    number numbertilde_17_smooth_increment;
    bool numbertilde_17_setupDone;
    SampleIndex ip_01_lastIndex;
    number ip_01_lastValue;
    SampleIndex ip_01_resetCount;
    signal ip_01_sigbuf;
    bool ip_01_setupDone;
    signal phasor_01_sigbuf;
    number phasor_01_lastLockedPhase;
    number phasor_01_conv;
    number phasor_01_ph_currentPhase;
    number phasor_01_ph_conv;
    bool phasor_01_setupDone;
    Int numberobj_18_currentFormat;
    number numberobj_18_lastValue;
    Int numberobj_19_currentFormat;
    number numberobj_19_lastValue;
    number scopetilde_07_lastValue;
    number scopetilde_07_effectiveCount;
    number scopetilde_07_xmonitorvalue;
    number scopetilde_07_ymonitorvalue;
    list scopetilde_07_monitorbuffer;
    number scopetilde_07_xsign;
    number scopetilde_07_ysign;
    Int scopetilde_07_mode;
    bool scopetilde_07_setupDone;
    number param_03_lastValue;
    number slide_tilde_03_prev;
    number slide_tilde_04_prev;
    SampleIndex ip_02_lastIndex;
    number ip_02_lastValue;
    SampleIndex ip_02_resetCount;
    signal ip_02_sigbuf;
    bool ip_02_setupDone;
    SampleIndex ip_03_lastIndex;
    number ip_03_lastValue;
    SampleIndex ip_03_resetCount;
    signal ip_03_sigbuf;
    bool ip_03_setupDone;
    Int numberobj_20_currentFormat;
    number numberobj_20_lastValue;
    Int numberobj_21_currentFormat;
    number numberobj_21_lastValue;
    number scopetilde_08_lastValue;
    number scopetilde_08_effectiveCount;
    number scopetilde_08_xmonitorvalue;
    number scopetilde_08_ymonitorvalue;
    list scopetilde_08_monitorbuffer;
    number scopetilde_08_xsign;
    number scopetilde_08_ysign;
    Int scopetilde_08_mode;
    bool scopetilde_08_setupDone;
    SampleIndex numbertilde_18_currentInterval;
    SampleIndex numbertilde_18_currentIntervalInSamples;
    number numbertilde_18_lastValue;
    number numbertilde_18_outValue;
    number numbertilde_18_rampInSamples;
    Int numbertilde_18_currentMode;
    number numbertilde_18_smooth_d_prev;
    number numbertilde_18_smooth_prev;
    number numbertilde_18_smooth_index;
    number numbertilde_18_smooth_increment;
    bool numbertilde_18_setupDone;
    Int numberobj_22_currentFormat;
    number numberobj_22_lastValue;
    number toggle_02_lastValue;
    SampleIndex numbertilde_19_currentInterval;
    SampleIndex numbertilde_19_currentIntervalInSamples;
    number numbertilde_19_lastValue;
    number numbertilde_19_outValue;
    number numbertilde_19_rampInSamples;
    Int numbertilde_19_currentMode;
    number numbertilde_19_smooth_d_prev;
    number numbertilde_19_smooth_prev;
    number numbertilde_19_smooth_index;
    number numbertilde_19_smooth_increment;
    bool numbertilde_19_setupDone;
    Int numberobj_23_currentFormat;
    number numberobj_23_lastValue;
    number filtercoeff_02_resamp_counter;
    number filtercoeff_02_activeResamp;
    number filtercoeff_02_K_EPSILON;
    number filtercoeff_02_la0;
    number filtercoeff_02_la1;
    number filtercoeff_02_la2;
    number filtercoeff_02_lb1;
    number filtercoeff_02_lb2;
    number filtercoeff_02_last_frequency;
    number filtercoeff_02_last_q;
    number filtercoeff_02_last_gain;
    Int filtercoeff_02_last_type;
    bool filtercoeff_02_force_update;
    number filtercoeff_02_localop_twopi_over_sr;
    number filtercoeff_02_localop_cs;
    number filtercoeff_02_localop_sn;
    number filtercoeff_02_localop_one_over_gain;
    number filtercoeff_02_localop_one_over_q;
    number filtercoeff_02_localop_alpha;
    number filtercoeff_02_localop_beta;
    number filtercoeff_02_localop_b0;
    number filtercoeff_02_localop_b0g;
    number filtercoeff_02_localop_A;
    number filtercoeff_02_localop_one_over_a;
    number filtercoeff_02_localop_la0;
    number filtercoeff_02_localop_la1;
    number filtercoeff_02_localop_la2;
    number filtercoeff_02_localop_lb1;
    number filtercoeff_02_localop_lb2;
    bool filtercoeff_02_setupDone;
    number param_04_lastValue;
    list linetilde_06_activeRamps;
    number linetilde_06_currentValue;
    Int numberobj_24_currentFormat;
    number numberobj_24_lastValue;
    Int numberobj_25_currentFormat;
    number numberobj_25_lastValue;
    SampleIndex numbertilde_20_currentInterval;
    SampleIndex numbertilde_20_currentIntervalInSamples;
    number numbertilde_20_lastValue;
    number numbertilde_20_outValue;
    number numbertilde_20_rampInSamples;
    Int numbertilde_20_currentMode;
    number numbertilde_20_smooth_d_prev;
    number numbertilde_20_smooth_prev;
    number numbertilde_20_smooth_index;
    number numbertilde_20_smooth_increment;
    bool numbertilde_20_setupDone;
    SampleIndex numbertilde_21_currentInterval;
    SampleIndex numbertilde_21_currentIntervalInSamples;
    number numbertilde_21_lastValue;
    number numbertilde_21_outValue;
    number numbertilde_21_rampInSamples;
    Int numbertilde_21_currentMode;
    number numbertilde_21_smooth_d_prev;
    number numbertilde_21_smooth_prev;
    number numbertilde_21_smooth_index;
    number numbertilde_21_smooth_increment;
    bool numbertilde_21_setupDone;
    Int numberobj_26_currentFormat;
    number numberobj_26_lastValue;
    list linetilde_07_activeRamps;
    number linetilde_07_currentValue;
    number scopetilde_09_lastValue;
    number scopetilde_09_effectiveCount;
    number scopetilde_09_xmonitorvalue;
    number scopetilde_09_ymonitorvalue;
    list scopetilde_09_monitorbuffer;
    number scopetilde_09_xsign;
    number scopetilde_09_ysign;
    Int scopetilde_09_mode;
    bool scopetilde_09_setupDone;
    number scopetilde_10_lastValue;
    number scopetilde_10_effectiveCount;
    number scopetilde_10_xmonitorvalue;
    number scopetilde_10_ymonitorvalue;
    list scopetilde_10_monitorbuffer;
    number scopetilde_10_xsign;
    number scopetilde_10_ysign;
    Int scopetilde_10_mode;
    bool scopetilde_10_setupDone;
    list linetilde_08_activeRamps;
    number linetilde_08_currentValue;
    SampleIndex numbertilde_22_currentInterval;
    SampleIndex numbertilde_22_currentIntervalInSamples;
    number numbertilde_22_lastValue;
    number numbertilde_22_outValue;
    number numbertilde_22_rampInSamples;
    Int numbertilde_22_currentMode;
    number numbertilde_22_smooth_d_prev;
    number numbertilde_22_smooth_prev;
    number numbertilde_22_smooth_index;
    number numbertilde_22_smooth_increment;
    bool numbertilde_22_setupDone;
    list linetilde_09_activeRamps;
    number linetilde_09_currentValue;
    Int numberobj_27_currentFormat;
    number numberobj_27_lastValue;
    number param_05_lastValue;
    SampleIndex numbertilde_23_currentInterval;
    SampleIndex numbertilde_23_currentIntervalInSamples;
    number numbertilde_23_lastValue;
    number numbertilde_23_outValue;
    number numbertilde_23_rampInSamples;
    Int numbertilde_23_currentMode;
    number numbertilde_23_smooth_d_prev;
    number numbertilde_23_smooth_prev;
    number numbertilde_23_smooth_index;
    number numbertilde_23_smooth_increment;
    bool numbertilde_23_setupDone;
    Int numberobj_28_currentFormat;
    number numberobj_28_lastValue;
    list linetilde_10_activeRamps;
    number linetilde_10_currentValue;
    Int numberobj_29_currentFormat;
    number numberobj_29_lastValue;
    SampleIndex numbertilde_24_currentInterval;
    SampleIndex numbertilde_24_currentIntervalInSamples;
    number numbertilde_24_lastValue;
    number numbertilde_24_outValue;
    number numbertilde_24_rampInSamples;
    Int numbertilde_24_currentMode;
    number numbertilde_24_smooth_d_prev;
    number numbertilde_24_smooth_prev;
    number numbertilde_24_smooth_index;
    number numbertilde_24_smooth_increment;
    bool numbertilde_24_setupDone;
    SampleIndex numbertilde_25_currentInterval;
    SampleIndex numbertilde_25_currentIntervalInSamples;
    number numbertilde_25_lastValue;
    number numbertilde_25_outValue;
    number numbertilde_25_rampInSamples;
    Int numbertilde_25_currentMode;
    number numbertilde_25_smooth_d_prev;
    number numbertilde_25_smooth_prev;
    number numbertilde_25_smooth_index;
    number numbertilde_25_smooth_increment;
    bool numbertilde_25_setupDone;
    Int numberobj_30_currentFormat;
    number numberobj_30_lastValue;
    Int numberobj_31_currentFormat;
    number numberobj_31_lastValue;
    number param_06_lastValue;
    number param_07_lastValue;
    number toggle_03_lastValue;
    number scopetilde_11_lastValue;
    number scopetilde_11_effectiveCount;
    number scopetilde_11_xmonitorvalue;
    number scopetilde_11_ymonitorvalue;
    list scopetilde_11_monitorbuffer;
    number scopetilde_11_xsign;
    number scopetilde_11_ysign;
    Int scopetilde_11_mode;
    bool scopetilde_11_setupDone;
    number biquad_tilde_02_x1;
    number biquad_tilde_02_x2;
    number biquad_tilde_02_y1;
    number biquad_tilde_02_y2;
    bool biquad_tilde_02_setupDone;
    number biquad_tilde_03_x1;
    number biquad_tilde_03_x2;
    number biquad_tilde_03_y1;
    number biquad_tilde_03_y2;
    bool biquad_tilde_03_setupDone;
    SampleIndex ip_04_lastIndex;
    number ip_04_lastValue;
    SampleIndex ip_04_resetCount;
    signal ip_04_sigbuf;
    bool ip_04_setupDone;
    Int numberobj_32_currentFormat;
    number numberobj_32_lastValue;
    number filtercoeff_03_resamp_counter;
    number filtercoeff_03_activeResamp;
    number filtercoeff_03_K_EPSILON;
    number filtercoeff_03_la0;
    number filtercoeff_03_la1;
    number filtercoeff_03_la2;
    number filtercoeff_03_lb1;
    number filtercoeff_03_lb2;
    number filtercoeff_03_last_frequency;
    number filtercoeff_03_last_q;
    number filtercoeff_03_last_gain;
    Int filtercoeff_03_last_type;
    bool filtercoeff_03_force_update;
    number filtercoeff_03_localop_twopi_over_sr;
    number filtercoeff_03_localop_cs;
    number filtercoeff_03_localop_sn;
    number filtercoeff_03_localop_one_over_gain;
    number filtercoeff_03_localop_one_over_q;
    number filtercoeff_03_localop_alpha;
    number filtercoeff_03_localop_beta;
    number filtercoeff_03_localop_b0;
    number filtercoeff_03_localop_b0g;
    number filtercoeff_03_localop_A;
    number filtercoeff_03_localop_one_over_a;
    number filtercoeff_03_localop_la0;
    number filtercoeff_03_localop_la1;
    number filtercoeff_03_localop_la2;
    number filtercoeff_03_localop_lb1;
    number filtercoeff_03_localop_lb2;
    bool filtercoeff_03_setupDone;
    number filtercoeff_04_resamp_counter;
    number filtercoeff_04_activeResamp;
    number filtercoeff_04_K_EPSILON;
    number filtercoeff_04_la0;
    number filtercoeff_04_la1;
    number filtercoeff_04_la2;
    number filtercoeff_04_lb1;
    number filtercoeff_04_lb2;
    number filtercoeff_04_last_frequency;
    number filtercoeff_04_last_q;
    number filtercoeff_04_last_gain;
    Int filtercoeff_04_last_type;
    bool filtercoeff_04_force_update;
    number filtercoeff_04_localop_twopi_over_sr;
    number filtercoeff_04_localop_cs;
    number filtercoeff_04_localop_sn;
    number filtercoeff_04_localop_one_over_gain;
    number filtercoeff_04_localop_one_over_q;
    number filtercoeff_04_localop_alpha;
    number filtercoeff_04_localop_beta;
    number filtercoeff_04_localop_b0;
    number filtercoeff_04_localop_b0g;
    number filtercoeff_04_localop_A;
    number filtercoeff_04_localop_one_over_a;
    number filtercoeff_04_localop_la0;
    number filtercoeff_04_localop_la1;
    number filtercoeff_04_localop_la2;
    number filtercoeff_04_localop_lb1;
    number filtercoeff_04_localop_lb2;
    bool filtercoeff_04_setupDone;
    SampleIndex numbertilde_26_currentInterval;
    SampleIndex numbertilde_26_currentIntervalInSamples;
    number numbertilde_26_lastValue;
    number numbertilde_26_outValue;
    number numbertilde_26_rampInSamples;
    Int numbertilde_26_currentMode;
    number numbertilde_26_smooth_d_prev;
    number numbertilde_26_smooth_prev;
    number numbertilde_26_smooth_index;
    number numbertilde_26_smooth_increment;
    bool numbertilde_26_setupDone;
    SampleIndex numbertilde_27_currentInterval;
    SampleIndex numbertilde_27_currentIntervalInSamples;
    number numbertilde_27_lastValue;
    number numbertilde_27_outValue;
    number numbertilde_27_rampInSamples;
    Int numbertilde_27_currentMode;
    number numbertilde_27_smooth_d_prev;
    number numbertilde_27_smooth_prev;
    number numbertilde_27_smooth_index;
    number numbertilde_27_smooth_increment;
    bool numbertilde_27_setupDone;
    number slide_tilde_05_prev;
    SampleIndex numbertilde_28_currentInterval;
    SampleIndex numbertilde_28_currentIntervalInSamples;
    number numbertilde_28_lastValue;
    number numbertilde_28_outValue;
    number numbertilde_28_rampInSamples;
    Int numbertilde_28_currentMode;
    number numbertilde_28_smooth_d_prev;
    number numbertilde_28_smooth_prev;
    number numbertilde_28_smooth_index;
    number numbertilde_28_smooth_increment;
    bool numbertilde_28_setupDone;
    Int numberobj_33_currentFormat;
    number numberobj_33_lastValue;
    Int numberobj_34_currentFormat;
    number numberobj_34_lastValue;
    number param_08_lastValue;
    Int numberobj_35_currentFormat;
    number numberobj_35_lastValue;
    Int numberobj_36_currentFormat;
    number numberobj_36_lastValue;
    SampleIndex numbertilde_29_currentInterval;
    SampleIndex numbertilde_29_currentIntervalInSamples;
    number numbertilde_29_lastValue;
    number numbertilde_29_outValue;
    number numbertilde_29_rampInSamples;
    Int numbertilde_29_currentMode;
    number numbertilde_29_smooth_d_prev;
    number numbertilde_29_smooth_prev;
    number numbertilde_29_smooth_index;
    number numbertilde_29_smooth_increment;
    bool numbertilde_29_setupDone;
    SampleIndex numbertilde_30_currentInterval;
    SampleIndex numbertilde_30_currentIntervalInSamples;
    number numbertilde_30_lastValue;
    number numbertilde_30_outValue;
    number numbertilde_30_rampInSamples;
    Int numbertilde_30_currentMode;
    number numbertilde_30_smooth_d_prev;
    number numbertilde_30_smooth_prev;
    number numbertilde_30_smooth_index;
    number numbertilde_30_smooth_increment;
    bool numbertilde_30_setupDone;
    number param_09_lastValue;
    SampleIndex numbertilde_31_currentInterval;
    SampleIndex numbertilde_31_currentIntervalInSamples;
    number numbertilde_31_lastValue;
    number numbertilde_31_outValue;
    number numbertilde_31_rampInSamples;
    Int numbertilde_31_currentMode;
    number numbertilde_31_smooth_d_prev;
    number numbertilde_31_smooth_prev;
    number numbertilde_31_smooth_index;
    number numbertilde_31_smooth_increment;
    bool numbertilde_31_setupDone;
    SampleIndex numbertilde_32_currentInterval;
    SampleIndex numbertilde_32_currentIntervalInSamples;
    number numbertilde_32_lastValue;
    number numbertilde_32_outValue;
    number numbertilde_32_rampInSamples;
    Int numbertilde_32_currentMode;
    number numbertilde_32_smooth_d_prev;
    number numbertilde_32_smooth_prev;
    number numbertilde_32_smooth_index;
    number numbertilde_32_smooth_increment;
    bool numbertilde_32_setupDone;
    SampleIndex numbertilde_33_currentInterval;
    SampleIndex numbertilde_33_currentIntervalInSamples;
    number numbertilde_33_lastValue;
    number numbertilde_33_outValue;
    number numbertilde_33_rampInSamples;
    Int numbertilde_33_currentMode;
    number numbertilde_33_smooth_d_prev;
    number numbertilde_33_smooth_prev;
    number numbertilde_33_smooth_index;
    number numbertilde_33_smooth_increment;
    bool numbertilde_33_setupDone;
    SampleIndex numbertilde_34_currentInterval;
    SampleIndex numbertilde_34_currentIntervalInSamples;
    number numbertilde_34_lastValue;
    number numbertilde_34_outValue;
    number numbertilde_34_rampInSamples;
    Int numbertilde_34_currentMode;
    number numbertilde_34_smooth_d_prev;
    number numbertilde_34_smooth_prev;
    number numbertilde_34_smooth_index;
    number numbertilde_34_smooth_increment;
    bool numbertilde_34_setupDone;
    MillisecondTime metro_01_last;
    MillisecondTime metro_01_next;
    Int numberobj_37_currentFormat;
    number numberobj_37_lastValue;
    number param_10_lastValue;
    Int numberobj_38_currentFormat;
    number numberobj_38_lastValue;
    Int numberobj_39_currentFormat;
    number numberobj_39_lastValue;
    SampleIndex numbertilde_35_currentInterval;
    SampleIndex numbertilde_35_currentIntervalInSamples;
    number numbertilde_35_lastValue;
    number numbertilde_35_outValue;
    number numbertilde_35_rampInSamples;
    Int numbertilde_35_currentMode;
    number numbertilde_35_smooth_d_prev;
    number numbertilde_35_smooth_prev;
    number numbertilde_35_smooth_index;
    number numbertilde_35_smooth_increment;
    bool numbertilde_35_setupDone;
    SampleIndex numbertilde_36_currentInterval;
    SampleIndex numbertilde_36_currentIntervalInSamples;
    number numbertilde_36_lastValue;
    number numbertilde_36_outValue;
    number numbertilde_36_rampInSamples;
    Int numbertilde_36_currentMode;
    number numbertilde_36_smooth_d_prev;
    number numbertilde_36_smooth_prev;
    number numbertilde_36_smooth_index;
    number numbertilde_36_smooth_increment;
    bool numbertilde_36_setupDone;
    number param_11_lastValue;
    number scopetilde_12_lastValue;
    number scopetilde_12_effectiveCount;
    number scopetilde_12_xmonitorvalue;
    number scopetilde_12_ymonitorvalue;
    list scopetilde_12_monitorbuffer;
    number scopetilde_12_xsign;
    number scopetilde_12_ysign;
    Int scopetilde_12_mode;
    bool scopetilde_12_setupDone;
    number scopetilde_13_lastValue;
    number scopetilde_13_effectiveCount;
    number scopetilde_13_xmonitorvalue;
    number scopetilde_13_ymonitorvalue;
    list scopetilde_13_monitorbuffer;
    number scopetilde_13_xsign;
    number scopetilde_13_ysign;
    Int scopetilde_13_mode;
    bool scopetilde_13_setupDone;
    SampleIndex numbertilde_37_currentInterval;
    SampleIndex numbertilde_37_currentIntervalInSamples;
    number numbertilde_37_lastValue;
    number numbertilde_37_outValue;
    number numbertilde_37_rampInSamples;
    Int numbertilde_37_currentMode;
    number numbertilde_37_smooth_d_prev;
    number numbertilde_37_smooth_prev;
    number numbertilde_37_smooth_index;
    number numbertilde_37_smooth_increment;
    bool numbertilde_37_setupDone;
    SampleValue rate_tilde_02_currentPhase;
    SampleValue rate_tilde_02_diff;
    SampleValue rate_tilde_02_prev;
    SampleValue rate_tilde_02_mult;
    SampleValue rate_tilde_02_invmult;
    int rate_tilde_02_wantlock;
    int rate_tilde_02_quant;
    bool rate_tilde_02_setupDone;
    number param_12_lastValue;
    Float64BufferRef gen_07_delay_1_buffer;
    Index gen_07_delay_1__maxdelay;
    Int gen_07_delay_1_sizemode;
    Index gen_07_delay_1_wrap;
    Int gen_07_delay_1_reader;
    Int gen_07_delay_1_writer;
    number gen_07_history_2_value;
    number gen_07_history_3_value;
    number gen_07_history_4_value;
    number gen_07_history_5_value;
    number gen_07_slide_6_prev;
    number gen_07_slide_11_prev;
    bool gen_07_setupDone;
    SampleIndex numbertilde_38_currentInterval;
    SampleIndex numbertilde_38_currentIntervalInSamples;
    number numbertilde_38_lastValue;
    number numbertilde_38_outValue;
    number numbertilde_38_rampInSamples;
    Int numbertilde_38_currentMode;
    number numbertilde_38_smooth_d_prev;
    number numbertilde_38_smooth_prev;
    number numbertilde_38_smooth_index;
    number numbertilde_38_smooth_increment;
    bool numbertilde_38_setupDone;
    SampleIndex numbertilde_39_currentInterval;
    SampleIndex numbertilde_39_currentIntervalInSamples;
    number numbertilde_39_lastValue;
    number numbertilde_39_outValue;
    number numbertilde_39_rampInSamples;
    Int numbertilde_39_currentMode;
    number numbertilde_39_smooth_d_prev;
    number numbertilde_39_smooth_prev;
    number numbertilde_39_smooth_index;
    number numbertilde_39_smooth_increment;
    bool numbertilde_39_setupDone;
    number slide_tilde_06_prev;
    list linetilde_11_activeRamps;
    number linetilde_11_currentValue;
    Int numberobj_40_currentFormat;
    number numberobj_40_lastValue;
    number slide_tilde_07_prev;
    SampleIndex ip_05_lastIndex;
    number ip_05_lastValue;
    SampleIndex ip_05_resetCount;
    signal ip_05_sigbuf;
    bool ip_05_setupDone;
    SampleIndex ip_06_lastIndex;
    number ip_06_lastValue;
    SampleIndex ip_06_resetCount;
    signal ip_06_sigbuf;
    bool ip_06_setupDone;
    Int numberobj_41_currentFormat;
    number numberobj_41_lastValue;
    Int numberobj_42_currentFormat;
    number numberobj_42_lastValue;
    number param_13_lastValue;
    Int numberobj_43_currentFormat;
    number numberobj_43_lastValue;
    SampleIndex numbertilde_40_currentInterval;
    SampleIndex numbertilde_40_currentIntervalInSamples;
    number numbertilde_40_lastValue;
    number numbertilde_40_outValue;
    number numbertilde_40_rampInSamples;
    Int numbertilde_40_currentMode;
    number numbertilde_40_smooth_d_prev;
    number numbertilde_40_smooth_prev;
    number numbertilde_40_smooth_index;
    number numbertilde_40_smooth_increment;
    bool numbertilde_40_setupDone;
    Int numberobj_44_currentFormat;
    number numberobj_44_lastValue;
    number filtercoeff_05_resamp_counter;
    number filtercoeff_05_activeResamp;
    number filtercoeff_05_K_EPSILON;
    number filtercoeff_05_la0;
    number filtercoeff_05_la1;
    number filtercoeff_05_la2;
    number filtercoeff_05_lb1;
    number filtercoeff_05_lb2;
    number filtercoeff_05_last_frequency;
    number filtercoeff_05_last_q;
    number filtercoeff_05_last_gain;
    Int filtercoeff_05_last_type;
    bool filtercoeff_05_force_update;
    number filtercoeff_05_localop_twopi_over_sr;
    number filtercoeff_05_localop_cs;
    number filtercoeff_05_localop_sn;
    number filtercoeff_05_localop_one_over_gain;
    number filtercoeff_05_localop_one_over_q;
    number filtercoeff_05_localop_alpha;
    number filtercoeff_05_localop_beta;
    number filtercoeff_05_localop_b0;
    number filtercoeff_05_localop_b0g;
    number filtercoeff_05_localop_A;
    number filtercoeff_05_localop_one_over_a;
    number filtercoeff_05_localop_la0;
    number filtercoeff_05_localop_la1;
    number filtercoeff_05_localop_la2;
    number filtercoeff_05_localop_lb1;
    number filtercoeff_05_localop_lb2;
    bool filtercoeff_05_setupDone;
    list linetilde_12_activeRamps;
    number linetilde_12_currentValue;
    SampleIndex numbertilde_41_currentInterval;
    SampleIndex numbertilde_41_currentIntervalInSamples;
    number numbertilde_41_lastValue;
    number numbertilde_41_outValue;
    number numbertilde_41_rampInSamples;
    Int numbertilde_41_currentMode;
    number numbertilde_41_smooth_d_prev;
    number numbertilde_41_smooth_prev;
    number numbertilde_41_smooth_index;
    number numbertilde_41_smooth_increment;
    bool numbertilde_41_setupDone;
    SampleIndex numbertilde_42_currentInterval;
    SampleIndex numbertilde_42_currentIntervalInSamples;
    number numbertilde_42_lastValue;
    number numbertilde_42_outValue;
    number numbertilde_42_rampInSamples;
    Int numbertilde_42_currentMode;
    number numbertilde_42_smooth_d_prev;
    number numbertilde_42_smooth_prev;
    number numbertilde_42_smooth_index;
    number numbertilde_42_smooth_increment;
    bool numbertilde_42_setupDone;
    number param_14_lastValue;
    Int numberobj_45_currentFormat;
    number numberobj_45_lastValue;
    list linetilde_13_activeRamps;
    number linetilde_13_currentValue;
    list linetilde_14_activeRamps;
    number linetilde_14_currentValue;
    SampleIndex numbertilde_43_currentInterval;
    SampleIndex numbertilde_43_currentIntervalInSamples;
    number numbertilde_43_lastValue;
    number numbertilde_43_outValue;
    number numbertilde_43_rampInSamples;
    Int numbertilde_43_currentMode;
    number numbertilde_43_smooth_d_prev;
    number numbertilde_43_smooth_prev;
    number numbertilde_43_smooth_index;
    number numbertilde_43_smooth_increment;
    bool numbertilde_43_setupDone;
    list linetilde_15_activeRamps;
    number linetilde_15_currentValue;
    Int numberobj_46_currentFormat;
    number numberobj_46_lastValue;
    SampleIndex numbertilde_44_currentInterval;
    SampleIndex numbertilde_44_currentIntervalInSamples;
    number numbertilde_44_lastValue;
    number numbertilde_44_outValue;
    number numbertilde_44_rampInSamples;
    Int numbertilde_44_currentMode;
    number numbertilde_44_smooth_d_prev;
    number numbertilde_44_smooth_prev;
    number numbertilde_44_smooth_index;
    number numbertilde_44_smooth_increment;
    bool numbertilde_44_setupDone;
    Int numberobj_47_currentFormat;
    number numberobj_47_lastValue;
    list linetilde_16_activeRamps;
    number linetilde_16_currentValue;
    Int numberobj_48_currentFormat;
    number numberobj_48_lastValue;
    SampleIndex numbertilde_45_currentInterval;
    SampleIndex numbertilde_45_currentIntervalInSamples;
    number numbertilde_45_lastValue;
    number numbertilde_45_outValue;
    number numbertilde_45_rampInSamples;
    Int numbertilde_45_currentMode;
    number numbertilde_45_smooth_d_prev;
    number numbertilde_45_smooth_prev;
    number numbertilde_45_smooth_index;
    number numbertilde_45_smooth_increment;
    bool numbertilde_45_setupDone;
    number toggle_04_lastValue;
    number biquad_tilde_04_x1;
    number biquad_tilde_04_x2;
    number biquad_tilde_04_y1;
    number biquad_tilde_04_y2;
    bool biquad_tilde_04_setupDone;
    number biquad_tilde_05_x1;
    number biquad_tilde_05_x2;
    number biquad_tilde_05_y1;
    number biquad_tilde_05_y2;
    bool biquad_tilde_05_setupDone;
    SampleIndex ip_07_lastIndex;
    number ip_07_lastValue;
    SampleIndex ip_07_resetCount;
    signal ip_07_sigbuf;
    bool ip_07_setupDone;
    Int numberobj_49_currentFormat;
    number numberobj_49_lastValue;
    number filtercoeff_06_resamp_counter;
    number filtercoeff_06_activeResamp;
    number filtercoeff_06_K_EPSILON;
    number filtercoeff_06_la0;
    number filtercoeff_06_la1;
    number filtercoeff_06_la2;
    number filtercoeff_06_lb1;
    number filtercoeff_06_lb2;
    number filtercoeff_06_last_frequency;
    number filtercoeff_06_last_q;
    number filtercoeff_06_last_gain;
    Int filtercoeff_06_last_type;
    bool filtercoeff_06_force_update;
    number filtercoeff_06_localop_twopi_over_sr;
    number filtercoeff_06_localop_cs;
    number filtercoeff_06_localop_sn;
    number filtercoeff_06_localop_one_over_gain;
    number filtercoeff_06_localop_one_over_q;
    number filtercoeff_06_localop_alpha;
    number filtercoeff_06_localop_beta;
    number filtercoeff_06_localop_b0;
    number filtercoeff_06_localop_b0g;
    number filtercoeff_06_localop_A;
    number filtercoeff_06_localop_one_over_a;
    number filtercoeff_06_localop_la0;
    number filtercoeff_06_localop_la1;
    number filtercoeff_06_localop_la2;
    number filtercoeff_06_localop_lb1;
    number filtercoeff_06_localop_lb2;
    bool filtercoeff_06_setupDone;
    number filtercoeff_07_resamp_counter;
    number filtercoeff_07_activeResamp;
    number filtercoeff_07_K_EPSILON;
    number filtercoeff_07_la0;
    number filtercoeff_07_la1;
    number filtercoeff_07_la2;
    number filtercoeff_07_lb1;
    number filtercoeff_07_lb2;
    number filtercoeff_07_last_frequency;
    number filtercoeff_07_last_q;
    number filtercoeff_07_last_gain;
    Int filtercoeff_07_last_type;
    bool filtercoeff_07_force_update;
    number filtercoeff_07_localop_twopi_over_sr;
    number filtercoeff_07_localop_cs;
    number filtercoeff_07_localop_sn;
    number filtercoeff_07_localop_one_over_gain;
    number filtercoeff_07_localop_one_over_q;
    number filtercoeff_07_localop_alpha;
    number filtercoeff_07_localop_beta;
    number filtercoeff_07_localop_b0;
    number filtercoeff_07_localop_b0g;
    number filtercoeff_07_localop_A;
    number filtercoeff_07_localop_one_over_a;
    number filtercoeff_07_localop_la0;
    number filtercoeff_07_localop_la1;
    number filtercoeff_07_localop_la2;
    number filtercoeff_07_localop_lb1;
    number filtercoeff_07_localop_lb2;
    bool filtercoeff_07_setupDone;
    SampleIndex numbertilde_46_currentInterval;
    SampleIndex numbertilde_46_currentIntervalInSamples;
    number numbertilde_46_lastValue;
    number numbertilde_46_outValue;
    number numbertilde_46_rampInSamples;
    Int numbertilde_46_currentMode;
    number numbertilde_46_smooth_d_prev;
    number numbertilde_46_smooth_prev;
    number numbertilde_46_smooth_index;
    number numbertilde_46_smooth_increment;
    bool numbertilde_46_setupDone;
    SampleIndex numbertilde_47_currentInterval;
    SampleIndex numbertilde_47_currentIntervalInSamples;
    number numbertilde_47_lastValue;
    number numbertilde_47_outValue;
    number numbertilde_47_rampInSamples;
    Int numbertilde_47_currentMode;
    number numbertilde_47_smooth_d_prev;
    number numbertilde_47_smooth_prev;
    number numbertilde_47_smooth_index;
    number numbertilde_47_smooth_increment;
    bool numbertilde_47_setupDone;
    number slide_tilde_08_prev;
    SampleIndex numbertilde_48_currentInterval;
    SampleIndex numbertilde_48_currentIntervalInSamples;
    number numbertilde_48_lastValue;
    number numbertilde_48_outValue;
    number numbertilde_48_rampInSamples;
    Int numbertilde_48_currentMode;
    number numbertilde_48_smooth_d_prev;
    number numbertilde_48_smooth_prev;
    number numbertilde_48_smooth_index;
    number numbertilde_48_smooth_increment;
    bool numbertilde_48_setupDone;
    Int numberobj_50_currentFormat;
    number numberobj_50_lastValue;
    SampleIndex numbertilde_49_currentInterval;
    SampleIndex numbertilde_49_currentIntervalInSamples;
    number numbertilde_49_lastValue;
    number numbertilde_49_outValue;
    number numbertilde_49_rampInSamples;
    Int numbertilde_49_currentMode;
    number numbertilde_49_smooth_d_prev;
    number numbertilde_49_smooth_prev;
    number numbertilde_49_smooth_index;
    number numbertilde_49_smooth_increment;
    bool numbertilde_49_setupDone;
    SampleIndex numbertilde_50_currentInterval;
    SampleIndex numbertilde_50_currentIntervalInSamples;
    number numbertilde_50_lastValue;
    number numbertilde_50_outValue;
    number numbertilde_50_rampInSamples;
    Int numbertilde_50_currentMode;
    number numbertilde_50_smooth_d_prev;
    number numbertilde_50_smooth_prev;
    number numbertilde_50_smooth_index;
    number numbertilde_50_smooth_increment;
    bool numbertilde_50_setupDone;
    SampleIndex numbertilde_51_currentInterval;
    SampleIndex numbertilde_51_currentIntervalInSamples;
    number numbertilde_51_lastValue;
    number numbertilde_51_outValue;
    number numbertilde_51_rampInSamples;
    Int numbertilde_51_currentMode;
    number numbertilde_51_smooth_d_prev;
    number numbertilde_51_smooth_prev;
    number numbertilde_51_smooth_index;
    number numbertilde_51_smooth_increment;
    bool numbertilde_51_setupDone;
    SampleIndex numbertilde_52_currentInterval;
    SampleIndex numbertilde_52_currentIntervalInSamples;
    number numbertilde_52_lastValue;
    number numbertilde_52_outValue;
    number numbertilde_52_rampInSamples;
    Int numbertilde_52_currentMode;
    number numbertilde_52_smooth_d_prev;
    number numbertilde_52_smooth_prev;
    number numbertilde_52_smooth_index;
    number numbertilde_52_smooth_increment;
    bool numbertilde_52_setupDone;
    SampleIndex numbertilde_53_currentInterval;
    SampleIndex numbertilde_53_currentIntervalInSamples;
    number numbertilde_53_lastValue;
    number numbertilde_53_outValue;
    number numbertilde_53_rampInSamples;
    Int numbertilde_53_currentMode;
    number numbertilde_53_smooth_d_prev;
    number numbertilde_53_smooth_prev;
    number numbertilde_53_smooth_index;
    number numbertilde_53_smooth_increment;
    bool numbertilde_53_setupDone;
    SampleIndex numbertilde_54_currentInterval;
    SampleIndex numbertilde_54_currentIntervalInSamples;
    number numbertilde_54_lastValue;
    number numbertilde_54_outValue;
    number numbertilde_54_rampInSamples;
    Int numbertilde_54_currentMode;
    number numbertilde_54_smooth_d_prev;
    number numbertilde_54_smooth_prev;
    number numbertilde_54_smooth_index;
    number numbertilde_54_smooth_increment;
    bool numbertilde_54_setupDone;
    SampleIndex numbertilde_55_currentInterval;
    SampleIndex numbertilde_55_currentIntervalInSamples;
    number numbertilde_55_lastValue;
    number numbertilde_55_outValue;
    number numbertilde_55_rampInSamples;
    Int numbertilde_55_currentMode;
    number numbertilde_55_smooth_d_prev;
    number numbertilde_55_smooth_prev;
    number numbertilde_55_smooth_index;
    number numbertilde_55_smooth_increment;
    bool numbertilde_55_setupDone;
    SampleIndex numbertilde_56_currentInterval;
    SampleIndex numbertilde_56_currentIntervalInSamples;
    number numbertilde_56_lastValue;
    number numbertilde_56_outValue;
    number numbertilde_56_rampInSamples;
    Int numbertilde_56_currentMode;
    number numbertilde_56_smooth_d_prev;
    number numbertilde_56_smooth_prev;
    number numbertilde_56_smooth_index;
    number numbertilde_56_smooth_increment;
    bool numbertilde_56_setupDone;
    int ctlin_01_status;
    int ctlin_01_byte1;
    int ctlin_01_inchan;
    int ctlin_02_status;
    int ctlin_02_byte1;
    int ctlin_02_inchan;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    number globaltransport_bbuBase;
    bool globaltransport_setupDone;
    number stackprotect_count;
    DataRef RNBODefaultSinus;
    DataRef gen_02_delay_1_bufferobj;
    DataRef gen_07_delay_1_bufferobj;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_06* p_01;
    RNBOSubpatcher_07* p_02;
    RNBOSubpatcher_08* p_03;
    RNBOSubpatcher_09* p_04;
    RNBOSubpatcher_10* p_05;

};

PatcherInterface* createFlansch()
{
    return new Flansch();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr FlanschFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return createFlansch;
}

} // end RNBO namespace

